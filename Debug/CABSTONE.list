
CABSTONE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a64  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  08003c08  08003c08  00013c08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003e40  08003e40  00013e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003e48  08003e48  00013e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003e4c  08003e4c  00013e4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  08003e50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000fc  20000070  08003ec0  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000016c  08003ec0  0002016c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000b38c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000019ce  00000000  00000000  0002b42c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000273e  00000000  00000000  0002cdfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000004f8  00000000  00000000  0002f538  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000690  00000000  00000000  0002fa30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00002ebf  00000000  00000000  000300c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002267  00000000  00000000  00032f7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000351e6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001410  00000000  00000000  00035264  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003bec 	.word	0x08003bec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003bec 	.word	0x08003bec

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_d2iz>:
 8000b24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b2c:	d215      	bcs.n	8000b5a <__aeabi_d2iz+0x36>
 8000b2e:	d511      	bpl.n	8000b54 <__aeabi_d2iz+0x30>
 8000b30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b38:	d912      	bls.n	8000b60 <__aeabi_d2iz+0x3c>
 8000b3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b46:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b4e:	bf18      	it	ne
 8000b50:	4240      	negne	r0, r0
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5e:	d105      	bne.n	8000b6c <__aeabi_d2iz+0x48>
 8000b60:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b64:	bf08      	it	eq
 8000b66:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <__aeabi_uldivmod>:
 8000b74:	b953      	cbnz	r3, 8000b8c <__aeabi_uldivmod+0x18>
 8000b76:	b94a      	cbnz	r2, 8000b8c <__aeabi_uldivmod+0x18>
 8000b78:	2900      	cmp	r1, #0
 8000b7a:	bf08      	it	eq
 8000b7c:	2800      	cmpeq	r0, #0
 8000b7e:	bf1c      	itt	ne
 8000b80:	f04f 31ff 	movne.w	r1, #4294967295
 8000b84:	f04f 30ff 	movne.w	r0, #4294967295
 8000b88:	f000 b97a 	b.w	8000e80 <__aeabi_idiv0>
 8000b8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b94:	f000 f806 	bl	8000ba4 <__udivmoddi4>
 8000b98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba0:	b004      	add	sp, #16
 8000ba2:	4770      	bx	lr

08000ba4 <__udivmoddi4>:
 8000ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba8:	468c      	mov	ip, r1
 8000baa:	460d      	mov	r5, r1
 8000bac:	4604      	mov	r4, r0
 8000bae:	9e08      	ldr	r6, [sp, #32]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d151      	bne.n	8000c58 <__udivmoddi4+0xb4>
 8000bb4:	428a      	cmp	r2, r1
 8000bb6:	4617      	mov	r7, r2
 8000bb8:	d96d      	bls.n	8000c96 <__udivmoddi4+0xf2>
 8000bba:	fab2 fe82 	clz	lr, r2
 8000bbe:	f1be 0f00 	cmp.w	lr, #0
 8000bc2:	d00b      	beq.n	8000bdc <__udivmoddi4+0x38>
 8000bc4:	f1ce 0c20 	rsb	ip, lr, #32
 8000bc8:	fa01 f50e 	lsl.w	r5, r1, lr
 8000bcc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000bd0:	fa02 f70e 	lsl.w	r7, r2, lr
 8000bd4:	ea4c 0c05 	orr.w	ip, ip, r5
 8000bd8:	fa00 f40e 	lsl.w	r4, r0, lr
 8000bdc:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000be0:	0c25      	lsrs	r5, r4, #16
 8000be2:	fbbc f8fa 	udiv	r8, ip, sl
 8000be6:	fa1f f987 	uxth.w	r9, r7
 8000bea:	fb0a cc18 	mls	ip, sl, r8, ip
 8000bee:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000bf2:	fb08 f309 	mul.w	r3, r8, r9
 8000bf6:	42ab      	cmp	r3, r5
 8000bf8:	d90a      	bls.n	8000c10 <__udivmoddi4+0x6c>
 8000bfa:	19ed      	adds	r5, r5, r7
 8000bfc:	f108 32ff 	add.w	r2, r8, #4294967295
 8000c00:	f080 8123 	bcs.w	8000e4a <__udivmoddi4+0x2a6>
 8000c04:	42ab      	cmp	r3, r5
 8000c06:	f240 8120 	bls.w	8000e4a <__udivmoddi4+0x2a6>
 8000c0a:	f1a8 0802 	sub.w	r8, r8, #2
 8000c0e:	443d      	add	r5, r7
 8000c10:	1aed      	subs	r5, r5, r3
 8000c12:	b2a4      	uxth	r4, r4
 8000c14:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c18:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c1c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c20:	fb00 f909 	mul.w	r9, r0, r9
 8000c24:	45a1      	cmp	r9, r4
 8000c26:	d909      	bls.n	8000c3c <__udivmoddi4+0x98>
 8000c28:	19e4      	adds	r4, r4, r7
 8000c2a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c2e:	f080 810a 	bcs.w	8000e46 <__udivmoddi4+0x2a2>
 8000c32:	45a1      	cmp	r9, r4
 8000c34:	f240 8107 	bls.w	8000e46 <__udivmoddi4+0x2a2>
 8000c38:	3802      	subs	r0, #2
 8000c3a:	443c      	add	r4, r7
 8000c3c:	eba4 0409 	sub.w	r4, r4, r9
 8000c40:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c44:	2100      	movs	r1, #0
 8000c46:	2e00      	cmp	r6, #0
 8000c48:	d061      	beq.n	8000d0e <__udivmoddi4+0x16a>
 8000c4a:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c4e:	2300      	movs	r3, #0
 8000c50:	6034      	str	r4, [r6, #0]
 8000c52:	6073      	str	r3, [r6, #4]
 8000c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c58:	428b      	cmp	r3, r1
 8000c5a:	d907      	bls.n	8000c6c <__udivmoddi4+0xc8>
 8000c5c:	2e00      	cmp	r6, #0
 8000c5e:	d054      	beq.n	8000d0a <__udivmoddi4+0x166>
 8000c60:	2100      	movs	r1, #0
 8000c62:	e886 0021 	stmia.w	r6, {r0, r5}
 8000c66:	4608      	mov	r0, r1
 8000c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6c:	fab3 f183 	clz	r1, r3
 8000c70:	2900      	cmp	r1, #0
 8000c72:	f040 808e 	bne.w	8000d92 <__udivmoddi4+0x1ee>
 8000c76:	42ab      	cmp	r3, r5
 8000c78:	d302      	bcc.n	8000c80 <__udivmoddi4+0xdc>
 8000c7a:	4282      	cmp	r2, r0
 8000c7c:	f200 80fa 	bhi.w	8000e74 <__udivmoddi4+0x2d0>
 8000c80:	1a84      	subs	r4, r0, r2
 8000c82:	eb65 0503 	sbc.w	r5, r5, r3
 8000c86:	2001      	movs	r0, #1
 8000c88:	46ac      	mov	ip, r5
 8000c8a:	2e00      	cmp	r6, #0
 8000c8c:	d03f      	beq.n	8000d0e <__udivmoddi4+0x16a>
 8000c8e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	b912      	cbnz	r2, 8000c9e <__udivmoddi4+0xfa>
 8000c98:	2701      	movs	r7, #1
 8000c9a:	fbb7 f7f2 	udiv	r7, r7, r2
 8000c9e:	fab7 fe87 	clz	lr, r7
 8000ca2:	f1be 0f00 	cmp.w	lr, #0
 8000ca6:	d134      	bne.n	8000d12 <__udivmoddi4+0x16e>
 8000ca8:	1beb      	subs	r3, r5, r7
 8000caa:	0c3a      	lsrs	r2, r7, #16
 8000cac:	fa1f fc87 	uxth.w	ip, r7
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	fbb3 f8f2 	udiv	r8, r3, r2
 8000cb6:	0c25      	lsrs	r5, r4, #16
 8000cb8:	fb02 3318 	mls	r3, r2, r8, r3
 8000cbc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000cc0:	fb0c f308 	mul.w	r3, ip, r8
 8000cc4:	42ab      	cmp	r3, r5
 8000cc6:	d907      	bls.n	8000cd8 <__udivmoddi4+0x134>
 8000cc8:	19ed      	adds	r5, r5, r7
 8000cca:	f108 30ff 	add.w	r0, r8, #4294967295
 8000cce:	d202      	bcs.n	8000cd6 <__udivmoddi4+0x132>
 8000cd0:	42ab      	cmp	r3, r5
 8000cd2:	f200 80d1 	bhi.w	8000e78 <__udivmoddi4+0x2d4>
 8000cd6:	4680      	mov	r8, r0
 8000cd8:	1aed      	subs	r5, r5, r3
 8000cda:	b2a3      	uxth	r3, r4
 8000cdc:	fbb5 f0f2 	udiv	r0, r5, r2
 8000ce0:	fb02 5510 	mls	r5, r2, r0, r5
 8000ce4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000ce8:	fb0c fc00 	mul.w	ip, ip, r0
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d907      	bls.n	8000d00 <__udivmoddi4+0x15c>
 8000cf0:	19e4      	adds	r4, r4, r7
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	d202      	bcs.n	8000cfe <__udivmoddi4+0x15a>
 8000cf8:	45a4      	cmp	ip, r4
 8000cfa:	f200 80b8 	bhi.w	8000e6e <__udivmoddi4+0x2ca>
 8000cfe:	4618      	mov	r0, r3
 8000d00:	eba4 040c 	sub.w	r4, r4, ip
 8000d04:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d08:	e79d      	b.n	8000c46 <__udivmoddi4+0xa2>
 8000d0a:	4631      	mov	r1, r6
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d12:	f1ce 0420 	rsb	r4, lr, #32
 8000d16:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d1a:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d1e:	fa20 f804 	lsr.w	r8, r0, r4
 8000d22:	0c3a      	lsrs	r2, r7, #16
 8000d24:	fa25 f404 	lsr.w	r4, r5, r4
 8000d28:	ea48 0803 	orr.w	r8, r8, r3
 8000d2c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d30:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d34:	fb02 4411 	mls	r4, r2, r1, r4
 8000d38:	fa1f fc87 	uxth.w	ip, r7
 8000d3c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000d40:	fb01 f30c 	mul.w	r3, r1, ip
 8000d44:	42ab      	cmp	r3, r5
 8000d46:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d4a:	d909      	bls.n	8000d60 <__udivmoddi4+0x1bc>
 8000d4c:	19ed      	adds	r5, r5, r7
 8000d4e:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d52:	f080 808a 	bcs.w	8000e6a <__udivmoddi4+0x2c6>
 8000d56:	42ab      	cmp	r3, r5
 8000d58:	f240 8087 	bls.w	8000e6a <__udivmoddi4+0x2c6>
 8000d5c:	3902      	subs	r1, #2
 8000d5e:	443d      	add	r5, r7
 8000d60:	1aeb      	subs	r3, r5, r3
 8000d62:	fa1f f588 	uxth.w	r5, r8
 8000d66:	fbb3 f0f2 	udiv	r0, r3, r2
 8000d6a:	fb02 3310 	mls	r3, r2, r0, r3
 8000d6e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d72:	fb00 f30c 	mul.w	r3, r0, ip
 8000d76:	42ab      	cmp	r3, r5
 8000d78:	d907      	bls.n	8000d8a <__udivmoddi4+0x1e6>
 8000d7a:	19ed      	adds	r5, r5, r7
 8000d7c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d80:	d26f      	bcs.n	8000e62 <__udivmoddi4+0x2be>
 8000d82:	42ab      	cmp	r3, r5
 8000d84:	d96d      	bls.n	8000e62 <__udivmoddi4+0x2be>
 8000d86:	3802      	subs	r0, #2
 8000d88:	443d      	add	r5, r7
 8000d8a:	1aeb      	subs	r3, r5, r3
 8000d8c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d90:	e78f      	b.n	8000cb2 <__udivmoddi4+0x10e>
 8000d92:	f1c1 0720 	rsb	r7, r1, #32
 8000d96:	fa22 f807 	lsr.w	r8, r2, r7
 8000d9a:	408b      	lsls	r3, r1
 8000d9c:	fa05 f401 	lsl.w	r4, r5, r1
 8000da0:	ea48 0303 	orr.w	r3, r8, r3
 8000da4:	fa20 fe07 	lsr.w	lr, r0, r7
 8000da8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000dac:	40fd      	lsrs	r5, r7
 8000dae:	ea4e 0e04 	orr.w	lr, lr, r4
 8000db2:	fbb5 f9fc 	udiv	r9, r5, ip
 8000db6:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000dba:	fb0c 5519 	mls	r5, ip, r9, r5
 8000dbe:	fa1f f883 	uxth.w	r8, r3
 8000dc2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000dc6:	fb09 f408 	mul.w	r4, r9, r8
 8000dca:	42ac      	cmp	r4, r5
 8000dcc:	fa02 f201 	lsl.w	r2, r2, r1
 8000dd0:	fa00 fa01 	lsl.w	sl, r0, r1
 8000dd4:	d908      	bls.n	8000de8 <__udivmoddi4+0x244>
 8000dd6:	18ed      	adds	r5, r5, r3
 8000dd8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ddc:	d243      	bcs.n	8000e66 <__udivmoddi4+0x2c2>
 8000dde:	42ac      	cmp	r4, r5
 8000de0:	d941      	bls.n	8000e66 <__udivmoddi4+0x2c2>
 8000de2:	f1a9 0902 	sub.w	r9, r9, #2
 8000de6:	441d      	add	r5, r3
 8000de8:	1b2d      	subs	r5, r5, r4
 8000dea:	fa1f fe8e 	uxth.w	lr, lr
 8000dee:	fbb5 f0fc 	udiv	r0, r5, ip
 8000df2:	fb0c 5510 	mls	r5, ip, r0, r5
 8000df6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000dfa:	fb00 f808 	mul.w	r8, r0, r8
 8000dfe:	45a0      	cmp	r8, r4
 8000e00:	d907      	bls.n	8000e12 <__udivmoddi4+0x26e>
 8000e02:	18e4      	adds	r4, r4, r3
 8000e04:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e08:	d229      	bcs.n	8000e5e <__udivmoddi4+0x2ba>
 8000e0a:	45a0      	cmp	r8, r4
 8000e0c:	d927      	bls.n	8000e5e <__udivmoddi4+0x2ba>
 8000e0e:	3802      	subs	r0, #2
 8000e10:	441c      	add	r4, r3
 8000e12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e16:	eba4 0408 	sub.w	r4, r4, r8
 8000e1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e1e:	454c      	cmp	r4, r9
 8000e20:	46c6      	mov	lr, r8
 8000e22:	464d      	mov	r5, r9
 8000e24:	d315      	bcc.n	8000e52 <__udivmoddi4+0x2ae>
 8000e26:	d012      	beq.n	8000e4e <__udivmoddi4+0x2aa>
 8000e28:	b156      	cbz	r6, 8000e40 <__udivmoddi4+0x29c>
 8000e2a:	ebba 030e 	subs.w	r3, sl, lr
 8000e2e:	eb64 0405 	sbc.w	r4, r4, r5
 8000e32:	fa04 f707 	lsl.w	r7, r4, r7
 8000e36:	40cb      	lsrs	r3, r1
 8000e38:	431f      	orrs	r7, r3
 8000e3a:	40cc      	lsrs	r4, r1
 8000e3c:	6037      	str	r7, [r6, #0]
 8000e3e:	6074      	str	r4, [r6, #4]
 8000e40:	2100      	movs	r1, #0
 8000e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e46:	4618      	mov	r0, r3
 8000e48:	e6f8      	b.n	8000c3c <__udivmoddi4+0x98>
 8000e4a:	4690      	mov	r8, r2
 8000e4c:	e6e0      	b.n	8000c10 <__udivmoddi4+0x6c>
 8000e4e:	45c2      	cmp	sl, r8
 8000e50:	d2ea      	bcs.n	8000e28 <__udivmoddi4+0x284>
 8000e52:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e56:	eb69 0503 	sbc.w	r5, r9, r3
 8000e5a:	3801      	subs	r0, #1
 8000e5c:	e7e4      	b.n	8000e28 <__udivmoddi4+0x284>
 8000e5e:	4628      	mov	r0, r5
 8000e60:	e7d7      	b.n	8000e12 <__udivmoddi4+0x26e>
 8000e62:	4640      	mov	r0, r8
 8000e64:	e791      	b.n	8000d8a <__udivmoddi4+0x1e6>
 8000e66:	4681      	mov	r9, r0
 8000e68:	e7be      	b.n	8000de8 <__udivmoddi4+0x244>
 8000e6a:	4601      	mov	r1, r0
 8000e6c:	e778      	b.n	8000d60 <__udivmoddi4+0x1bc>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	443c      	add	r4, r7
 8000e72:	e745      	b.n	8000d00 <__udivmoddi4+0x15c>
 8000e74:	4608      	mov	r0, r1
 8000e76:	e708      	b.n	8000c8a <__udivmoddi4+0xe6>
 8000e78:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7c:	443d      	add	r5, r7
 8000e7e:	e72b      	b.n	8000cd8 <__udivmoddi4+0x134>

08000e80 <__aeabi_idiv0>:
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop

08000e84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e84:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e86:	4a0e      	ldr	r2, [pc, #56]	; (8000ec0 <HAL_InitTick+0x3c>)
 8000e88:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <HAL_InitTick+0x40>)
{
 8000e8a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e8c:	7818      	ldrb	r0, [r3, #0]
 8000e8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e92:	fbb3 f3f0 	udiv	r3, r3, r0
 8000e96:	6810      	ldr	r0, [r2, #0]
 8000e98:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e9c:	f000 f8a8 	bl	8000ff0 <HAL_SYSTICK_Config>
 8000ea0:	4604      	mov	r4, r0
 8000ea2:	b958      	cbnz	r0, 8000ebc <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ea4:	2d0f      	cmp	r5, #15
 8000ea6:	d809      	bhi.n	8000ebc <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	4629      	mov	r1, r5
 8000eac:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb0:	f000 f85e 	bl	8000f70 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eb4:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <HAL_InitTick+0x44>)
 8000eb6:	4620      	mov	r0, r4
 8000eb8:	601d      	str	r5, [r3, #0]
 8000eba:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000ebc:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000ebe:	bd38      	pop	{r3, r4, r5, pc}
 8000ec0:	20000008 	.word	0x20000008
 8000ec4:	20000000 	.word	0x20000000
 8000ec8:	20000004 	.word	0x20000004

08000ecc <HAL_Init>:
{
 8000ecc:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ece:	4b0b      	ldr	r3, [pc, #44]	; (8000efc <HAL_Init+0x30>)
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ed6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000ede:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ee6:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee8:	2003      	movs	r0, #3
 8000eea:	f000 f82f 	bl	8000f4c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eee:	2000      	movs	r0, #0
 8000ef0:	f7ff ffc8 	bl	8000e84 <HAL_InitTick>
  HAL_MspInit();
 8000ef4:	f001 f868 	bl	8001fc8 <HAL_MspInit>
}
 8000ef8:	2000      	movs	r0, #0
 8000efa:	bd08      	pop	{r3, pc}
 8000efc:	40023c00 	.word	0x40023c00

08000f00 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000f00:	4a03      	ldr	r2, [pc, #12]	; (8000f10 <HAL_IncTick+0x10>)
 8000f02:	4b04      	ldr	r3, [pc, #16]	; (8000f14 <HAL_IncTick+0x14>)
 8000f04:	6811      	ldr	r1, [r2, #0]
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	440b      	add	r3, r1
 8000f0a:	6013      	str	r3, [r2, #0]
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	200000a4 	.word	0x200000a4
 8000f14:	20000000 	.word	0x20000000

08000f18 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f18:	4b01      	ldr	r3, [pc, #4]	; (8000f20 <HAL_GetTick+0x8>)
 8000f1a:	6818      	ldr	r0, [r3, #0]
}
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	200000a4 	.word	0x200000a4

08000f24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f24:	b538      	push	{r3, r4, r5, lr}
 8000f26:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000f28:	f7ff fff6 	bl	8000f18 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f2c:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000f2e:	bf1c      	itt	ne
 8000f30:	4b05      	ldrne	r3, [pc, #20]	; (8000f48 <HAL_Delay+0x24>)
 8000f32:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000f34:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000f36:	bf18      	it	ne
 8000f38:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f3a:	f7ff ffed 	bl	8000f18 <HAL_GetTick>
 8000f3e:	1b40      	subs	r0, r0, r5
 8000f40:	4284      	cmp	r4, r0
 8000f42:	d8fa      	bhi.n	8000f3a <HAL_Delay+0x16>
  {
  }
}
 8000f44:	bd38      	pop	{r3, r4, r5, pc}
 8000f46:	bf00      	nop
 8000f48:	20000000 	.word	0x20000000

08000f4c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f4c:	4a07      	ldr	r2, [pc, #28]	; (8000f6c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000f4e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f50:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f54:	041b      	lsls	r3, r3, #16
 8000f56:	0c1b      	lsrs	r3, r3, #16
 8000f58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000f5c:	0200      	lsls	r0, r0, #8
 8000f5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f62:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000f66:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000f68:	60d3      	str	r3, [r2, #12]
 8000f6a:	4770      	bx	lr
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f70:	4b17      	ldr	r3, [pc, #92]	; (8000fd0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f72:	b530      	push	{r4, r5, lr}
 8000f74:	68dc      	ldr	r4, [r3, #12]
 8000f76:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f7a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f7e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f80:	2b04      	cmp	r3, #4
 8000f82:	bf28      	it	cs
 8000f84:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f86:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f88:	f04f 0501 	mov.w	r5, #1
 8000f8c:	fa05 f303 	lsl.w	r3, r5, r3
 8000f90:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f94:	bf8c      	ite	hi
 8000f96:	3c03      	subhi	r4, #3
 8000f98:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f9a:	4019      	ands	r1, r3
 8000f9c:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f9e:	fa05 f404 	lsl.w	r4, r5, r4
 8000fa2:	3c01      	subs	r4, #1
 8000fa4:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000fa6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa8:	ea42 0201 	orr.w	r2, r2, r1
 8000fac:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb0:	bfaf      	iteee	ge
 8000fb2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb6:	f000 000f 	andlt.w	r0, r0, #15
 8000fba:	4b06      	ldrlt	r3, [pc, #24]	; (8000fd4 <HAL_NVIC_SetPriority+0x64>)
 8000fbc:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fbe:	bfa5      	ittet	ge
 8000fc0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000fc4:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc6:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc8:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000fcc:	bd30      	pop	{r4, r5, pc}
 8000fce:	bf00      	nop
 8000fd0:	e000ed00 	.word	0xe000ed00
 8000fd4:	e000ed14 	.word	0xe000ed14

08000fd8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000fd8:	0942      	lsrs	r2, r0, #5
 8000fda:	2301      	movs	r3, #1
 8000fdc:	f000 001f 	and.w	r0, r0, #31
 8000fe0:	fa03 f000 	lsl.w	r0, r3, r0
 8000fe4:	4b01      	ldr	r3, [pc, #4]	; (8000fec <HAL_NVIC_EnableIRQ+0x14>)
 8000fe6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000fea:	4770      	bx	lr
 8000fec:	e000e100 	.word	0xe000e100

08000ff0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ff6:	d20a      	bcs.n	800100e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ff8:	4b06      	ldr	r3, [pc, #24]	; (8001014 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffa:	4a07      	ldr	r2, [pc, #28]	; (8001018 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ffc:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffe:	21f0      	movs	r1, #240	; 0xf0
 8001000:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001004:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001006:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001008:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800100e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	e000e010 	.word	0xe000e010
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800101c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001020:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001022:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001024:	f8df 819c 	ldr.w	r8, [pc, #412]	; 80011c4 <HAL_GPIO_Init+0x1a8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001028:	4a64      	ldr	r2, [pc, #400]	; (80011bc <HAL_GPIO_Init+0x1a0>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800102a:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 800102c:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001030:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001032:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8001034:	fa09 f703 	lsl.w	r7, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001038:	ea07 0604 	and.w	r6, r7, r4
    if(iocurrent == ioposition)
 800103c:	42b7      	cmp	r7, r6
 800103e:	f040 80ad 	bne.w	800119c <HAL_GPIO_Init+0x180>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001042:	684c      	ldr	r4, [r1, #4]
 8001044:	f024 0a10 	bic.w	sl, r4, #16
 8001048:	f1ba 0f02 	cmp.w	sl, #2
 800104c:	d116      	bne.n	800107c <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3U];
 800104e:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8001052:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001056:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800105a:	f8dc 5020 	ldr.w	r5, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800105e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001062:	f04f 0e0f 	mov.w	lr, #15
 8001066:	fa0e fe0b 	lsl.w	lr, lr, fp
 800106a:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800106e:	690d      	ldr	r5, [r1, #16]
 8001070:	fa05 f50b 	lsl.w	r5, r5, fp
 8001074:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001078:	f8cc 5020 	str.w	r5, [ip, #32]
 800107c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001080:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001082:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001086:	fa05 f50c 	lsl.w	r5, r5, ip
 800108a:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800108c:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001090:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001094:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001098:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800109c:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010a0:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010a4:	9500      	str	r5, [sp, #0]
      GPIOx->MODER = temp;
 80010a6:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010aa:	d815      	bhi.n	80010d8 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR; 
 80010ac:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010b0:	ea05 0e0e 	and.w	lr, r5, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010b4:	68cd      	ldr	r5, [r1, #12]
 80010b6:	fa05 fa0c 	lsl.w	sl, r5, ip
 80010ba:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 80010be:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 80010c2:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010c6:	ea2e 0707 	bic.w	r7, lr, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010ca:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 80010ce:	fa0e fe03 	lsl.w	lr, lr, r3
 80010d2:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 80010d6:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80010d8:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010da:	9d00      	ldr	r5, [sp, #0]
 80010dc:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010de:	688f      	ldr	r7, [r1, #8]
 80010e0:	fa07 f70c 	lsl.w	r7, r7, ip
 80010e4:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80010e6:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010e8:	00e5      	lsls	r5, r4, #3
 80010ea:	d557      	bpl.n	800119c <HAL_GPIO_Init+0x180>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ec:	f04f 0b00 	mov.w	fp, #0
 80010f0:	f8cd b00c 	str.w	fp, [sp, #12]
 80010f4:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010f8:	4d31      	ldr	r5, [pc, #196]	; (80011c0 <HAL_GPIO_Init+0x1a4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010fa:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80010fe:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8001102:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8001106:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800110a:	9703      	str	r7, [sp, #12]
 800110c:	9f03      	ldr	r7, [sp, #12]
 800110e:	f023 0703 	bic.w	r7, r3, #3
 8001112:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001116:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800111a:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800111e:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001122:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001126:	f04f 0e0f 	mov.w	lr, #15
 800112a:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800112e:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001130:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001134:	d039      	beq.n	80011aa <HAL_GPIO_Init+0x18e>
 8001136:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800113a:	42a8      	cmp	r0, r5
 800113c:	d037      	beq.n	80011ae <HAL_GPIO_Init+0x192>
 800113e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001142:	42a8      	cmp	r0, r5
 8001144:	d035      	beq.n	80011b2 <HAL_GPIO_Init+0x196>
 8001146:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800114a:	42a8      	cmp	r0, r5
 800114c:	d033      	beq.n	80011b6 <HAL_GPIO_Init+0x19a>
 800114e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001152:	42a8      	cmp	r0, r5
 8001154:	bf14      	ite	ne
 8001156:	2507      	movne	r5, #7
 8001158:	2504      	moveq	r5, #4
 800115a:	fa05 f50c 	lsl.w	r5, r5, ip
 800115e:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001162:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8001164:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001166:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001168:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800116c:	bf0c      	ite	eq
 800116e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001170:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8001172:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8001174:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001176:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800117a:	bf0c      	ite	eq
 800117c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800117e:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8001180:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001182:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001184:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001188:	bf0c      	ite	eq
 800118a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800118c:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 800118e:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8001190:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001192:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001194:	bf54      	ite	pl
 8001196:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8001198:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 800119a:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800119c:	3301      	adds	r3, #1
 800119e:	2b10      	cmp	r3, #16
 80011a0:	f47f af47 	bne.w	8001032 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80011a4:	b005      	add	sp, #20
 80011a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011aa:	465d      	mov	r5, fp
 80011ac:	e7d5      	b.n	800115a <HAL_GPIO_Init+0x13e>
 80011ae:	2501      	movs	r5, #1
 80011b0:	e7d3      	b.n	800115a <HAL_GPIO_Init+0x13e>
 80011b2:	2502      	movs	r5, #2
 80011b4:	e7d1      	b.n	800115a <HAL_GPIO_Init+0x13e>
 80011b6:	2503      	movs	r5, #3
 80011b8:	e7cf      	b.n	800115a <HAL_GPIO_Init+0x13e>
 80011ba:	bf00      	nop
 80011bc:	40013c00 	.word	0x40013c00
 80011c0:	40020000 	.word	0x40020000
 80011c4:	40023800 	.word	0x40023800

080011c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011cc:	4604      	mov	r4, r0
 80011ce:	b918      	cbnz	r0, 80011d8 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80011d0:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80011d2:	b002      	add	sp, #8
 80011d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011d8:	6803      	ldr	r3, [r0, #0]
 80011da:	07dd      	lsls	r5, r3, #31
 80011dc:	d410      	bmi.n	8001200 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011de:	6823      	ldr	r3, [r4, #0]
 80011e0:	0798      	lsls	r0, r3, #30
 80011e2:	d458      	bmi.n	8001296 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011e4:	6823      	ldr	r3, [r4, #0]
 80011e6:	071a      	lsls	r2, r3, #28
 80011e8:	f100 809a 	bmi.w	8001320 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011ec:	6823      	ldr	r3, [r4, #0]
 80011ee:	075b      	lsls	r3, r3, #29
 80011f0:	f100 80b8 	bmi.w	8001364 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011f4:	69a2      	ldr	r2, [r4, #24]
 80011f6:	2a00      	cmp	r2, #0
 80011f8:	f040 8119 	bne.w	800142e <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 80011fc:	2000      	movs	r0, #0
 80011fe:	e7e8      	b.n	80011d2 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001200:	4ba6      	ldr	r3, [pc, #664]	; (800149c <HAL_RCC_OscConfig+0x2d4>)
 8001202:	689a      	ldr	r2, [r3, #8]
 8001204:	f002 020c 	and.w	r2, r2, #12
 8001208:	2a04      	cmp	r2, #4
 800120a:	d007      	beq.n	800121c <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800120c:	689a      	ldr	r2, [r3, #8]
 800120e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001212:	2a08      	cmp	r2, #8
 8001214:	d10a      	bne.n	800122c <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	0259      	lsls	r1, r3, #9
 800121a:	d507      	bpl.n	800122c <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800121c:	4b9f      	ldr	r3, [pc, #636]	; (800149c <HAL_RCC_OscConfig+0x2d4>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	039a      	lsls	r2, r3, #14
 8001222:	d5dc      	bpl.n	80011de <HAL_RCC_OscConfig+0x16>
 8001224:	6863      	ldr	r3, [r4, #4]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d1d9      	bne.n	80011de <HAL_RCC_OscConfig+0x16>
 800122a:	e7d1      	b.n	80011d0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800122c:	6863      	ldr	r3, [r4, #4]
 800122e:	4d9b      	ldr	r5, [pc, #620]	; (800149c <HAL_RCC_OscConfig+0x2d4>)
 8001230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001234:	d111      	bne.n	800125a <HAL_RCC_OscConfig+0x92>
 8001236:	682b      	ldr	r3, [r5, #0]
 8001238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800123c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800123e:	f7ff fe6b 	bl	8000f18 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001242:	4d96      	ldr	r5, [pc, #600]	; (800149c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001244:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001246:	682b      	ldr	r3, [r5, #0]
 8001248:	039b      	lsls	r3, r3, #14
 800124a:	d4c8      	bmi.n	80011de <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800124c:	f7ff fe64 	bl	8000f18 <HAL_GetTick>
 8001250:	1b80      	subs	r0, r0, r6
 8001252:	2864      	cmp	r0, #100	; 0x64
 8001254:	d9f7      	bls.n	8001246 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8001256:	2003      	movs	r0, #3
 8001258:	e7bb      	b.n	80011d2 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800125a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800125e:	d104      	bne.n	800126a <HAL_RCC_OscConfig+0xa2>
 8001260:	682b      	ldr	r3, [r5, #0]
 8001262:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001266:	602b      	str	r3, [r5, #0]
 8001268:	e7e5      	b.n	8001236 <HAL_RCC_OscConfig+0x6e>
 800126a:	682a      	ldr	r2, [r5, #0]
 800126c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001270:	602a      	str	r2, [r5, #0]
 8001272:	682a      	ldr	r2, [r5, #0]
 8001274:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001278:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800127a:	2b00      	cmp	r3, #0
 800127c:	d1df      	bne.n	800123e <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 800127e:	f7ff fe4b 	bl	8000f18 <HAL_GetTick>
 8001282:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001284:	682b      	ldr	r3, [r5, #0]
 8001286:	039f      	lsls	r7, r3, #14
 8001288:	d5a9      	bpl.n	80011de <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800128a:	f7ff fe45 	bl	8000f18 <HAL_GetTick>
 800128e:	1b80      	subs	r0, r0, r6
 8001290:	2864      	cmp	r0, #100	; 0x64
 8001292:	d9f7      	bls.n	8001284 <HAL_RCC_OscConfig+0xbc>
 8001294:	e7df      	b.n	8001256 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001296:	4b81      	ldr	r3, [pc, #516]	; (800149c <HAL_RCC_OscConfig+0x2d4>)
 8001298:	689a      	ldr	r2, [r3, #8]
 800129a:	f012 0f0c 	tst.w	r2, #12
 800129e:	d007      	beq.n	80012b0 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012a0:	689a      	ldr	r2, [r3, #8]
 80012a2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012a6:	2a08      	cmp	r2, #8
 80012a8:	d111      	bne.n	80012ce <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	025e      	lsls	r6, r3, #9
 80012ae:	d40e      	bmi.n	80012ce <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012b0:	4b7a      	ldr	r3, [pc, #488]	; (800149c <HAL_RCC_OscConfig+0x2d4>)
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	0795      	lsls	r5, r2, #30
 80012b6:	d502      	bpl.n	80012be <HAL_RCC_OscConfig+0xf6>
 80012b8:	68e2      	ldr	r2, [r4, #12]
 80012ba:	2a01      	cmp	r2, #1
 80012bc:	d188      	bne.n	80011d0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	6921      	ldr	r1, [r4, #16]
 80012c2:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80012c6:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80012ca:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012cc:	e78a      	b.n	80011e4 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012ce:	68e2      	ldr	r2, [r4, #12]
 80012d0:	4b73      	ldr	r3, [pc, #460]	; (80014a0 <HAL_RCC_OscConfig+0x2d8>)
 80012d2:	b1b2      	cbz	r2, 8001302 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80012d4:	2201      	movs	r2, #1
 80012d6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80012d8:	f7ff fe1e 	bl	8000f18 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012dc:	4d6f      	ldr	r5, [pc, #444]	; (800149c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80012de:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012e0:	682b      	ldr	r3, [r5, #0]
 80012e2:	0798      	lsls	r0, r3, #30
 80012e4:	d507      	bpl.n	80012f6 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012e6:	682b      	ldr	r3, [r5, #0]
 80012e8:	6922      	ldr	r2, [r4, #16]
 80012ea:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80012ee:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80012f2:	602b      	str	r3, [r5, #0]
 80012f4:	e776      	b.n	80011e4 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012f6:	f7ff fe0f 	bl	8000f18 <HAL_GetTick>
 80012fa:	1b80      	subs	r0, r0, r6
 80012fc:	2802      	cmp	r0, #2
 80012fe:	d9ef      	bls.n	80012e0 <HAL_RCC_OscConfig+0x118>
 8001300:	e7a9      	b.n	8001256 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8001302:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001304:	f7ff fe08 	bl	8000f18 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001308:	4d64      	ldr	r5, [pc, #400]	; (800149c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800130a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800130c:	682b      	ldr	r3, [r5, #0]
 800130e:	0799      	lsls	r1, r3, #30
 8001310:	f57f af68 	bpl.w	80011e4 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001314:	f7ff fe00 	bl	8000f18 <HAL_GetTick>
 8001318:	1b80      	subs	r0, r0, r6
 800131a:	2802      	cmp	r0, #2
 800131c:	d9f6      	bls.n	800130c <HAL_RCC_OscConfig+0x144>
 800131e:	e79a      	b.n	8001256 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001320:	6962      	ldr	r2, [r4, #20]
 8001322:	4b60      	ldr	r3, [pc, #384]	; (80014a4 <HAL_RCC_OscConfig+0x2dc>)
 8001324:	b17a      	cbz	r2, 8001346 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8001326:	2201      	movs	r2, #1
 8001328:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800132a:	f7ff fdf5 	bl	8000f18 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800132e:	4d5b      	ldr	r5, [pc, #364]	; (800149c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001330:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001332:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001334:	079f      	lsls	r7, r3, #30
 8001336:	f53f af59 	bmi.w	80011ec <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800133a:	f7ff fded 	bl	8000f18 <HAL_GetTick>
 800133e:	1b80      	subs	r0, r0, r6
 8001340:	2802      	cmp	r0, #2
 8001342:	d9f6      	bls.n	8001332 <HAL_RCC_OscConfig+0x16a>
 8001344:	e787      	b.n	8001256 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8001346:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001348:	f7ff fde6 	bl	8000f18 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800134c:	4d53      	ldr	r5, [pc, #332]	; (800149c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800134e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001350:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001352:	0798      	lsls	r0, r3, #30
 8001354:	f57f af4a 	bpl.w	80011ec <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001358:	f7ff fdde 	bl	8000f18 <HAL_GetTick>
 800135c:	1b80      	subs	r0, r0, r6
 800135e:	2802      	cmp	r0, #2
 8001360:	d9f6      	bls.n	8001350 <HAL_RCC_OscConfig+0x188>
 8001362:	e778      	b.n	8001256 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001364:	4b4d      	ldr	r3, [pc, #308]	; (800149c <HAL_RCC_OscConfig+0x2d4>)
 8001366:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001368:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 800136c:	d128      	bne.n	80013c0 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 800136e:	9201      	str	r2, [sp, #4]
 8001370:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001372:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001376:	641a      	str	r2, [r3, #64]	; 0x40
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137e:	9301      	str	r3, [sp, #4]
 8001380:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001382:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001384:	4d48      	ldr	r5, [pc, #288]	; (80014a8 <HAL_RCC_OscConfig+0x2e0>)
 8001386:	682b      	ldr	r3, [r5, #0]
 8001388:	05d9      	lsls	r1, r3, #23
 800138a:	d51b      	bpl.n	80013c4 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800138c:	68a3      	ldr	r3, [r4, #8]
 800138e:	4d43      	ldr	r5, [pc, #268]	; (800149c <HAL_RCC_OscConfig+0x2d4>)
 8001390:	2b01      	cmp	r3, #1
 8001392:	d127      	bne.n	80013e4 <HAL_RCC_OscConfig+0x21c>
 8001394:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001396:	f043 0301 	orr.w	r3, r3, #1
 800139a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800139c:	f7ff fdbc 	bl	8000f18 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013a0:	4d3e      	ldr	r5, [pc, #248]	; (800149c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80013a2:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013a4:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013a8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80013aa:	079b      	lsls	r3, r3, #30
 80013ac:	d539      	bpl.n	8001422 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 80013ae:	2e00      	cmp	r6, #0
 80013b0:	f43f af20 	beq.w	80011f4 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80013b4:	4a39      	ldr	r2, [pc, #228]	; (800149c <HAL_RCC_OscConfig+0x2d4>)
 80013b6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80013b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013bc:	6413      	str	r3, [r2, #64]	; 0x40
 80013be:	e719      	b.n	80011f4 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 80013c0:	2600      	movs	r6, #0
 80013c2:	e7df      	b.n	8001384 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013c4:	682b      	ldr	r3, [r5, #0]
 80013c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ca:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80013cc:	f7ff fda4 	bl	8000f18 <HAL_GetTick>
 80013d0:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013d2:	682b      	ldr	r3, [r5, #0]
 80013d4:	05da      	lsls	r2, r3, #23
 80013d6:	d4d9      	bmi.n	800138c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013d8:	f7ff fd9e 	bl	8000f18 <HAL_GetTick>
 80013dc:	1bc0      	subs	r0, r0, r7
 80013de:	2802      	cmp	r0, #2
 80013e0:	d9f7      	bls.n	80013d2 <HAL_RCC_OscConfig+0x20a>
 80013e2:	e738      	b.n	8001256 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013e4:	2b05      	cmp	r3, #5
 80013e6:	d104      	bne.n	80013f2 <HAL_RCC_OscConfig+0x22a>
 80013e8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80013ea:	f043 0304 	orr.w	r3, r3, #4
 80013ee:	672b      	str	r3, [r5, #112]	; 0x70
 80013f0:	e7d0      	b.n	8001394 <HAL_RCC_OscConfig+0x1cc>
 80013f2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80013f4:	f022 0201 	bic.w	r2, r2, #1
 80013f8:	672a      	str	r2, [r5, #112]	; 0x70
 80013fa:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80013fc:	f022 0204 	bic.w	r2, r2, #4
 8001400:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001402:	2b00      	cmp	r3, #0
 8001404:	d1ca      	bne.n	800139c <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8001406:	f7ff fd87 	bl	8000f18 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800140a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800140e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001410:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001412:	0798      	lsls	r0, r3, #30
 8001414:	d5cb      	bpl.n	80013ae <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001416:	f7ff fd7f 	bl	8000f18 <HAL_GetTick>
 800141a:	1bc0      	subs	r0, r0, r7
 800141c:	4540      	cmp	r0, r8
 800141e:	d9f7      	bls.n	8001410 <HAL_RCC_OscConfig+0x248>
 8001420:	e719      	b.n	8001256 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001422:	f7ff fd79 	bl	8000f18 <HAL_GetTick>
 8001426:	1bc0      	subs	r0, r0, r7
 8001428:	4540      	cmp	r0, r8
 800142a:	d9bd      	bls.n	80013a8 <HAL_RCC_OscConfig+0x1e0>
 800142c:	e713      	b.n	8001256 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800142e:	4d1b      	ldr	r5, [pc, #108]	; (800149c <HAL_RCC_OscConfig+0x2d4>)
 8001430:	68ab      	ldr	r3, [r5, #8]
 8001432:	f003 030c 	and.w	r3, r3, #12
 8001436:	2b08      	cmp	r3, #8
 8001438:	f43f aeca 	beq.w	80011d0 <HAL_RCC_OscConfig+0x8>
 800143c:	4e1b      	ldr	r6, [pc, #108]	; (80014ac <HAL_RCC_OscConfig+0x2e4>)
 800143e:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001440:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001442:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001444:	d134      	bne.n	80014b0 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8001446:	f7ff fd67 	bl	8000f18 <HAL_GetTick>
 800144a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800144c:	682b      	ldr	r3, [r5, #0]
 800144e:	0199      	lsls	r1, r3, #6
 8001450:	d41e      	bmi.n	8001490 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001452:	6a22      	ldr	r2, [r4, #32]
 8001454:	69e3      	ldr	r3, [r4, #28]
 8001456:	4313      	orrs	r3, r2
 8001458:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800145a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800145e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001460:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001464:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001466:	4c0d      	ldr	r4, [pc, #52]	; (800149c <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001468:	0852      	lsrs	r2, r2, #1
 800146a:	3a01      	subs	r2, #1
 800146c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001470:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001472:	2301      	movs	r3, #1
 8001474:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001476:	f7ff fd4f 	bl	8000f18 <HAL_GetTick>
 800147a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800147c:	6823      	ldr	r3, [r4, #0]
 800147e:	019a      	lsls	r2, r3, #6
 8001480:	f53f aebc 	bmi.w	80011fc <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001484:	f7ff fd48 	bl	8000f18 <HAL_GetTick>
 8001488:	1b40      	subs	r0, r0, r5
 800148a:	2802      	cmp	r0, #2
 800148c:	d9f6      	bls.n	800147c <HAL_RCC_OscConfig+0x2b4>
 800148e:	e6e2      	b.n	8001256 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001490:	f7ff fd42 	bl	8000f18 <HAL_GetTick>
 8001494:	1bc0      	subs	r0, r0, r7
 8001496:	2802      	cmp	r0, #2
 8001498:	d9d8      	bls.n	800144c <HAL_RCC_OscConfig+0x284>
 800149a:	e6dc      	b.n	8001256 <HAL_RCC_OscConfig+0x8e>
 800149c:	40023800 	.word	0x40023800
 80014a0:	42470000 	.word	0x42470000
 80014a4:	42470e80 	.word	0x42470e80
 80014a8:	40007000 	.word	0x40007000
 80014ac:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 80014b0:	f7ff fd32 	bl	8000f18 <HAL_GetTick>
 80014b4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014b6:	682b      	ldr	r3, [r5, #0]
 80014b8:	019b      	lsls	r3, r3, #6
 80014ba:	f57f ae9f 	bpl.w	80011fc <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014be:	f7ff fd2b 	bl	8000f18 <HAL_GetTick>
 80014c2:	1b00      	subs	r0, r0, r4
 80014c4:	2802      	cmp	r0, #2
 80014c6:	d9f6      	bls.n	80014b6 <HAL_RCC_OscConfig+0x2ee>
 80014c8:	e6c5      	b.n	8001256 <HAL_RCC_OscConfig+0x8e>
 80014ca:	bf00      	nop

080014cc <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014cc:	4913      	ldr	r1, [pc, #76]	; (800151c <HAL_RCC_GetSysClockFreq+0x50>)
{
 80014ce:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014d0:	688b      	ldr	r3, [r1, #8]
 80014d2:	f003 030c 	and.w	r3, r3, #12
 80014d6:	2b04      	cmp	r3, #4
 80014d8:	d003      	beq.n	80014e2 <HAL_RCC_GetSysClockFreq+0x16>
 80014da:	2b08      	cmp	r3, #8
 80014dc:	d003      	beq.n	80014e6 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80014de:	4810      	ldr	r0, [pc, #64]	; (8001520 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80014e0:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80014e2:	4810      	ldr	r0, [pc, #64]	; (8001524 <HAL_RCC_GetSysClockFreq+0x58>)
 80014e4:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014e6:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014e8:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014ea:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014ec:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014f0:	bf14      	ite	ne
 80014f2:	480c      	ldrne	r0, [pc, #48]	; (8001524 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014f4:	480a      	ldreq	r0, [pc, #40]	; (8001520 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014f6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80014fa:	bf18      	it	ne
 80014fc:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014fe:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001502:	fba1 0100 	umull	r0, r1, r1, r0
 8001506:	f7ff fb35 	bl	8000b74 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800150a:	4b04      	ldr	r3, [pc, #16]	; (800151c <HAL_RCC_GetSysClockFreq+0x50>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001512:	3301      	adds	r3, #1
 8001514:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001516:	fbb0 f0f3 	udiv	r0, r0, r3
 800151a:	bd08      	pop	{r3, pc}
 800151c:	40023800 	.word	0x40023800
 8001520:	00f42400 	.word	0x00f42400
 8001524:	017d7840 	.word	0x017d7840

08001528 <HAL_RCC_ClockConfig>:
{
 8001528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800152c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800152e:	4604      	mov	r4, r0
 8001530:	b910      	cbnz	r0, 8001538 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001532:	2001      	movs	r0, #1
 8001534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001538:	4b44      	ldr	r3, [pc, #272]	; (800164c <HAL_RCC_ClockConfig+0x124>)
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	f002 020f 	and.w	r2, r2, #15
 8001540:	428a      	cmp	r2, r1
 8001542:	d328      	bcc.n	8001596 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001544:	6821      	ldr	r1, [r4, #0]
 8001546:	078f      	lsls	r7, r1, #30
 8001548:	d42d      	bmi.n	80015a6 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800154a:	07c8      	lsls	r0, r1, #31
 800154c:	d440      	bmi.n	80015d0 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800154e:	4b3f      	ldr	r3, [pc, #252]	; (800164c <HAL_RCC_ClockConfig+0x124>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	f002 020f 	and.w	r2, r2, #15
 8001556:	4295      	cmp	r5, r2
 8001558:	d366      	bcc.n	8001628 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800155a:	6822      	ldr	r2, [r4, #0]
 800155c:	0751      	lsls	r1, r2, #29
 800155e:	d46c      	bmi.n	800163a <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001560:	0713      	lsls	r3, r2, #28
 8001562:	d507      	bpl.n	8001574 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001564:	4a3a      	ldr	r2, [pc, #232]	; (8001650 <HAL_RCC_ClockConfig+0x128>)
 8001566:	6921      	ldr	r1, [r4, #16]
 8001568:	6893      	ldr	r3, [r2, #8]
 800156a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800156e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001572:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001574:	f7ff ffaa 	bl	80014cc <HAL_RCC_GetSysClockFreq>
 8001578:	4b35      	ldr	r3, [pc, #212]	; (8001650 <HAL_RCC_ClockConfig+0x128>)
 800157a:	4a36      	ldr	r2, [pc, #216]	; (8001654 <HAL_RCC_ClockConfig+0x12c>)
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001582:	5cd3      	ldrb	r3, [r2, r3]
 8001584:	40d8      	lsrs	r0, r3
 8001586:	4b34      	ldr	r3, [pc, #208]	; (8001658 <HAL_RCC_ClockConfig+0x130>)
 8001588:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800158a:	2000      	movs	r0, #0
 800158c:	f7ff fc7a 	bl	8000e84 <HAL_InitTick>
  return HAL_OK;
 8001590:	2000      	movs	r0, #0
 8001592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001596:	b2ca      	uxtb	r2, r1
 8001598:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 030f 	and.w	r3, r3, #15
 80015a0:	4299      	cmp	r1, r3
 80015a2:	d1c6      	bne.n	8001532 <HAL_RCC_ClockConfig+0xa>
 80015a4:	e7ce      	b.n	8001544 <HAL_RCC_ClockConfig+0x1c>
 80015a6:	4b2a      	ldr	r3, [pc, #168]	; (8001650 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015a8:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015ac:	bf1e      	ittt	ne
 80015ae:	689a      	ldrne	r2, [r3, #8]
 80015b0:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80015b4:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015b6:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015b8:	bf42      	ittt	mi
 80015ba:	689a      	ldrmi	r2, [r3, #8]
 80015bc:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80015c0:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015c2:	689a      	ldr	r2, [r3, #8]
 80015c4:	68a0      	ldr	r0, [r4, #8]
 80015c6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80015ca:	4302      	orrs	r2, r0
 80015cc:	609a      	str	r2, [r3, #8]
 80015ce:	e7bc      	b.n	800154a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015d0:	6862      	ldr	r2, [r4, #4]
 80015d2:	4b1f      	ldr	r3, [pc, #124]	; (8001650 <HAL_RCC_ClockConfig+0x128>)
 80015d4:	2a01      	cmp	r2, #1
 80015d6:	d11d      	bne.n	8001614 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015de:	d0a8      	beq.n	8001532 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015e0:	4e1b      	ldr	r6, [pc, #108]	; (8001650 <HAL_RCC_ClockConfig+0x128>)
 80015e2:	68b3      	ldr	r3, [r6, #8]
 80015e4:	f023 0303 	bic.w	r3, r3, #3
 80015e8:	4313      	orrs	r3, r2
 80015ea:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80015ec:	f7ff fc94 	bl	8000f18 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015f0:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80015f4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015f6:	68b3      	ldr	r3, [r6, #8]
 80015f8:	6862      	ldr	r2, [r4, #4]
 80015fa:	f003 030c 	and.w	r3, r3, #12
 80015fe:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001602:	d0a4      	beq.n	800154e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001604:	f7ff fc88 	bl	8000f18 <HAL_GetTick>
 8001608:	1bc0      	subs	r0, r0, r7
 800160a:	4540      	cmp	r0, r8
 800160c:	d9f3      	bls.n	80015f6 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 800160e:	2003      	movs	r0, #3
}
 8001610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001614:	1e91      	subs	r1, r2, #2
 8001616:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001618:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800161a:	d802      	bhi.n	8001622 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800161c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001620:	e7dd      	b.n	80015de <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001622:	f013 0f02 	tst.w	r3, #2
 8001626:	e7da      	b.n	80015de <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001628:	b2ea      	uxtb	r2, r5
 800162a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 030f 	and.w	r3, r3, #15
 8001632:	429d      	cmp	r5, r3
 8001634:	f47f af7d 	bne.w	8001532 <HAL_RCC_ClockConfig+0xa>
 8001638:	e78f      	b.n	800155a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800163a:	4905      	ldr	r1, [pc, #20]	; (8001650 <HAL_RCC_ClockConfig+0x128>)
 800163c:	68e0      	ldr	r0, [r4, #12]
 800163e:	688b      	ldr	r3, [r1, #8]
 8001640:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001644:	4303      	orrs	r3, r0
 8001646:	608b      	str	r3, [r1, #8]
 8001648:	e78a      	b.n	8001560 <HAL_RCC_ClockConfig+0x38>
 800164a:	bf00      	nop
 800164c:	40023c00 	.word	0x40023c00
 8001650:	40023800 	.word	0x40023800
 8001654:	08003c1a 	.word	0x08003c1a
 8001658:	20000008 	.word	0x20000008

0800165c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800165c:	4b04      	ldr	r3, [pc, #16]	; (8001670 <HAL_RCC_GetPCLK1Freq+0x14>)
 800165e:	4a05      	ldr	r2, [pc, #20]	; (8001674 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001666:	5cd3      	ldrb	r3, [r2, r3]
 8001668:	4a03      	ldr	r2, [pc, #12]	; (8001678 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800166a:	6810      	ldr	r0, [r2, #0]
}
 800166c:	40d8      	lsrs	r0, r3
 800166e:	4770      	bx	lr
 8001670:	40023800 	.word	0x40023800
 8001674:	08003c2a 	.word	0x08003c2a
 8001678:	20000008 	.word	0x20000008

0800167c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800167c:	4b04      	ldr	r3, [pc, #16]	; (8001690 <HAL_RCC_GetPCLK2Freq+0x14>)
 800167e:	4a05      	ldr	r2, [pc, #20]	; (8001694 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001686:	5cd3      	ldrb	r3, [r2, r3]
 8001688:	4a03      	ldr	r2, [pc, #12]	; (8001698 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800168a:	6810      	ldr	r0, [r2, #0]
}
 800168c:	40d8      	lsrs	r0, r3
 800168e:	4770      	bx	lr
 8001690:	40023800 	.word	0x40023800
 8001694:	08003c2a 	.word	0x08003c2a
 8001698:	20000008 	.word	0x20000008

0800169c <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800169c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80016a0:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80016a2:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 80016a4:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80016a6:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80016a8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80016ac:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 80016ae:	6133      	str	r3, [r6, #16]
{
 80016b0:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80016b2:	6883      	ldr	r3, [r0, #8]
 80016b4:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 80016b6:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80016b8:	4303      	orrs	r3, r0
 80016ba:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80016bc:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80016c0:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80016c2:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80016c6:	430b      	orrs	r3, r1
 80016c8:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80016ca:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 80016cc:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80016ce:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80016d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 80016d4:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80016d6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 80016da:	6173      	str	r3, [r6, #20]
 80016dc:	4b7a      	ldr	r3, [pc, #488]	; (80018c8 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80016de:	d17c      	bne.n	80017da <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80016e0:	429e      	cmp	r6, r3
 80016e2:	d003      	beq.n	80016ec <UART_SetConfig+0x50>
 80016e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80016e8:	429e      	cmp	r6, r3
 80016ea:	d144      	bne.n	8001776 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80016ec:	f7ff ffc6 	bl	800167c <HAL_RCC_GetPCLK2Freq>
 80016f0:	2519      	movs	r5, #25
 80016f2:	fb05 f300 	mul.w	r3, r5, r0
 80016f6:	6860      	ldr	r0, [r4, #4]
 80016f8:	f04f 0964 	mov.w	r9, #100	; 0x64
 80016fc:	0040      	lsls	r0, r0, #1
 80016fe:	fbb3 f3f0 	udiv	r3, r3, r0
 8001702:	fbb3 f3f9 	udiv	r3, r3, r9
 8001706:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800170a:	f7ff ffb7 	bl	800167c <HAL_RCC_GetPCLK2Freq>
 800170e:	6863      	ldr	r3, [r4, #4]
 8001710:	4368      	muls	r0, r5
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	fbb0 f7f3 	udiv	r7, r0, r3
 8001718:	f7ff ffb0 	bl	800167c <HAL_RCC_GetPCLK2Freq>
 800171c:	6863      	ldr	r3, [r4, #4]
 800171e:	4368      	muls	r0, r5
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	fbb0 f3f3 	udiv	r3, r0, r3
 8001726:	fbb3 f3f9 	udiv	r3, r3, r9
 800172a:	fb09 7313 	mls	r3, r9, r3, r7
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	3332      	adds	r3, #50	; 0x32
 8001732:	fbb3 f3f9 	udiv	r3, r3, r9
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 800173c:	f7ff ff9e 	bl	800167c <HAL_RCC_GetPCLK2Freq>
 8001740:	6862      	ldr	r2, [r4, #4]
 8001742:	4368      	muls	r0, r5
 8001744:	0052      	lsls	r2, r2, #1
 8001746:	fbb0 faf2 	udiv	sl, r0, r2
 800174a:	f7ff ff97 	bl	800167c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800174e:	6863      	ldr	r3, [r4, #4]
 8001750:	4368      	muls	r0, r5
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	fbb0 f3f3 	udiv	r3, r0, r3
 8001758:	fbb3 f3f9 	udiv	r3, r3, r9
 800175c:	fb09 a313 	mls	r3, r9, r3, sl
 8001760:	00db      	lsls	r3, r3, #3
 8001762:	3332      	adds	r3, #50	; 0x32
 8001764:	fbb3 f3f9 	udiv	r3, r3, r9
 8001768:	f003 0307 	and.w	r3, r3, #7
 800176c:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800176e:	443b      	add	r3, r7
 8001770:	60b3      	str	r3, [r6, #8]
 8001772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001776:	f7ff ff71 	bl	800165c <HAL_RCC_GetPCLK1Freq>
 800177a:	2519      	movs	r5, #25
 800177c:	fb05 f300 	mul.w	r3, r5, r0
 8001780:	6860      	ldr	r0, [r4, #4]
 8001782:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001786:	0040      	lsls	r0, r0, #1
 8001788:	fbb3 f3f0 	udiv	r3, r3, r0
 800178c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001790:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001794:	f7ff ff62 	bl	800165c <HAL_RCC_GetPCLK1Freq>
 8001798:	6863      	ldr	r3, [r4, #4]
 800179a:	4368      	muls	r0, r5
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	fbb0 f7f3 	udiv	r7, r0, r3
 80017a2:	f7ff ff5b 	bl	800165c <HAL_RCC_GetPCLK1Freq>
 80017a6:	6863      	ldr	r3, [r4, #4]
 80017a8:	4368      	muls	r0, r5
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80017b0:	fbb3 f3f9 	udiv	r3, r3, r9
 80017b4:	fb09 7313 	mls	r3, r9, r3, r7
 80017b8:	00db      	lsls	r3, r3, #3
 80017ba:	3332      	adds	r3, #50	; 0x32
 80017bc:	fbb3 f3f9 	udiv	r3, r3, r9
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80017c6:	f7ff ff49 	bl	800165c <HAL_RCC_GetPCLK1Freq>
 80017ca:	6862      	ldr	r2, [r4, #4]
 80017cc:	4368      	muls	r0, r5
 80017ce:	0052      	lsls	r2, r2, #1
 80017d0:	fbb0 faf2 	udiv	sl, r0, r2
 80017d4:	f7ff ff42 	bl	800165c <HAL_RCC_GetPCLK1Freq>
 80017d8:	e7b9      	b.n	800174e <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80017da:	429e      	cmp	r6, r3
 80017dc:	d002      	beq.n	80017e4 <UART_SetConfig+0x148>
 80017de:	4b3b      	ldr	r3, [pc, #236]	; (80018cc <UART_SetConfig+0x230>)
 80017e0:	429e      	cmp	r6, r3
 80017e2:	d140      	bne.n	8001866 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80017e4:	f7ff ff4a 	bl	800167c <HAL_RCC_GetPCLK2Freq>
 80017e8:	6867      	ldr	r7, [r4, #4]
 80017ea:	2519      	movs	r5, #25
 80017ec:	f04f 0964 	mov.w	r9, #100	; 0x64
 80017f0:	fb05 f300 	mul.w	r3, r5, r0
 80017f4:	00bf      	lsls	r7, r7, #2
 80017f6:	fbb3 f3f7 	udiv	r3, r3, r7
 80017fa:	fbb3 f3f9 	udiv	r3, r3, r9
 80017fe:	011f      	lsls	r7, r3, #4
 8001800:	f7ff ff3c 	bl	800167c <HAL_RCC_GetPCLK2Freq>
 8001804:	6863      	ldr	r3, [r4, #4]
 8001806:	4368      	muls	r0, r5
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	fbb0 f8f3 	udiv	r8, r0, r3
 800180e:	f7ff ff35 	bl	800167c <HAL_RCC_GetPCLK2Freq>
 8001812:	6863      	ldr	r3, [r4, #4]
 8001814:	4368      	muls	r0, r5
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	fbb0 f3f3 	udiv	r3, r0, r3
 800181c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001820:	fb09 8313 	mls	r3, r9, r3, r8
 8001824:	011b      	lsls	r3, r3, #4
 8001826:	3332      	adds	r3, #50	; 0x32
 8001828:	fbb3 f3f9 	udiv	r3, r3, r9
 800182c:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001830:	f7ff ff24 	bl	800167c <HAL_RCC_GetPCLK2Freq>
 8001834:	6862      	ldr	r2, [r4, #4]
 8001836:	4368      	muls	r0, r5
 8001838:	0092      	lsls	r2, r2, #2
 800183a:	fbb0 faf2 	udiv	sl, r0, r2
 800183e:	f7ff ff1d 	bl	800167c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001842:	6863      	ldr	r3, [r4, #4]
 8001844:	4368      	muls	r0, r5
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	fbb0 f3f3 	udiv	r3, r0, r3
 800184c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001850:	fb09 a313 	mls	r3, r9, r3, sl
 8001854:	011b      	lsls	r3, r3, #4
 8001856:	3332      	adds	r3, #50	; 0x32
 8001858:	fbb3 f3f9 	udiv	r3, r3, r9
 800185c:	f003 030f 	and.w	r3, r3, #15
 8001860:	ea43 0308 	orr.w	r3, r3, r8
 8001864:	e783      	b.n	800176e <UART_SetConfig+0xd2>
 8001866:	f7ff fef9 	bl	800165c <HAL_RCC_GetPCLK1Freq>
 800186a:	6867      	ldr	r7, [r4, #4]
 800186c:	2519      	movs	r5, #25
 800186e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001872:	fb05 f300 	mul.w	r3, r5, r0
 8001876:	00bf      	lsls	r7, r7, #2
 8001878:	fbb3 f3f7 	udiv	r3, r3, r7
 800187c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001880:	011f      	lsls	r7, r3, #4
 8001882:	f7ff feeb 	bl	800165c <HAL_RCC_GetPCLK1Freq>
 8001886:	6863      	ldr	r3, [r4, #4]
 8001888:	4368      	muls	r0, r5
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	fbb0 f8f3 	udiv	r8, r0, r3
 8001890:	f7ff fee4 	bl	800165c <HAL_RCC_GetPCLK1Freq>
 8001894:	6863      	ldr	r3, [r4, #4]
 8001896:	4368      	muls	r0, r5
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	fbb0 f3f3 	udiv	r3, r0, r3
 800189e:	fbb3 f3f9 	udiv	r3, r3, r9
 80018a2:	fb09 8313 	mls	r3, r9, r3, r8
 80018a6:	011b      	lsls	r3, r3, #4
 80018a8:	3332      	adds	r3, #50	; 0x32
 80018aa:	fbb3 f3f9 	udiv	r3, r3, r9
 80018ae:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80018b2:	f7ff fed3 	bl	800165c <HAL_RCC_GetPCLK1Freq>
 80018b6:	6862      	ldr	r2, [r4, #4]
 80018b8:	4368      	muls	r0, r5
 80018ba:	0092      	lsls	r2, r2, #2
 80018bc:	fbb0 faf2 	udiv	sl, r0, r2
 80018c0:	f7ff fecc 	bl	800165c <HAL_RCC_GetPCLK1Freq>
 80018c4:	e7bd      	b.n	8001842 <UART_SetConfig+0x1a6>
 80018c6:	bf00      	nop
 80018c8:	40011000 	.word	0x40011000
 80018cc:	40011400 	.word	0x40011400

080018d0 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80018d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018d2:	4604      	mov	r4, r0
 80018d4:	460e      	mov	r6, r1
 80018d6:	4617      	mov	r7, r2
 80018d8:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80018da:	6821      	ldr	r1, [r4, #0]
 80018dc:	680b      	ldr	r3, [r1, #0]
 80018de:	ea36 0303 	bics.w	r3, r6, r3
 80018e2:	d101      	bne.n	80018e8 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 80018e4:	2000      	movs	r0, #0
}
 80018e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 80018e8:	1c6b      	adds	r3, r5, #1
 80018ea:	d0f7      	beq.n	80018dc <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80018ec:	b995      	cbnz	r5, 8001914 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80018ee:	6823      	ldr	r3, [r4, #0]
 80018f0:	68da      	ldr	r2, [r3, #12]
 80018f2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80018f6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80018f8:	695a      	ldr	r2, [r3, #20]
 80018fa:	f022 0201 	bic.w	r2, r2, #1
 80018fe:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001900:	2320      	movs	r3, #32
 8001902:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001906:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800190a:	2300      	movs	r3, #0
 800190c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001910:	2003      	movs	r0, #3
 8001912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001914:	f7ff fb00 	bl	8000f18 <HAL_GetTick>
 8001918:	1bc0      	subs	r0, r0, r7
 800191a:	4285      	cmp	r5, r0
 800191c:	d2dd      	bcs.n	80018da <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 800191e:	e7e6      	b.n	80018ee <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001920 <HAL_UART_Init>:
{
 8001920:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001922:	4604      	mov	r4, r0
 8001924:	b340      	cbz	r0, 8001978 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001926:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800192a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800192e:	b91b      	cbnz	r3, 8001938 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001930:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001934:	f000 fb64 	bl	8002000 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001938:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800193a:	2324      	movs	r3, #36	; 0x24
 800193c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001940:	68d3      	ldr	r3, [r2, #12]
 8001942:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001946:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001948:	4620      	mov	r0, r4
 800194a:	f7ff fea7 	bl	800169c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800194e:	6823      	ldr	r3, [r4, #0]
 8001950:	691a      	ldr	r2, [r3, #16]
 8001952:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001956:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001958:	695a      	ldr	r2, [r3, #20]
 800195a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800195e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001960:	68da      	ldr	r2, [r3, #12]
 8001962:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001966:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001968:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 800196a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800196c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800196e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001972:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001976:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001978:	2001      	movs	r0, #1
}
 800197a:	bd10      	pop	{r4, pc}

0800197c <HAL_HalfDuplex_Init>:
{
 800197c:	b510      	push	{r4, lr}
  if(huart == NULL)
 800197e:	4604      	mov	r4, r0
 8001980:	b360      	cbz	r0, 80019dc <HAL_HalfDuplex_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001982:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001986:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800198a:	b91b      	cbnz	r3, 8001994 <HAL_HalfDuplex_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800198c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001990:	f000 fb36 	bl	8002000 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001994:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001996:	2324      	movs	r3, #36	; 0x24
 8001998:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800199c:	68d3      	ldr	r3, [r2, #12]
 800199e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80019a2:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80019a4:	4620      	mov	r0, r4
 80019a6:	f7ff fe79 	bl	800169c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019aa:	6823      	ldr	r3, [r4, #0]
 80019ac:	691a      	ldr	r2, [r3, #16]
 80019ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80019b2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80019b4:	695a      	ldr	r2, [r3, #20]
 80019b6:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80019ba:	615a      	str	r2, [r3, #20]
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80019bc:	695a      	ldr	r2, [r3, #20]
 80019be:	f042 0208 	orr.w	r2, r2, #8
 80019c2:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80019c4:	68da      	ldr	r2, [r3, #12]
 80019c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80019ca:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019cc:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 80019ce:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019d0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80019d2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80019d6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80019da:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80019dc:	2001      	movs	r0, #1
}
 80019de:	bd10      	pop	{r4, pc}

080019e0 <HAL_UART_Transmit>:
{
 80019e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019e4:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 80019e6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80019ea:	2b20      	cmp	r3, #32
{
 80019ec:	4604      	mov	r4, r0
 80019ee:	460d      	mov	r5, r1
 80019f0:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY) 
 80019f2:	d14f      	bne.n	8001a94 <HAL_UART_Transmit+0xb4>
    if((pData == NULL ) || (Size == 0)) 
 80019f4:	2900      	cmp	r1, #0
 80019f6:	d04a      	beq.n	8001a8e <HAL_UART_Transmit+0xae>
 80019f8:	2a00      	cmp	r2, #0
 80019fa:	d048      	beq.n	8001a8e <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 80019fc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d047      	beq.n	8001a94 <HAL_UART_Transmit+0xb4>
 8001a04:	2301      	movs	r3, #1
 8001a06:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a0e:	2321      	movs	r3, #33	; 0x21
 8001a10:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001a14:	f7ff fa80 	bl	8000f18 <HAL_GetTick>
    huart->TxXferSize = Size;
 8001a18:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8001a1c:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001a1e:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8001a22:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	b96b      	cbnz	r3, 8001a44 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001a28:	463b      	mov	r3, r7
 8001a2a:	4632      	mov	r2, r6
 8001a2c:	2140      	movs	r1, #64	; 0x40
 8001a2e:	4620      	mov	r0, r4
 8001a30:	f7ff ff4e 	bl	80018d0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001a34:	b9b0      	cbnz	r0, 8001a64 <HAL_UART_Transmit+0x84>
      huart->gState = HAL_UART_STATE_READY;
 8001a36:	2320      	movs	r3, #32
 8001a38:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8001a3c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8001a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8001a44:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001a46:	3b01      	subs	r3, #1
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001a4c:	68a3      	ldr	r3, [r4, #8]
 8001a4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a52:	4632      	mov	r2, r6
 8001a54:	463b      	mov	r3, r7
 8001a56:	f04f 0180 	mov.w	r1, #128	; 0x80
 8001a5a:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001a5c:	d10e      	bne.n	8001a7c <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a5e:	f7ff ff37 	bl	80018d0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001a62:	b110      	cbz	r0, 8001a6a <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8001a64:	2003      	movs	r0, #3
 8001a66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001a6a:	882b      	ldrh	r3, [r5, #0]
 8001a6c:	6822      	ldr	r2, [r4, #0]
 8001a6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a72:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001a74:	6923      	ldr	r3, [r4, #16]
 8001a76:	b943      	cbnz	r3, 8001a8a <HAL_UART_Transmit+0xaa>
          pData +=2U;
 8001a78:	3502      	adds	r5, #2
 8001a7a:	e7d2      	b.n	8001a22 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a7c:	f7ff ff28 	bl	80018d0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001a80:	2800      	cmp	r0, #0
 8001a82:	d1ef      	bne.n	8001a64 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001a84:	6823      	ldr	r3, [r4, #0]
 8001a86:	782a      	ldrb	r2, [r5, #0]
 8001a88:	605a      	str	r2, [r3, #4]
 8001a8a:	3501      	adds	r5, #1
 8001a8c:	e7c9      	b.n	8001a22 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001a8e:	2001      	movs	r0, #1
 8001a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001a94:	2002      	movs	r0, #2
}
 8001a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08001a9c <AX12_MovingSpeed>:
static void MX_USART1_UART_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_USART6_UART_Init(void);

void AX12_MovingSpeed(uint8_t ID, uint16_t Speed)
{
 8001a9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t Data[9] = {0xFF, 0xFF, ID, 0x05, 0x03, 0x20, 0x00, 0x00, 0x00};
 8001a9e:	23ff      	movs	r3, #255	; 0xff
 8001aa0:	f88d 3004 	strb.w	r3, [sp, #4]
 8001aa4:	f88d 3005 	strb.w	r3, [sp, #5]
 8001aa8:	2305      	movs	r3, #5
 8001aaa:	f88d 3007 	strb.w	r3, [sp, #7]
 8001aae:	2303      	movs	r3, #3
 8001ab0:	f88d 3008 	strb.w	r3, [sp, #8]
 8001ab4:	2320      	movs	r3, #32
 8001ab6:	f88d 3009 	strb.w	r3, [sp, #9]
	uint8_t checksum = 0;

	Data[6] = Speed & 0xFF;
 8001aba:	f88d 100a 	strb.w	r1, [sp, #10]
	uint8_t Data[9] = {0xFF, 0xFF, ID, 0x05, 0x03, 0x20, 0x00, 0x00, 0x00};
 8001abe:	2300      	movs	r3, #0
	Data[7] = (Speed >> 8) & 0xFF;
 8001ac0:	0a09      	lsrs	r1, r1, #8
	uint8_t Data[9] = {0xFF, 0xFF, ID, 0x05, 0x03, 0x20, 0x00, 0x00, 0x00};
 8001ac2:	f88d 0006 	strb.w	r0, [sp, #6]
 8001ac6:	f88d 300c 	strb.w	r3, [sp, #12]
	Data[7] = (Speed >> 8) & 0xFF;
 8001aca:	f88d 100b 	strb.w	r1, [sp, #11]
	uint8_t checksum = 0;
 8001ace:	461a      	mov	r2, r3

	for(uint8_t i = 2; i<8; i++)
	{
		checksum += Data[i];
 8001ad0:	a901      	add	r1, sp, #4
 8001ad2:	4419      	add	r1, r3
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	7889      	ldrb	r1, [r1, #2]
	for(uint8_t i = 2; i<8; i++)
 8001ad8:	2b06      	cmp	r3, #6
		checksum += Data[i];
 8001ada:	440a      	add	r2, r1
 8001adc:	b2d2      	uxtb	r2, r2
	for(uint8_t i = 2; i<8; i++)
 8001ade:	d1f7      	bne.n	8001ad0 <AX12_MovingSpeed+0x34>
	}

	checksum = ~checksum;
 8001ae0:	43d2      	mvns	r2, r2

	Data[8] = checksum;
 8001ae2:	f88d 200c 	strb.w	r2, [sp, #12]

	while(huart1.gState != HAL_UART_STATE_READY);
 8001ae6:	4a07      	ldr	r2, [pc, #28]	; (8001b04 <AX12_MovingSpeed+0x68>)
 8001ae8:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
 8001aec:	2b20      	cmp	r3, #32
 8001aee:	d1fb      	bne.n	8001ae8 <AX12_MovingSpeed+0x4c>
	HAL_UART_Transmit(&huart1, Data, 9, 10);
 8001af0:	230a      	movs	r3, #10
 8001af2:	2209      	movs	r2, #9
 8001af4:	a901      	add	r1, sp, #4
 8001af6:	4803      	ldr	r0, [pc, #12]	; (8001b04 <AX12_MovingSpeed+0x68>)
 8001af8:	f7ff ff72 	bl	80019e0 <HAL_UART_Transmit>

}
 8001afc:	b005      	add	sp, #20
 8001afe:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b02:	bf00      	nop
 8001b04:	200000a8 	.word	0x200000a8

08001b08 <AX12_GoalPosition>:
void AX12_GoalPosition(uint8_t ID, uint32_t Position)
{
 8001b08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t Data[9] = {0xFF, 0xFF, ID, 0x05, 0x03, 0x1E, 0x00, 0x00, 0x00};
 8001b0a:	23ff      	movs	r3, #255	; 0xff
 8001b0c:	f88d 3004 	strb.w	r3, [sp, #4]
 8001b10:	f88d 3005 	strb.w	r3, [sp, #5]
 8001b14:	2305      	movs	r3, #5
 8001b16:	f88d 3007 	strb.w	r3, [sp, #7]
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	f88d 3008 	strb.w	r3, [sp, #8]
 8001b20:	231e      	movs	r3, #30
 8001b22:	f88d 3009 	strb.w	r3, [sp, #9]
	uint8_t checksum = 0;

	Data[6] = Position & 0xFF;
 8001b26:	f88d 100a 	strb.w	r1, [sp, #10]
	uint8_t Data[9] = {0xFF, 0xFF, ID, 0x05, 0x03, 0x1E, 0x00, 0x00, 0x00};
 8001b2a:	2300      	movs	r3, #0
	Data[7] = (Position >> 8) & 0xFF;
 8001b2c:	0a09      	lsrs	r1, r1, #8
	uint8_t Data[9] = {0xFF, 0xFF, ID, 0x05, 0x03, 0x1E, 0x00, 0x00, 0x00};
 8001b2e:	f88d 0006 	strb.w	r0, [sp, #6]
 8001b32:	f88d 300c 	strb.w	r3, [sp, #12]
	Data[7] = (Position >> 8) & 0xFF;
 8001b36:	f88d 100b 	strb.w	r1, [sp, #11]
	uint8_t checksum = 0;
 8001b3a:	461a      	mov	r2, r3

	for(uint8_t i = 2; i<8; i++)
	{
		checksum += Data[i];
 8001b3c:	a901      	add	r1, sp, #4
 8001b3e:	4419      	add	r1, r3
 8001b40:	3301      	adds	r3, #1
 8001b42:	7889      	ldrb	r1, [r1, #2]
	for(uint8_t i = 2; i<8; i++)
 8001b44:	2b06      	cmp	r3, #6
		checksum += Data[i];
 8001b46:	440a      	add	r2, r1
 8001b48:	b2d2      	uxtb	r2, r2
	for(uint8_t i = 2; i<8; i++)
 8001b4a:	d1f7      	bne.n	8001b3c <AX12_GoalPosition+0x34>
	}

	checksum = ~checksum;
 8001b4c:	43d2      	mvns	r2, r2

	Data[8] = checksum;
 8001b4e:	f88d 200c 	strb.w	r2, [sp, #12]

	while(huart1.gState != HAL_UART_STATE_READY);
 8001b52:	4a07      	ldr	r2, [pc, #28]	; (8001b70 <AX12_GoalPosition+0x68>)
 8001b54:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
 8001b58:	2b20      	cmp	r3, #32
 8001b5a:	d1fb      	bne.n	8001b54 <AX12_GoalPosition+0x4c>
	HAL_UART_Transmit(&huart1, Data, 9, 10);
 8001b5c:	230a      	movs	r3, #10
 8001b5e:	2209      	movs	r2, #9
 8001b60:	a901      	add	r1, sp, #4
 8001b62:	4803      	ldr	r0, [pc, #12]	; (8001b70 <AX12_GoalPosition+0x68>)
 8001b64:	f7ff ff3c 	bl	80019e0 <HAL_UART_Transmit>
}
 8001b68:	b005      	add	sp, #20
 8001b6a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b6e:	bf00      	nop
 8001b70:	200000a8 	.word	0x200000a8

08001b74 <TFmini_Lidar_init>:

	while(huart1.gState != HAL_UART_STATE_READY);
	HAL_UART_Transmit(&huart1, Data, 8, 10);
}
void TFmini_Lidar_init()
{
 8001b74:	b507      	push	{r0, r1, r2, lr}
	uint8_t Data1[8] = {0x42, 0x57, 0x02, 0x00, 0x00, 0x00, 0x01, 0x06};//reset
 8001b76:	4a0b      	ldr	r2, [pc, #44]	; (8001ba4 <TFmini_Lidar_init+0x30>)
 8001b78:	6810      	ldr	r0, [r2, #0]
 8001b7a:	6851      	ldr	r1, [r2, #4]
	while(huart2.gState != HAL_UART_STATE_READY);
 8001b7c:	4a0a      	ldr	r2, [pc, #40]	; (8001ba8 <TFmini_Lidar_init+0x34>)
	uint8_t Data1[8] = {0x42, 0x57, 0x02, 0x00, 0x00, 0x00, 0x01, 0x06};//reset
 8001b7e:	466b      	mov	r3, sp
 8001b80:	c303      	stmia	r3!, {r0, r1}
	while(huart2.gState != HAL_UART_STATE_READY);
 8001b82:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
 8001b86:	2b20      	cmp	r3, #32
 8001b88:	d1fb      	bne.n	8001b82 <TFmini_Lidar_init+0xe>
	HAL_UART_Transmit(&huart2, Data1, 8, 10);
 8001b8a:	230a      	movs	r3, #10
 8001b8c:	2208      	movs	r2, #8
 8001b8e:	4669      	mov	r1, sp
 8001b90:	4805      	ldr	r0, [pc, #20]	; (8001ba8 <TFmini_Lidar_init+0x34>)
 8001b92:	f7ff ff25 	bl	80019e0 <HAL_UART_Transmit>

	HAL_Delay(1000);
 8001b96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b9a:	f7ff f9c3 	bl	8000f24 <HAL_Delay>
}
 8001b9e:	b003      	add	sp, #12
 8001ba0:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ba4:	08003c08 	.word	0x08003c08
 8001ba8:	20000128 	.word	0x20000128

08001bac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bac:	b530      	push	{r4, r5, lr}
 8001bae:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bb0:	2230      	movs	r2, #48	; 0x30
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	a808      	add	r0, sp, #32
 8001bb6:	f000 fb5b 	bl	8002270 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bba:	2100      	movs	r1, #0
 8001bbc:	2214      	movs	r2, #20
 8001bbe:	a803      	add	r0, sp, #12
 8001bc0:	f000 fb56 	bl	8002270 <memset>

  /**Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bc4:	2500      	movs	r5, #0
 8001bc6:	4b1c      	ldr	r3, [pc, #112]	; (8001c38 <SystemClock_Config+0x8c>)
 8001bc8:	9501      	str	r5, [sp, #4]
 8001bca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bcc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001bd0:	641a      	str	r2, [r3, #64]	; 0x40
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001bd4:	4a19      	ldr	r2, [pc, #100]	; (8001c3c <SystemClock_Config+0x90>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bda:	9301      	str	r3, [sp, #4]
 8001bdc:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001bde:	9502      	str	r5, [sp, #8]
 8001be0:	6813      	ldr	r3, [r2, #0]
 8001be2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001be6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bea:	6013      	str	r3, [r2, #0]
 8001bec:	6813      	ldr	r3, [r2, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001bee:	950f      	str	r5, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001bf0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bf4:	9302      	str	r3, [sp, #8]
 8001bf6:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bfc:	2310      	movs	r3, #16
 8001bfe:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c00:	2308      	movs	r3, #8
 8001c02:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001c04:	2354      	movs	r3, #84	; 0x54
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c06:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001c08:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c0a:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c0c:	2304      	movs	r3, #4
 8001c0e:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c10:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c12:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c14:	9412      	str	r4, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c16:	f7ff fad7 	bl	80011c8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c1a:	230f      	movs	r3, #15
 8001c1c:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c1e:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c24:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c26:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c28:	9505      	str	r5, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c2a:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c2c:	9507      	str	r5, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c2e:	f7ff fc7b 	bl	8001528 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001c32:	b015      	add	sp, #84	; 0x54
 8001c34:	bd30      	pop	{r4, r5, pc}
 8001c36:	bf00      	nop
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	40007000 	.word	0x40007000

08001c40 <main>:
{
 8001c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c44:	ed2d 8b06 	vpush	{d8-d10}
 8001c48:	b08f      	sub	sp, #60	; 0x3c
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c4a:	2400      	movs	r4, #0
  HAL_Init();
 8001c4c:	f7ff f93e 	bl	8000ecc <HAL_Init>
  SystemClock_Config();
 8001c50:	f7ff ffac 	bl	8001bac <SystemClock_Config>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c54:	4bd2      	ldr	r3, [pc, #840]	; (8001fa0 <main+0x360>)
 8001c56:	9407      	str	r4, [sp, #28]
 8001c58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  huart1.Instance = USART1;
 8001c5a:	48d2      	ldr	r0, [pc, #840]	; (8001fa4 <main+0x364>)
  huart2.Instance = USART2;
 8001c5c:	4fd2      	ldr	r7, [pc, #840]	; (8001fa8 <main+0x368>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c5e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c62:	631a      	str	r2, [r3, #48]	; 0x30
 8001c64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c66:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001c6a:	9207      	str	r2, [sp, #28]
 8001c6c:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6e:	9408      	str	r4, [sp, #32]
 8001c70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c72:	f042 0201 	orr.w	r2, r2, #1
 8001c76:	631a      	str	r2, [r3, #48]	; 0x30
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c7a:	6084      	str	r4, [r0, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7c:	f003 0301 	and.w	r3, r3, #1
 8001c80:	9308      	str	r3, [sp, #32]
 8001c82:	9b08      	ldr	r3, [sp, #32]
  huart1.Init.BaudRate = 115200;
 8001c84:	4bc9      	ldr	r3, [pc, #804]	; (8001fac <main+0x36c>)
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c86:	60c4      	str	r4, [r0, #12]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c88:	250c      	movs	r5, #12
  huart1.Init.BaudRate = 115200;
 8001c8a:	f44f 36e1 	mov.w	r6, #115200	; 0x1c200
 8001c8e:	e880 0048 	stmia.w	r0, {r3, r6}
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c92:	6104      	str	r4, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c94:	6145      	str	r5, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c96:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c98:	61c4      	str	r4, [r0, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8001c9a:	f7ff fe6f 	bl	800197c <HAL_HalfDuplex_Init>
  huart2.Instance = USART2;
 8001c9e:	48c4      	ldr	r0, [pc, #784]	; (8001fb0 <main+0x370>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ca0:	6084      	str	r4, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ca2:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ca4:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ca6:	6145      	str	r5, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ca8:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001caa:	61c4      	str	r4, [r0, #28]
  huart2.Instance = USART2;
 8001cac:	6007      	str	r7, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8001cae:	6046      	str	r6, [r0, #4]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cb0:	f7ff fe36 	bl	8001920 <HAL_UART_Init>
  USART2->CR1 |= 1<<5;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
  huart6.Instance = USART6;
 8001cb6:	48bf      	ldr	r0, [pc, #764]	; (8001fb4 <main+0x374>)
  USART2->CR1 |= 1<<5;
 8001cb8:	f043 0320 	orr.w	r3, r3, #32
 8001cbc:	60fb      	str	r3, [r7, #12]
  huart6.Instance = USART6;
 8001cbe:	4bbe      	ldr	r3, [pc, #760]	; (8001fb8 <main+0x378>)
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001cc0:	6084      	str	r4, [r0, #8]
  huart6.Init.BaudRate = 115200;
 8001cc2:	e880 0048 	stmia.w	r0, {r3, r6}
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001cc6:	60c4      	str	r4, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001cc8:	6104      	str	r4, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001cca:	6145      	str	r5, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ccc:	6184      	str	r4, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cce:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001cd0:	f7ff fe26 	bl	8001920 <HAL_UART_Init>
  char str[20] = {0,};
 8001cd4:	2214      	movs	r2, #20
 8001cd6:	4621      	mov	r1, r4
 8001cd8:	a809      	add	r0, sp, #36	; 0x24
 8001cda:	f000 fac9 	bl	8002270 <memset>
  TFmini_Lidar_init();
 8001cde:	f7ff ff49 	bl	8001b74 <TFmini_Lidar_init>
  HAL_Delay(1000);
 8001ce2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ce6:	f7ff f91d 	bl	8000f24 <HAL_Delay>
  AX12_MovingSpeed(2, 128);
 8001cea:	2180      	movs	r1, #128	; 0x80
 8001cec:	2002      	movs	r0, #2
 8001cee:	f7ff fed5 	bl	8001a9c <AX12_MovingSpeed>
  AX12_MovingSpeed(1, 128);
 8001cf2:	2180      	movs	r1, #128	; 0x80
 8001cf4:	2001      	movs	r0, #1
 8001cf6:	f7ff fed1 	bl	8001a9c <AX12_MovingSpeed>
  HAL_Delay(2000);
 8001cfa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001cfe:	f7ff f911 	bl	8000f24 <HAL_Delay>
  AX12_GoalPosition(2, 205);
 8001d02:	21cd      	movs	r1, #205	; 0xcd
 8001d04:	2002      	movs	r0, #2
 8001d06:	f7ff feff 	bl	8001b08 <AX12_GoalPosition>
  AX12_GoalPosition(1, 205);
 8001d0a:	21cd      	movs	r1, #205	; 0xcd
 8001d0c:	2001      	movs	r0, #1
 8001d0e:	f7ff fefb 	bl	8001b08 <AX12_GoalPosition>
  HAL_Delay(2000);
 8001d12:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001d16:	f7ff f905 	bl	8000f24 <HAL_Delay>
		  while(Lidar_Dataa[0]!=0x59 || Lidar_Dataa[1]!=0x59);
 8001d1a:	4da8      	ldr	r5, [pc, #672]	; (8001fbc <main+0x37c>)
  uint16_t theta = 205;
 8001d1c:	24cd      	movs	r4, #205	; 0xcd
	  elevation = (theta - 205) * 0.29296875 * deg2rad;
 8001d1e:	f1a4 00cd 	sub.w	r0, r4, #205	; 0xcd
 8001d22:	f7fe fbff 	bl	8000524 <__aeabi_i2d>
 8001d26:	2200      	movs	r2, #0
 8001d28:	4ba5      	ldr	r3, [pc, #660]	; (8001fc0 <main+0x380>)
 8001d2a:	f7fe fc61 	bl	80005f0 <__aeabi_dmul>
 8001d2e:	a39a      	add	r3, pc, #616	; (adr r3, 8001f98 <main+0x358>)
 8001d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d34:	f7fe fc5c 	bl	80005f0 <__aeabi_dmul>
 8001d38:	ec41 0b18 	vmov	d8, r0, r1
	  AX12_GoalPosition(1, theta);
 8001d3c:	4621      	mov	r1, r4
 8001d3e:	2001      	movs	r0, #1
 8001d40:	f7ff fee2 	bl	8001b08 <AX12_GoalPosition>
	  for(int i = 205; i<=819; i+=3){
 8001d44:	f04f 0acd 	mov.w	sl, #205	; 0xcd
		  while(Lidar_Dataa[0]!=0x59 || Lidar_Dataa[1]!=0x59);
 8001d48:	782a      	ldrb	r2, [r5, #0]
 8001d4a:	786b      	ldrb	r3, [r5, #1]
 8001d4c:	2a59      	cmp	r2, #89	; 0x59
 8001d4e:	d1fd      	bne.n	8001d4c <main+0x10c>
 8001d50:	2b59      	cmp	r3, #89	; 0x59
 8001d52:	d1fd      	bne.n	8001d50 <main+0x110>
		  azimuth = (Dynamixel_degree - 205) * 0.29296875 * deg2rad;
 8001d54:	f1aa 00cd 	sub.w	r0, sl, #205	; 0xcd
 8001d58:	f7fe fbe4 	bl	8000524 <__aeabi_i2d>
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	4b98      	ldr	r3, [pc, #608]	; (8001fc0 <main+0x380>)
 8001d60:	f7fe fc46 	bl	80005f0 <__aeabi_dmul>
 8001d64:	a38c      	add	r3, pc, #560	; (adr r3, 8001f98 <main+0x358>)
 8001d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d6a:	f7fe fc41 	bl	80005f0 <__aeabi_dmul>
 8001d6e:	ec41 0b19 	vmov	d9, r0, r1
		  AX12_GoalPosition(2, Dynamixel_degree);
 8001d72:	4651      	mov	r1, sl
 8001d74:	2002      	movs	r0, #2
 8001d76:	f7ff fec7 	bl	8001b08 <AX12_GoalPosition>
		  HAL_Delay(100);
 8001d7a:	2064      	movs	r0, #100	; 0x64
 8001d7c:	f7ff f8d2 	bl	8000f24 <HAL_Delay>
		  Lidar_Distance = (Lidar_Dataa[3]<<8) + (Lidar_Dataa[2] & 0xFF);
 8001d80:	78eb      	ldrb	r3, [r5, #3]
 8001d82:	78a8      	ldrb	r0, [r5, #2]
 8001d84:	eb00 2003 	add.w	r0, r0, r3, lsl #8
		  x = (int)Lidar_Distance * sin(azimuth) * cos(elevation);
 8001d88:	b280      	uxth	r0, r0
 8001d8a:	f7fe fbcb 	bl	8000524 <__aeabi_i2d>
 8001d8e:	eeb0 0a49 	vmov.f32	s0, s18
 8001d92:	eef0 0a69 	vmov.f32	s1, s19
 8001d96:	4606      	mov	r6, r0
 8001d98:	460f      	mov	r7, r1
 8001d9a:	f000 fed5 	bl	8002b48 <sin>
 8001d9e:	eeb0 aa40 	vmov.f32	s20, s0
 8001da2:	eef0 aa60 	vmov.f32	s21, s1
 8001da6:	eeb0 0a48 	vmov.f32	s0, s16
 8001daa:	eef0 0a68 	vmov.f32	s1, s17
 8001dae:	f000 fe87 	bl	8002ac0 <cos>
 8001db2:	ec59 8b10 	vmov	r8, r9, d0
		  y = (int)Lidar_Distance * cos(azimuth) * cos(elevation);
 8001db6:	eeb0 0a49 	vmov.f32	s0, s18
 8001dba:	eef0 0a69 	vmov.f32	s1, s19
 8001dbe:	f000 fe7f 	bl	8002ac0 <cos>
 8001dc2:	ec53 2b10 	vmov	r2, r3, d0
		  z = (int)Lidar_Distance * sin(elevation);
 8001dc6:	eeb0 0a48 	vmov.f32	s0, s16
 8001dca:	eef0 0a68 	vmov.f32	s1, s17
		  y = (int)Lidar_Distance * cos(azimuth) * cos(elevation);
 8001dce:	e9cd 2304 	strd	r2, r3, [sp, #16]
		  z = (int)Lidar_Distance * sin(elevation);
 8001dd2:	f000 feb9 	bl	8002b48 <sin>
		  y = (int)Lidar_Distance * cos(azimuth) * cos(elevation);
 8001dd6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001dda:	4630      	mov	r0, r6
 8001ddc:	4639      	mov	r1, r7
		  z = (int)Lidar_Distance * sin(elevation);
 8001dde:	ed8d 0b02 	vstr	d0, [sp, #8]
		  y = (int)Lidar_Distance * cos(azimuth) * cos(elevation);
 8001de2:	f7fe fc05 	bl	80005f0 <__aeabi_dmul>
 8001de6:	4642      	mov	r2, r8
 8001de8:	464b      	mov	r3, r9
 8001dea:	f7fe fc01 	bl	80005f0 <__aeabi_dmul>
 8001dee:	f7fe fe99 	bl	8000b24 <__aeabi_d2iz>
		  x = (int)Lidar_Distance * sin(azimuth) * cos(elevation);
 8001df2:	ec53 2b1a 	vmov	r2, r3, d10
		  y = (int)Lidar_Distance * cos(azimuth) * cos(elevation);
 8001df6:	4683      	mov	fp, r0
		  x = (int)Lidar_Distance * sin(azimuth) * cos(elevation);
 8001df8:	4639      	mov	r1, r7
 8001dfa:	4630      	mov	r0, r6
 8001dfc:	f7fe fbf8 	bl	80005f0 <__aeabi_dmul>
 8001e00:	4642      	mov	r2, r8
 8001e02:	464b      	mov	r3, r9
 8001e04:	f7fe fbf4 	bl	80005f0 <__aeabi_dmul>
 8001e08:	f7fe fe8c 	bl	8000b24 <__aeabi_d2iz>
		  z = (int)Lidar_Distance * sin(elevation);
 8001e0c:	ed9d 0b02 	vldr	d0, [sp, #8]
		  sprintf(str, "%d %d %d\n", -x, y, z);
 8001e10:	f1c0 0800 	rsb	r8, r0, #0
		  z = (int)Lidar_Distance * sin(elevation);
 8001e14:	ec53 2b10 	vmov	r2, r3, d0
 8001e18:	4630      	mov	r0, r6
 8001e1a:	4639      	mov	r1, r7
 8001e1c:	f7fe fbe8 	bl	80005f0 <__aeabi_dmul>
 8001e20:	f7fe fe80 	bl	8000b24 <__aeabi_d2iz>
		  sprintf(str, "%d %d %d\n", -x, y, z);
 8001e24:	465b      	mov	r3, fp
 8001e26:	9000      	str	r0, [sp, #0]
 8001e28:	4642      	mov	r2, r8
 8001e2a:	4966      	ldr	r1, [pc, #408]	; (8001fc4 <main+0x384>)
 8001e2c:	a809      	add	r0, sp, #36	; 0x24
 8001e2e:	f000 fa27 	bl	8002280 <siprintf>
	  for(int i = 205; i<=819; i+=3){
 8001e32:	f10a 0a03 	add.w	sl, sl, #3
		  HAL_UART_Transmit(&huart6, (uint8_t*)str, (uint16_t)sizeof(str), 10);
 8001e36:	230a      	movs	r3, #10
 8001e38:	2214      	movs	r2, #20
 8001e3a:	a909      	add	r1, sp, #36	; 0x24
 8001e3c:	485d      	ldr	r0, [pc, #372]	; (8001fb4 <main+0x374>)
 8001e3e:	f7ff fdcf 	bl	80019e0 <HAL_UART_Transmit>
	  for(int i = 205; i<=819; i+=3){
 8001e42:	f5ba 7f4d 	cmp.w	sl, #820	; 0x334
 8001e46:	f47f af7f 	bne.w	8001d48 <main+0x108>
	  theta+=3;
 8001e4a:	3403      	adds	r4, #3
 8001e4c:	b2a4      	uxth	r4, r4
 8001e4e:	f5b4 7fff 	cmp.w	r4, #510	; 0x1fe
 8001e52:	bf28      	it	cs
 8001e54:	f44f 74ff 	movcs.w	r4, #510	; 0x1fe
	  elevation = (theta - 205) * 0.29296875 * deg2rad;
 8001e58:	f1a4 00cd 	sub.w	r0, r4, #205	; 0xcd
 8001e5c:	f7fe fb62 	bl	8000524 <__aeabi_i2d>
 8001e60:	2200      	movs	r2, #0
 8001e62:	4b57      	ldr	r3, [pc, #348]	; (8001fc0 <main+0x380>)
 8001e64:	f7fe fbc4 	bl	80005f0 <__aeabi_dmul>
 8001e68:	a34b      	add	r3, pc, #300	; (adr r3, 8001f98 <main+0x358>)
 8001e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e6e:	f7fe fbbf 	bl	80005f0 <__aeabi_dmul>
 8001e72:	ec41 0b18 	vmov	d8, r0, r1
	  AX12_GoalPosition(2, theta);
 8001e76:	4621      	mov	r1, r4
 8001e78:	2002      	movs	r0, #2
 8001e7a:	f7ff fe45 	bl	8001b08 <AX12_GoalPosition>
	  for(int i = 819; i>=205; i-=3){
 8001e7e:	f240 3a33 	movw	sl, #819	; 0x333
		  while(Lidar_Dataa[0]!=0x59 || Lidar_Dataa[1]!=0x59);
 8001e82:	782a      	ldrb	r2, [r5, #0]
 8001e84:	786b      	ldrb	r3, [r5, #1]
 8001e86:	2a59      	cmp	r2, #89	; 0x59
 8001e88:	d1fd      	bne.n	8001e86 <main+0x246>
 8001e8a:	2b59      	cmp	r3, #89	; 0x59
 8001e8c:	d1fd      	bne.n	8001e8a <main+0x24a>
	  	  azimuth = (Dynamixel_degree - 205) * 0.29296875 * deg2rad;
 8001e8e:	f1aa 00cd 	sub.w	r0, sl, #205	; 0xcd
 8001e92:	f7fe fb47 	bl	8000524 <__aeabi_i2d>
 8001e96:	2200      	movs	r2, #0
 8001e98:	4b49      	ldr	r3, [pc, #292]	; (8001fc0 <main+0x380>)
 8001e9a:	f7fe fba9 	bl	80005f0 <__aeabi_dmul>
 8001e9e:	a33e      	add	r3, pc, #248	; (adr r3, 8001f98 <main+0x358>)
 8001ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea4:	f7fe fba4 	bl	80005f0 <__aeabi_dmul>
 8001ea8:	ec41 0b19 	vmov	d9, r0, r1
	  	  AX12_GoalPosition(2, Dynamixel_degree);
 8001eac:	4651      	mov	r1, sl
 8001eae:	2002      	movs	r0, #2
 8001eb0:	f7ff fe2a 	bl	8001b08 <AX12_GoalPosition>
	  	  HAL_Delay(100);
 8001eb4:	2064      	movs	r0, #100	; 0x64
 8001eb6:	f7ff f835 	bl	8000f24 <HAL_Delay>
	  	  Lidar_Distance = (Lidar_Dataa[3]<<8) + (Lidar_Dataa[2] & 0xFF);
 8001eba:	78eb      	ldrb	r3, [r5, #3]
 8001ebc:	78a8      	ldrb	r0, [r5, #2]
 8001ebe:	eb00 2003 	add.w	r0, r0, r3, lsl #8
	  	  x = (int)Lidar_Distance * sin(azimuth) * cos(elevation);
 8001ec2:	b280      	uxth	r0, r0
 8001ec4:	f7fe fb2e 	bl	8000524 <__aeabi_i2d>
 8001ec8:	eeb0 0a49 	vmov.f32	s0, s18
 8001ecc:	eef0 0a69 	vmov.f32	s1, s19
 8001ed0:	4606      	mov	r6, r0
 8001ed2:	460f      	mov	r7, r1
 8001ed4:	f000 fe38 	bl	8002b48 <sin>
 8001ed8:	eeb0 aa40 	vmov.f32	s20, s0
 8001edc:	eef0 aa60 	vmov.f32	s21, s1
 8001ee0:	eeb0 0a48 	vmov.f32	s0, s16
 8001ee4:	eef0 0a68 	vmov.f32	s1, s17
 8001ee8:	f000 fdea 	bl	8002ac0 <cos>
 8001eec:	ec59 8b10 	vmov	r8, r9, d0
	  	  y = (int)Lidar_Distance * cos(azimuth) * cos(elevation);
 8001ef0:	eeb0 0a49 	vmov.f32	s0, s18
 8001ef4:	eef0 0a69 	vmov.f32	s1, s19
 8001ef8:	f000 fde2 	bl	8002ac0 <cos>
 8001efc:	ec53 2b10 	vmov	r2, r3, d0
	  	  z = (int)Lidar_Distance * sin(elevation);
 8001f00:	eeb0 0a48 	vmov.f32	s0, s16
 8001f04:	eef0 0a68 	vmov.f32	s1, s17
	  	  y = (int)Lidar_Distance * cos(azimuth) * cos(elevation);
 8001f08:	e9cd 2304 	strd	r2, r3, [sp, #16]
	  	  z = (int)Lidar_Distance * sin(elevation);
 8001f0c:	f000 fe1c 	bl	8002b48 <sin>
	  	  y = (int)Lidar_Distance * cos(azimuth) * cos(elevation);
 8001f10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001f14:	4630      	mov	r0, r6
 8001f16:	4639      	mov	r1, r7
	  	  z = (int)Lidar_Distance * sin(elevation);
 8001f18:	ed8d 0b02 	vstr	d0, [sp, #8]
	  	  y = (int)Lidar_Distance * cos(azimuth) * cos(elevation);
 8001f1c:	f7fe fb68 	bl	80005f0 <__aeabi_dmul>
 8001f20:	4642      	mov	r2, r8
 8001f22:	464b      	mov	r3, r9
 8001f24:	f7fe fb64 	bl	80005f0 <__aeabi_dmul>
 8001f28:	f7fe fdfc 	bl	8000b24 <__aeabi_d2iz>
	  	  x = (int)Lidar_Distance * sin(azimuth) * cos(elevation);
 8001f2c:	ec53 2b1a 	vmov	r2, r3, d10
	  	  y = (int)Lidar_Distance * cos(azimuth) * cos(elevation);
 8001f30:	4683      	mov	fp, r0
	  	  x = (int)Lidar_Distance * sin(azimuth) * cos(elevation);
 8001f32:	4639      	mov	r1, r7
 8001f34:	4630      	mov	r0, r6
 8001f36:	f7fe fb5b 	bl	80005f0 <__aeabi_dmul>
 8001f3a:	4642      	mov	r2, r8
 8001f3c:	464b      	mov	r3, r9
 8001f3e:	f7fe fb57 	bl	80005f0 <__aeabi_dmul>
 8001f42:	f7fe fdef 	bl	8000b24 <__aeabi_d2iz>
	  	  z = (int)Lidar_Distance * sin(elevation);
 8001f46:	ed9d 0b02 	vldr	d0, [sp, #8]
	 	  sprintf(str, "%d %d %d\n", -x, y, z);
 8001f4a:	f1c0 0800 	rsb	r8, r0, #0
	  	  z = (int)Lidar_Distance * sin(elevation);
 8001f4e:	ec53 2b10 	vmov	r2, r3, d0
 8001f52:	4630      	mov	r0, r6
 8001f54:	4639      	mov	r1, r7
 8001f56:	f7fe fb4b 	bl	80005f0 <__aeabi_dmul>
 8001f5a:	f7fe fde3 	bl	8000b24 <__aeabi_d2iz>
	 	  sprintf(str, "%d %d %d\n", -x, y, z);
 8001f5e:	465b      	mov	r3, fp
 8001f60:	9000      	str	r0, [sp, #0]
 8001f62:	4642      	mov	r2, r8
 8001f64:	4917      	ldr	r1, [pc, #92]	; (8001fc4 <main+0x384>)
 8001f66:	a809      	add	r0, sp, #36	; 0x24
 8001f68:	f000 f98a 	bl	8002280 <siprintf>
	  for(int i = 819; i>=205; i-=3){
 8001f6c:	f1aa 0a03 	sub.w	sl, sl, #3
		  HAL_UART_Transmit(&huart6, (uint8_t*)str, (uint16_t)sizeof(str), 10);
 8001f70:	230a      	movs	r3, #10
 8001f72:	2214      	movs	r2, #20
 8001f74:	a909      	add	r1, sp, #36	; 0x24
 8001f76:	480f      	ldr	r0, [pc, #60]	; (8001fb4 <main+0x374>)
 8001f78:	f7ff fd32 	bl	80019e0 <HAL_UART_Transmit>
	  for(int i = 819; i>=205; i-=3){
 8001f7c:	f1ba 0fcc 	cmp.w	sl, #204	; 0xcc
 8001f80:	f47f af7f 	bne.w	8001e82 <main+0x242>
	  theta+=3;
 8001f84:	3403      	adds	r4, #3
 8001f86:	b2a4      	uxth	r4, r4
 8001f88:	f5b4 7fff 	cmp.w	r4, #510	; 0x1fe
 8001f8c:	bf28      	it	cs
 8001f8e:	f44f 74ff 	movcs.w	r4, #510	; 0x1fe
 8001f92:	e6c4      	b.n	8001d1e <main+0xde>
 8001f94:	f3af 8000 	nop.w
 8001f98:	a0000000 	.word	0xa0000000
 8001f9c:	3f91df46 	.word	0x3f91df46
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	200000a8 	.word	0x200000a8
 8001fa8:	40004400 	.word	0x40004400
 8001fac:	40011000 	.word	0x40011000
 8001fb0:	20000128 	.word	0x20000128
 8001fb4:	200000e8 	.word	0x200000e8
 8001fb8:	40011400 	.word	0x40011400
 8001fbc:	2000008c 	.word	0x2000008c
 8001fc0:	3fd2c000 	.word	0x3fd2c000
 8001fc4:	08003c10 	.word	0x08003c10

08001fc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fc8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fca:	4b0c      	ldr	r3, [pc, #48]	; (8001ffc <HAL_MspInit+0x34>)
 8001fcc:	2100      	movs	r1, #0
 8001fce:	9100      	str	r1, [sp, #0]
 8001fd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fd2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001fd6:	645a      	str	r2, [r3, #68]	; 0x44
 8001fd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fda:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001fde:	9200      	str	r2, [sp, #0]
 8001fe0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fe2:	9101      	str	r1, [sp, #4]
 8001fe4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fe6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001fea:	641a      	str	r2, [r3, #64]	; 0x40
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff2:	9301      	str	r3, [sp, #4]
 8001ff4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ff6:	b002      	add	sp, #8
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	40023800 	.word	0x40023800

08002000 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002000:	b510      	push	{r4, lr}
 8002002:	4604      	mov	r4, r0
 8002004:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002006:	2214      	movs	r2, #20
 8002008:	2100      	movs	r1, #0
 800200a:	a807      	add	r0, sp, #28
 800200c:	f000 f930 	bl	8002270 <memset>
  if(huart->Instance==USART1)
 8002010:	6823      	ldr	r3, [r4, #0]
 8002012:	4a3e      	ldr	r2, [pc, #248]	; (800210c <HAL_UART_MspInit+0x10c>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d123      	bne.n	8002060 <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002018:	4b3d      	ldr	r3, [pc, #244]	; (8002110 <HAL_UART_MspInit+0x110>)
 800201a:	2100      	movs	r1, #0
 800201c:	9101      	str	r1, [sp, #4]
 800201e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002020:	f042 0210 	orr.w	r2, r2, #16
 8002024:	645a      	str	r2, [r3, #68]	; 0x44
 8002026:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002028:	f002 0210 	and.w	r2, r2, #16
 800202c:	9201      	str	r2, [sp, #4]
 800202e:	9a01      	ldr	r2, [sp, #4]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002030:	9102      	str	r1, [sp, #8]
 8002032:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002034:	f042 0201 	orr.w	r2, r2, #1
 8002038:	631a      	str	r2, [r3, #48]	; 0x30
 800203a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203c:	f003 0301 	and.w	r3, r3, #1
 8002040:	9302      	str	r3, [sp, #8]
 8002042:	9b02      	ldr	r3, [sp, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002044:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002048:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800204a:	2312      	movs	r3, #18
 800204c:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800204e:	2303      	movs	r3, #3
 8002050:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002052:	2307      	movs	r3, #7
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002054:	a907      	add	r1, sp, #28
 8002056:	482f      	ldr	r0, [pc, #188]	; (8002114 <HAL_UART_MspInit+0x114>)
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002058:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800205a:	f7fe ffdf 	bl	800101c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800205e:	e02e      	b.n	80020be <HAL_UART_MspInit+0xbe>
  else if(huart->Instance==USART2)
 8002060:	4a2d      	ldr	r2, [pc, #180]	; (8002118 <HAL_UART_MspInit+0x118>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d12d      	bne.n	80020c2 <HAL_UART_MspInit+0xc2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002066:	4b2a      	ldr	r3, [pc, #168]	; (8002110 <HAL_UART_MspInit+0x110>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002068:	482a      	ldr	r0, [pc, #168]	; (8002114 <HAL_UART_MspInit+0x114>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800206a:	2400      	movs	r4, #0
 800206c:	9403      	str	r4, [sp, #12]
 800206e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002070:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002074:	641a      	str	r2, [r3, #64]	; 0x40
 8002076:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002078:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800207c:	9203      	str	r2, [sp, #12]
 800207e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002080:	9404      	str	r4, [sp, #16]
 8002082:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002084:	f042 0201 	orr.w	r2, r2, #1
 8002088:	631a      	str	r2, [r3, #48]	; 0x30
 800208a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	9304      	str	r3, [sp, #16]
 8002092:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002094:	230c      	movs	r3, #12
 8002096:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002098:	2312      	movs	r3, #18
 800209a:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800209c:	2301      	movs	r3, #1
 800209e:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a0:	2303      	movs	r3, #3
 80020a2:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a4:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020a6:	2307      	movs	r3, #7
 80020a8:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020aa:	f7fe ffb7 	bl	800101c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80020ae:	2026      	movs	r0, #38	; 0x26
 80020b0:	4622      	mov	r2, r4
 80020b2:	4621      	mov	r1, r4
 80020b4:	f7fe ff5c 	bl	8000f70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80020b8:	2026      	movs	r0, #38	; 0x26
 80020ba:	f7fe ff8d 	bl	8000fd8 <HAL_NVIC_EnableIRQ>
}
 80020be:	b00c      	add	sp, #48	; 0x30
 80020c0:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART6)
 80020c2:	4a16      	ldr	r2, [pc, #88]	; (800211c <HAL_UART_MspInit+0x11c>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d1fa      	bne.n	80020be <HAL_UART_MspInit+0xbe>
    __HAL_RCC_USART6_CLK_ENABLE();
 80020c8:	4b11      	ldr	r3, [pc, #68]	; (8002110 <HAL_UART_MspInit+0x110>)
 80020ca:	2100      	movs	r1, #0
 80020cc:	9105      	str	r1, [sp, #20]
 80020ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020d0:	f042 0220 	orr.w	r2, r2, #32
 80020d4:	645a      	str	r2, [r3, #68]	; 0x44
 80020d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020d8:	f002 0220 	and.w	r2, r2, #32
 80020dc:	9205      	str	r2, [sp, #20]
 80020de:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e0:	9106      	str	r1, [sp, #24]
 80020e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020e4:	f042 0201 	orr.w	r2, r2, #1
 80020e8:	631a      	str	r2, [r3, #48]	; 0x30
 80020ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ec:	f003 0301 	and.w	r3, r3, #1
 80020f0:	9306      	str	r3, [sp, #24]
 80020f2:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80020f4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80020f8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020fa:	2312      	movs	r3, #18
 80020fc:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020fe:	2301      	movs	r3, #1
 8002100:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002102:	2303      	movs	r3, #3
 8002104:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002106:	2308      	movs	r3, #8
 8002108:	e7a4      	b.n	8002054 <HAL_UART_MspInit+0x54>
 800210a:	bf00      	nop
 800210c:	40011000 	.word	0x40011000
 8002110:	40023800 	.word	0x40023800
 8002114:	40020000 	.word	0x40020000
 8002118:	40004400 	.word	0x40004400
 800211c:	40011400 	.word	0x40011400

08002120 <NMI_Handler>:
 8002120:	4770      	bx	lr

08002122 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002122:	e7fe      	b.n	8002122 <HardFault_Handler>

08002124 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002124:	e7fe      	b.n	8002124 <MemManage_Handler>

08002126 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002126:	e7fe      	b.n	8002126 <BusFault_Handler>

08002128 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002128:	e7fe      	b.n	8002128 <UsageFault_Handler>

0800212a <SVC_Handler>:
 800212a:	4770      	bx	lr

0800212c <DebugMon_Handler>:
 800212c:	4770      	bx	lr

0800212e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800212e:	4770      	bx	lr

08002130 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002130:	f7fe bee6 	b.w	8000f00 <HAL_IncTick>

08002134 <USART2_IRQHandler>:
/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
	if(USART2->SR & 0x20)
 8002134:	4a11      	ldr	r2, [pc, #68]	; (800217c <USART2_IRQHandler+0x48>)
 8002136:	6813      	ldr	r3, [r2, #0]
 8002138:	069b      	lsls	r3, r3, #26
 800213a:	d51d      	bpl.n	8002178 <USART2_IRQHandler+0x44>
	{
		Lidar_Dataa[i] = USART2->DR;
 800213c:	4b10      	ldr	r3, [pc, #64]	; (8002180 <USART2_IRQHandler+0x4c>)
 800213e:	6850      	ldr	r0, [r2, #4]
 8002140:	7819      	ldrb	r1, [r3, #0]
 8002142:	4a10      	ldr	r2, [pc, #64]	; (8002184 <USART2_IRQHandler+0x50>)

	    if(i>8)
 8002144:	2908      	cmp	r1, #8
		Lidar_Dataa[i] = USART2->DR;
 8002146:	5450      	strb	r0, [r2, r1]
	    {
	    	i=0;
 8002148:	bf84      	itt	hi
 800214a:	2100      	movhi	r1, #0
 800214c:	7019      	strbhi	r1, [r3, #0]
	    }

	    if(i>0 && Lidar_Dataa[i] == 0x59 && Lidar_Dataa[i-1] == 0x59 && Lidar_Dataa[i-2] != 0x59)
 800214e:	7819      	ldrb	r1, [r3, #0]
 8002150:	b179      	cbz	r1, 8002172 <USART2_IRQHandler+0x3e>
 8002152:	5c50      	ldrb	r0, [r2, r1]
 8002154:	2859      	cmp	r0, #89	; 0x59
 8002156:	d10c      	bne.n	8002172 <USART2_IRQHandler+0x3e>
 8002158:	4411      	add	r1, r2
 800215a:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 800215e:	2859      	cmp	r0, #89	; 0x59
 8002160:	d107      	bne.n	8002172 <USART2_IRQHandler+0x3e>
 8002162:	f811 1c02 	ldrb.w	r1, [r1, #-2]
 8002166:	2959      	cmp	r1, #89	; 0x59
	    {
	        i=1;
 8002168:	bf1f      	itttt	ne
 800216a:	2101      	movne	r1, #1
 800216c:	7019      	strbne	r1, [r3, #0]
	        Lidar_Dataa[i-1] = 0x59;
 800216e:	7010      	strbne	r0, [r2, #0]
	        Lidar_Dataa[i] = 0x59;
 8002170:	7050      	strbne	r0, [r2, #1]
	    }
	    i++;
 8002172:	781a      	ldrb	r2, [r3, #0]
 8002174:	3201      	adds	r2, #1
 8002176:	701a      	strb	r2, [r3, #0]
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	40004400 	.word	0x40004400
 8002180:	20000095 	.word	0x20000095
 8002184:	2000008c 	.word	0x2000008c

08002188 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002188:	490f      	ldr	r1, [pc, #60]	; (80021c8 <SystemInit+0x40>)
 800218a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800218e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002192:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002196:	4b0d      	ldr	r3, [pc, #52]	; (80021cc <SystemInit+0x44>)
 8002198:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800219a:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 800219c:	f042 0201 	orr.w	r2, r2, #1
 80021a0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80021a2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80021aa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80021ae:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80021b0:	4a07      	ldr	r2, [pc, #28]	; (80021d0 <SystemInit+0x48>)
 80021b2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80021ba:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80021bc:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80021be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80021c2:	608b      	str	r3, [r1, #8]
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	e000ed00 	.word	0xe000ed00
 80021cc:	40023800 	.word	0x40023800
 80021d0:	24003010 	.word	0x24003010

080021d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80021d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800220c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80021d8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80021da:	e003      	b.n	80021e4 <LoopCopyDataInit>

080021dc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80021dc:	4b0c      	ldr	r3, [pc, #48]	; (8002210 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80021de:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80021e0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80021e2:	3104      	adds	r1, #4

080021e4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80021e4:	480b      	ldr	r0, [pc, #44]	; (8002214 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80021e6:	4b0c      	ldr	r3, [pc, #48]	; (8002218 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80021e8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80021ea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80021ec:	d3f6      	bcc.n	80021dc <CopyDataInit>
  ldr  r2, =_sbss
 80021ee:	4a0b      	ldr	r2, [pc, #44]	; (800221c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80021f0:	e002      	b.n	80021f8 <LoopFillZerobss>

080021f2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80021f2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80021f4:	f842 3b04 	str.w	r3, [r2], #4

080021f8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80021f8:	4b09      	ldr	r3, [pc, #36]	; (8002220 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80021fa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80021fc:	d3f9      	bcc.n	80021f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80021fe:	f7ff ffc3 	bl	8002188 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002202:	f000 f811 	bl	8002228 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002206:	f7ff fd1b 	bl	8001c40 <main>
  bx  lr    
 800220a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800220c:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8002210:	08003e50 	.word	0x08003e50
  ldr  r0, =_sdata
 8002214:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002218:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 800221c:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8002220:	2000016c 	.word	0x2000016c

08002224 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002224:	e7fe      	b.n	8002224 <ADC_IRQHandler>
	...

08002228 <__libc_init_array>:
 8002228:	b570      	push	{r4, r5, r6, lr}
 800222a:	4e0d      	ldr	r6, [pc, #52]	; (8002260 <__libc_init_array+0x38>)
 800222c:	4c0d      	ldr	r4, [pc, #52]	; (8002264 <__libc_init_array+0x3c>)
 800222e:	1ba4      	subs	r4, r4, r6
 8002230:	10a4      	asrs	r4, r4, #2
 8002232:	2500      	movs	r5, #0
 8002234:	42a5      	cmp	r5, r4
 8002236:	d109      	bne.n	800224c <__libc_init_array+0x24>
 8002238:	4e0b      	ldr	r6, [pc, #44]	; (8002268 <__libc_init_array+0x40>)
 800223a:	4c0c      	ldr	r4, [pc, #48]	; (800226c <__libc_init_array+0x44>)
 800223c:	f001 fcd6 	bl	8003bec <_init>
 8002240:	1ba4      	subs	r4, r4, r6
 8002242:	10a4      	asrs	r4, r4, #2
 8002244:	2500      	movs	r5, #0
 8002246:	42a5      	cmp	r5, r4
 8002248:	d105      	bne.n	8002256 <__libc_init_array+0x2e>
 800224a:	bd70      	pop	{r4, r5, r6, pc}
 800224c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002250:	4798      	blx	r3
 8002252:	3501      	adds	r5, #1
 8002254:	e7ee      	b.n	8002234 <__libc_init_array+0xc>
 8002256:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800225a:	4798      	blx	r3
 800225c:	3501      	adds	r5, #1
 800225e:	e7f2      	b.n	8002246 <__libc_init_array+0x1e>
 8002260:	08003e48 	.word	0x08003e48
 8002264:	08003e48 	.word	0x08003e48
 8002268:	08003e48 	.word	0x08003e48
 800226c:	08003e4c 	.word	0x08003e4c

08002270 <memset>:
 8002270:	4402      	add	r2, r0
 8002272:	4603      	mov	r3, r0
 8002274:	4293      	cmp	r3, r2
 8002276:	d100      	bne.n	800227a <memset+0xa>
 8002278:	4770      	bx	lr
 800227a:	f803 1b01 	strb.w	r1, [r3], #1
 800227e:	e7f9      	b.n	8002274 <memset+0x4>

08002280 <siprintf>:
 8002280:	b40e      	push	{r1, r2, r3}
 8002282:	b500      	push	{lr}
 8002284:	b09c      	sub	sp, #112	; 0x70
 8002286:	f44f 7102 	mov.w	r1, #520	; 0x208
 800228a:	ab1d      	add	r3, sp, #116	; 0x74
 800228c:	f8ad 1014 	strh.w	r1, [sp, #20]
 8002290:	9002      	str	r0, [sp, #8]
 8002292:	9006      	str	r0, [sp, #24]
 8002294:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002298:	480a      	ldr	r0, [pc, #40]	; (80022c4 <siprintf+0x44>)
 800229a:	9104      	str	r1, [sp, #16]
 800229c:	9107      	str	r1, [sp, #28]
 800229e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80022a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80022a6:	f8ad 1016 	strh.w	r1, [sp, #22]
 80022aa:	6800      	ldr	r0, [r0, #0]
 80022ac:	9301      	str	r3, [sp, #4]
 80022ae:	a902      	add	r1, sp, #8
 80022b0:	f000 f866 	bl	8002380 <_svfiprintf_r>
 80022b4:	9b02      	ldr	r3, [sp, #8]
 80022b6:	2200      	movs	r2, #0
 80022b8:	701a      	strb	r2, [r3, #0]
 80022ba:	b01c      	add	sp, #112	; 0x70
 80022bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80022c0:	b003      	add	sp, #12
 80022c2:	4770      	bx	lr
 80022c4:	2000000c 	.word	0x2000000c

080022c8 <__ssputs_r>:
 80022c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80022cc:	688e      	ldr	r6, [r1, #8]
 80022ce:	429e      	cmp	r6, r3
 80022d0:	4682      	mov	sl, r0
 80022d2:	460c      	mov	r4, r1
 80022d4:	4691      	mov	r9, r2
 80022d6:	4698      	mov	r8, r3
 80022d8:	d835      	bhi.n	8002346 <__ssputs_r+0x7e>
 80022da:	898a      	ldrh	r2, [r1, #12]
 80022dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80022e0:	d031      	beq.n	8002346 <__ssputs_r+0x7e>
 80022e2:	6825      	ldr	r5, [r4, #0]
 80022e4:	6909      	ldr	r1, [r1, #16]
 80022e6:	1a6f      	subs	r7, r5, r1
 80022e8:	6965      	ldr	r5, [r4, #20]
 80022ea:	2302      	movs	r3, #2
 80022ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80022f0:	fb95 f5f3 	sdiv	r5, r5, r3
 80022f4:	f108 0301 	add.w	r3, r8, #1
 80022f8:	443b      	add	r3, r7
 80022fa:	429d      	cmp	r5, r3
 80022fc:	bf38      	it	cc
 80022fe:	461d      	movcc	r5, r3
 8002300:	0553      	lsls	r3, r2, #21
 8002302:	d531      	bpl.n	8002368 <__ssputs_r+0xa0>
 8002304:	4629      	mov	r1, r5
 8002306:	f000 fb39 	bl	800297c <_malloc_r>
 800230a:	4606      	mov	r6, r0
 800230c:	b950      	cbnz	r0, 8002324 <__ssputs_r+0x5c>
 800230e:	230c      	movs	r3, #12
 8002310:	f8ca 3000 	str.w	r3, [sl]
 8002314:	89a3      	ldrh	r3, [r4, #12]
 8002316:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800231a:	81a3      	strh	r3, [r4, #12]
 800231c:	f04f 30ff 	mov.w	r0, #4294967295
 8002320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002324:	463a      	mov	r2, r7
 8002326:	6921      	ldr	r1, [r4, #16]
 8002328:	f000 fab4 	bl	8002894 <memcpy>
 800232c:	89a3      	ldrh	r3, [r4, #12]
 800232e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002336:	81a3      	strh	r3, [r4, #12]
 8002338:	6126      	str	r6, [r4, #16]
 800233a:	6165      	str	r5, [r4, #20]
 800233c:	443e      	add	r6, r7
 800233e:	1bed      	subs	r5, r5, r7
 8002340:	6026      	str	r6, [r4, #0]
 8002342:	60a5      	str	r5, [r4, #8]
 8002344:	4646      	mov	r6, r8
 8002346:	4546      	cmp	r6, r8
 8002348:	bf28      	it	cs
 800234a:	4646      	movcs	r6, r8
 800234c:	4632      	mov	r2, r6
 800234e:	4649      	mov	r1, r9
 8002350:	6820      	ldr	r0, [r4, #0]
 8002352:	f000 faaa 	bl	80028aa <memmove>
 8002356:	68a3      	ldr	r3, [r4, #8]
 8002358:	1b9b      	subs	r3, r3, r6
 800235a:	60a3      	str	r3, [r4, #8]
 800235c:	6823      	ldr	r3, [r4, #0]
 800235e:	441e      	add	r6, r3
 8002360:	6026      	str	r6, [r4, #0]
 8002362:	2000      	movs	r0, #0
 8002364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002368:	462a      	mov	r2, r5
 800236a:	f000 fb65 	bl	8002a38 <_realloc_r>
 800236e:	4606      	mov	r6, r0
 8002370:	2800      	cmp	r0, #0
 8002372:	d1e1      	bne.n	8002338 <__ssputs_r+0x70>
 8002374:	6921      	ldr	r1, [r4, #16]
 8002376:	4650      	mov	r0, sl
 8002378:	f000 fab2 	bl	80028e0 <_free_r>
 800237c:	e7c7      	b.n	800230e <__ssputs_r+0x46>
	...

08002380 <_svfiprintf_r>:
 8002380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002384:	b09d      	sub	sp, #116	; 0x74
 8002386:	4680      	mov	r8, r0
 8002388:	9303      	str	r3, [sp, #12]
 800238a:	898b      	ldrh	r3, [r1, #12]
 800238c:	061c      	lsls	r4, r3, #24
 800238e:	460d      	mov	r5, r1
 8002390:	4616      	mov	r6, r2
 8002392:	d50f      	bpl.n	80023b4 <_svfiprintf_r+0x34>
 8002394:	690b      	ldr	r3, [r1, #16]
 8002396:	b96b      	cbnz	r3, 80023b4 <_svfiprintf_r+0x34>
 8002398:	2140      	movs	r1, #64	; 0x40
 800239a:	f000 faef 	bl	800297c <_malloc_r>
 800239e:	6028      	str	r0, [r5, #0]
 80023a0:	6128      	str	r0, [r5, #16]
 80023a2:	b928      	cbnz	r0, 80023b0 <_svfiprintf_r+0x30>
 80023a4:	230c      	movs	r3, #12
 80023a6:	f8c8 3000 	str.w	r3, [r8]
 80023aa:	f04f 30ff 	mov.w	r0, #4294967295
 80023ae:	e0c5      	b.n	800253c <_svfiprintf_r+0x1bc>
 80023b0:	2340      	movs	r3, #64	; 0x40
 80023b2:	616b      	str	r3, [r5, #20]
 80023b4:	2300      	movs	r3, #0
 80023b6:	9309      	str	r3, [sp, #36]	; 0x24
 80023b8:	2320      	movs	r3, #32
 80023ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80023be:	2330      	movs	r3, #48	; 0x30
 80023c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80023c4:	f04f 0b01 	mov.w	fp, #1
 80023c8:	4637      	mov	r7, r6
 80023ca:	463c      	mov	r4, r7
 80023cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d13c      	bne.n	800244e <_svfiprintf_r+0xce>
 80023d4:	ebb7 0a06 	subs.w	sl, r7, r6
 80023d8:	d00b      	beq.n	80023f2 <_svfiprintf_r+0x72>
 80023da:	4653      	mov	r3, sl
 80023dc:	4632      	mov	r2, r6
 80023de:	4629      	mov	r1, r5
 80023e0:	4640      	mov	r0, r8
 80023e2:	f7ff ff71 	bl	80022c8 <__ssputs_r>
 80023e6:	3001      	adds	r0, #1
 80023e8:	f000 80a3 	beq.w	8002532 <_svfiprintf_r+0x1b2>
 80023ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80023ee:	4453      	add	r3, sl
 80023f0:	9309      	str	r3, [sp, #36]	; 0x24
 80023f2:	783b      	ldrb	r3, [r7, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	f000 809c 	beq.w	8002532 <_svfiprintf_r+0x1b2>
 80023fa:	2300      	movs	r3, #0
 80023fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002400:	9304      	str	r3, [sp, #16]
 8002402:	9307      	str	r3, [sp, #28]
 8002404:	9205      	str	r2, [sp, #20]
 8002406:	9306      	str	r3, [sp, #24]
 8002408:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800240c:	931a      	str	r3, [sp, #104]	; 0x68
 800240e:	2205      	movs	r2, #5
 8002410:	7821      	ldrb	r1, [r4, #0]
 8002412:	4850      	ldr	r0, [pc, #320]	; (8002554 <_svfiprintf_r+0x1d4>)
 8002414:	f7fd fee4 	bl	80001e0 <memchr>
 8002418:	1c67      	adds	r7, r4, #1
 800241a:	9b04      	ldr	r3, [sp, #16]
 800241c:	b9d8      	cbnz	r0, 8002456 <_svfiprintf_r+0xd6>
 800241e:	06d9      	lsls	r1, r3, #27
 8002420:	bf44      	itt	mi
 8002422:	2220      	movmi	r2, #32
 8002424:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002428:	071a      	lsls	r2, r3, #28
 800242a:	bf44      	itt	mi
 800242c:	222b      	movmi	r2, #43	; 0x2b
 800242e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002432:	7822      	ldrb	r2, [r4, #0]
 8002434:	2a2a      	cmp	r2, #42	; 0x2a
 8002436:	d016      	beq.n	8002466 <_svfiprintf_r+0xe6>
 8002438:	9a07      	ldr	r2, [sp, #28]
 800243a:	2100      	movs	r1, #0
 800243c:	200a      	movs	r0, #10
 800243e:	4627      	mov	r7, r4
 8002440:	3401      	adds	r4, #1
 8002442:	783b      	ldrb	r3, [r7, #0]
 8002444:	3b30      	subs	r3, #48	; 0x30
 8002446:	2b09      	cmp	r3, #9
 8002448:	d951      	bls.n	80024ee <_svfiprintf_r+0x16e>
 800244a:	b1c9      	cbz	r1, 8002480 <_svfiprintf_r+0x100>
 800244c:	e011      	b.n	8002472 <_svfiprintf_r+0xf2>
 800244e:	2b25      	cmp	r3, #37	; 0x25
 8002450:	d0c0      	beq.n	80023d4 <_svfiprintf_r+0x54>
 8002452:	4627      	mov	r7, r4
 8002454:	e7b9      	b.n	80023ca <_svfiprintf_r+0x4a>
 8002456:	4a3f      	ldr	r2, [pc, #252]	; (8002554 <_svfiprintf_r+0x1d4>)
 8002458:	1a80      	subs	r0, r0, r2
 800245a:	fa0b f000 	lsl.w	r0, fp, r0
 800245e:	4318      	orrs	r0, r3
 8002460:	9004      	str	r0, [sp, #16]
 8002462:	463c      	mov	r4, r7
 8002464:	e7d3      	b.n	800240e <_svfiprintf_r+0x8e>
 8002466:	9a03      	ldr	r2, [sp, #12]
 8002468:	1d11      	adds	r1, r2, #4
 800246a:	6812      	ldr	r2, [r2, #0]
 800246c:	9103      	str	r1, [sp, #12]
 800246e:	2a00      	cmp	r2, #0
 8002470:	db01      	blt.n	8002476 <_svfiprintf_r+0xf6>
 8002472:	9207      	str	r2, [sp, #28]
 8002474:	e004      	b.n	8002480 <_svfiprintf_r+0x100>
 8002476:	4252      	negs	r2, r2
 8002478:	f043 0302 	orr.w	r3, r3, #2
 800247c:	9207      	str	r2, [sp, #28]
 800247e:	9304      	str	r3, [sp, #16]
 8002480:	783b      	ldrb	r3, [r7, #0]
 8002482:	2b2e      	cmp	r3, #46	; 0x2e
 8002484:	d10e      	bne.n	80024a4 <_svfiprintf_r+0x124>
 8002486:	787b      	ldrb	r3, [r7, #1]
 8002488:	2b2a      	cmp	r3, #42	; 0x2a
 800248a:	f107 0101 	add.w	r1, r7, #1
 800248e:	d132      	bne.n	80024f6 <_svfiprintf_r+0x176>
 8002490:	9b03      	ldr	r3, [sp, #12]
 8002492:	1d1a      	adds	r2, r3, #4
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	9203      	str	r2, [sp, #12]
 8002498:	2b00      	cmp	r3, #0
 800249a:	bfb8      	it	lt
 800249c:	f04f 33ff 	movlt.w	r3, #4294967295
 80024a0:	3702      	adds	r7, #2
 80024a2:	9305      	str	r3, [sp, #20]
 80024a4:	4c2c      	ldr	r4, [pc, #176]	; (8002558 <_svfiprintf_r+0x1d8>)
 80024a6:	7839      	ldrb	r1, [r7, #0]
 80024a8:	2203      	movs	r2, #3
 80024aa:	4620      	mov	r0, r4
 80024ac:	f7fd fe98 	bl	80001e0 <memchr>
 80024b0:	b138      	cbz	r0, 80024c2 <_svfiprintf_r+0x142>
 80024b2:	2340      	movs	r3, #64	; 0x40
 80024b4:	1b00      	subs	r0, r0, r4
 80024b6:	fa03 f000 	lsl.w	r0, r3, r0
 80024ba:	9b04      	ldr	r3, [sp, #16]
 80024bc:	4303      	orrs	r3, r0
 80024be:	9304      	str	r3, [sp, #16]
 80024c0:	3701      	adds	r7, #1
 80024c2:	7839      	ldrb	r1, [r7, #0]
 80024c4:	4825      	ldr	r0, [pc, #148]	; (800255c <_svfiprintf_r+0x1dc>)
 80024c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80024ca:	2206      	movs	r2, #6
 80024cc:	1c7e      	adds	r6, r7, #1
 80024ce:	f7fd fe87 	bl	80001e0 <memchr>
 80024d2:	2800      	cmp	r0, #0
 80024d4:	d035      	beq.n	8002542 <_svfiprintf_r+0x1c2>
 80024d6:	4b22      	ldr	r3, [pc, #136]	; (8002560 <_svfiprintf_r+0x1e0>)
 80024d8:	b9fb      	cbnz	r3, 800251a <_svfiprintf_r+0x19a>
 80024da:	9b03      	ldr	r3, [sp, #12]
 80024dc:	3307      	adds	r3, #7
 80024de:	f023 0307 	bic.w	r3, r3, #7
 80024e2:	3308      	adds	r3, #8
 80024e4:	9303      	str	r3, [sp, #12]
 80024e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80024e8:	444b      	add	r3, r9
 80024ea:	9309      	str	r3, [sp, #36]	; 0x24
 80024ec:	e76c      	b.n	80023c8 <_svfiprintf_r+0x48>
 80024ee:	fb00 3202 	mla	r2, r0, r2, r3
 80024f2:	2101      	movs	r1, #1
 80024f4:	e7a3      	b.n	800243e <_svfiprintf_r+0xbe>
 80024f6:	2300      	movs	r3, #0
 80024f8:	9305      	str	r3, [sp, #20]
 80024fa:	4618      	mov	r0, r3
 80024fc:	240a      	movs	r4, #10
 80024fe:	460f      	mov	r7, r1
 8002500:	3101      	adds	r1, #1
 8002502:	783a      	ldrb	r2, [r7, #0]
 8002504:	3a30      	subs	r2, #48	; 0x30
 8002506:	2a09      	cmp	r2, #9
 8002508:	d903      	bls.n	8002512 <_svfiprintf_r+0x192>
 800250a:	2b00      	cmp	r3, #0
 800250c:	d0ca      	beq.n	80024a4 <_svfiprintf_r+0x124>
 800250e:	9005      	str	r0, [sp, #20]
 8002510:	e7c8      	b.n	80024a4 <_svfiprintf_r+0x124>
 8002512:	fb04 2000 	mla	r0, r4, r0, r2
 8002516:	2301      	movs	r3, #1
 8002518:	e7f1      	b.n	80024fe <_svfiprintf_r+0x17e>
 800251a:	ab03      	add	r3, sp, #12
 800251c:	9300      	str	r3, [sp, #0]
 800251e:	462a      	mov	r2, r5
 8002520:	4b10      	ldr	r3, [pc, #64]	; (8002564 <_svfiprintf_r+0x1e4>)
 8002522:	a904      	add	r1, sp, #16
 8002524:	4640      	mov	r0, r8
 8002526:	f3af 8000 	nop.w
 800252a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800252e:	4681      	mov	r9, r0
 8002530:	d1d9      	bne.n	80024e6 <_svfiprintf_r+0x166>
 8002532:	89ab      	ldrh	r3, [r5, #12]
 8002534:	065b      	lsls	r3, r3, #25
 8002536:	f53f af38 	bmi.w	80023aa <_svfiprintf_r+0x2a>
 800253a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800253c:	b01d      	add	sp, #116	; 0x74
 800253e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002542:	ab03      	add	r3, sp, #12
 8002544:	9300      	str	r3, [sp, #0]
 8002546:	462a      	mov	r2, r5
 8002548:	4b06      	ldr	r3, [pc, #24]	; (8002564 <_svfiprintf_r+0x1e4>)
 800254a:	a904      	add	r1, sp, #16
 800254c:	4640      	mov	r0, r8
 800254e:	f000 f881 	bl	8002654 <_printf_i>
 8002552:	e7ea      	b.n	800252a <_svfiprintf_r+0x1aa>
 8002554:	08003c32 	.word	0x08003c32
 8002558:	08003c38 	.word	0x08003c38
 800255c:	08003c3c 	.word	0x08003c3c
 8002560:	00000000 	.word	0x00000000
 8002564:	080022c9 	.word	0x080022c9

08002568 <_printf_common>:
 8002568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800256c:	4691      	mov	r9, r2
 800256e:	461f      	mov	r7, r3
 8002570:	688a      	ldr	r2, [r1, #8]
 8002572:	690b      	ldr	r3, [r1, #16]
 8002574:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002578:	4293      	cmp	r3, r2
 800257a:	bfb8      	it	lt
 800257c:	4613      	movlt	r3, r2
 800257e:	f8c9 3000 	str.w	r3, [r9]
 8002582:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002586:	4606      	mov	r6, r0
 8002588:	460c      	mov	r4, r1
 800258a:	b112      	cbz	r2, 8002592 <_printf_common+0x2a>
 800258c:	3301      	adds	r3, #1
 800258e:	f8c9 3000 	str.w	r3, [r9]
 8002592:	6823      	ldr	r3, [r4, #0]
 8002594:	0699      	lsls	r1, r3, #26
 8002596:	bf42      	ittt	mi
 8002598:	f8d9 3000 	ldrmi.w	r3, [r9]
 800259c:	3302      	addmi	r3, #2
 800259e:	f8c9 3000 	strmi.w	r3, [r9]
 80025a2:	6825      	ldr	r5, [r4, #0]
 80025a4:	f015 0506 	ands.w	r5, r5, #6
 80025a8:	d107      	bne.n	80025ba <_printf_common+0x52>
 80025aa:	f104 0a19 	add.w	sl, r4, #25
 80025ae:	68e3      	ldr	r3, [r4, #12]
 80025b0:	f8d9 2000 	ldr.w	r2, [r9]
 80025b4:	1a9b      	subs	r3, r3, r2
 80025b6:	429d      	cmp	r5, r3
 80025b8:	db29      	blt.n	800260e <_printf_common+0xa6>
 80025ba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80025be:	6822      	ldr	r2, [r4, #0]
 80025c0:	3300      	adds	r3, #0
 80025c2:	bf18      	it	ne
 80025c4:	2301      	movne	r3, #1
 80025c6:	0692      	lsls	r2, r2, #26
 80025c8:	d42e      	bmi.n	8002628 <_printf_common+0xc0>
 80025ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80025ce:	4639      	mov	r1, r7
 80025d0:	4630      	mov	r0, r6
 80025d2:	47c0      	blx	r8
 80025d4:	3001      	adds	r0, #1
 80025d6:	d021      	beq.n	800261c <_printf_common+0xb4>
 80025d8:	6823      	ldr	r3, [r4, #0]
 80025da:	68e5      	ldr	r5, [r4, #12]
 80025dc:	f8d9 2000 	ldr.w	r2, [r9]
 80025e0:	f003 0306 	and.w	r3, r3, #6
 80025e4:	2b04      	cmp	r3, #4
 80025e6:	bf08      	it	eq
 80025e8:	1aad      	subeq	r5, r5, r2
 80025ea:	68a3      	ldr	r3, [r4, #8]
 80025ec:	6922      	ldr	r2, [r4, #16]
 80025ee:	bf0c      	ite	eq
 80025f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80025f4:	2500      	movne	r5, #0
 80025f6:	4293      	cmp	r3, r2
 80025f8:	bfc4      	itt	gt
 80025fa:	1a9b      	subgt	r3, r3, r2
 80025fc:	18ed      	addgt	r5, r5, r3
 80025fe:	f04f 0900 	mov.w	r9, #0
 8002602:	341a      	adds	r4, #26
 8002604:	454d      	cmp	r5, r9
 8002606:	d11b      	bne.n	8002640 <_printf_common+0xd8>
 8002608:	2000      	movs	r0, #0
 800260a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800260e:	2301      	movs	r3, #1
 8002610:	4652      	mov	r2, sl
 8002612:	4639      	mov	r1, r7
 8002614:	4630      	mov	r0, r6
 8002616:	47c0      	blx	r8
 8002618:	3001      	adds	r0, #1
 800261a:	d103      	bne.n	8002624 <_printf_common+0xbc>
 800261c:	f04f 30ff 	mov.w	r0, #4294967295
 8002620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002624:	3501      	adds	r5, #1
 8002626:	e7c2      	b.n	80025ae <_printf_common+0x46>
 8002628:	18e1      	adds	r1, r4, r3
 800262a:	1c5a      	adds	r2, r3, #1
 800262c:	2030      	movs	r0, #48	; 0x30
 800262e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002632:	4422      	add	r2, r4
 8002634:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002638:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800263c:	3302      	adds	r3, #2
 800263e:	e7c4      	b.n	80025ca <_printf_common+0x62>
 8002640:	2301      	movs	r3, #1
 8002642:	4622      	mov	r2, r4
 8002644:	4639      	mov	r1, r7
 8002646:	4630      	mov	r0, r6
 8002648:	47c0      	blx	r8
 800264a:	3001      	adds	r0, #1
 800264c:	d0e6      	beq.n	800261c <_printf_common+0xb4>
 800264e:	f109 0901 	add.w	r9, r9, #1
 8002652:	e7d7      	b.n	8002604 <_printf_common+0x9c>

08002654 <_printf_i>:
 8002654:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002658:	4617      	mov	r7, r2
 800265a:	7e0a      	ldrb	r2, [r1, #24]
 800265c:	b085      	sub	sp, #20
 800265e:	2a6e      	cmp	r2, #110	; 0x6e
 8002660:	4698      	mov	r8, r3
 8002662:	4606      	mov	r6, r0
 8002664:	460c      	mov	r4, r1
 8002666:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002668:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800266c:	f000 80bc 	beq.w	80027e8 <_printf_i+0x194>
 8002670:	d81a      	bhi.n	80026a8 <_printf_i+0x54>
 8002672:	2a63      	cmp	r2, #99	; 0x63
 8002674:	d02e      	beq.n	80026d4 <_printf_i+0x80>
 8002676:	d80a      	bhi.n	800268e <_printf_i+0x3a>
 8002678:	2a00      	cmp	r2, #0
 800267a:	f000 80c8 	beq.w	800280e <_printf_i+0x1ba>
 800267e:	2a58      	cmp	r2, #88	; 0x58
 8002680:	f000 808a 	beq.w	8002798 <_printf_i+0x144>
 8002684:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002688:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800268c:	e02a      	b.n	80026e4 <_printf_i+0x90>
 800268e:	2a64      	cmp	r2, #100	; 0x64
 8002690:	d001      	beq.n	8002696 <_printf_i+0x42>
 8002692:	2a69      	cmp	r2, #105	; 0x69
 8002694:	d1f6      	bne.n	8002684 <_printf_i+0x30>
 8002696:	6821      	ldr	r1, [r4, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800269e:	d023      	beq.n	80026e8 <_printf_i+0x94>
 80026a0:	1d11      	adds	r1, r2, #4
 80026a2:	6019      	str	r1, [r3, #0]
 80026a4:	6813      	ldr	r3, [r2, #0]
 80026a6:	e027      	b.n	80026f8 <_printf_i+0xa4>
 80026a8:	2a73      	cmp	r2, #115	; 0x73
 80026aa:	f000 80b4 	beq.w	8002816 <_printf_i+0x1c2>
 80026ae:	d808      	bhi.n	80026c2 <_printf_i+0x6e>
 80026b0:	2a6f      	cmp	r2, #111	; 0x6f
 80026b2:	d02a      	beq.n	800270a <_printf_i+0xb6>
 80026b4:	2a70      	cmp	r2, #112	; 0x70
 80026b6:	d1e5      	bne.n	8002684 <_printf_i+0x30>
 80026b8:	680a      	ldr	r2, [r1, #0]
 80026ba:	f042 0220 	orr.w	r2, r2, #32
 80026be:	600a      	str	r2, [r1, #0]
 80026c0:	e003      	b.n	80026ca <_printf_i+0x76>
 80026c2:	2a75      	cmp	r2, #117	; 0x75
 80026c4:	d021      	beq.n	800270a <_printf_i+0xb6>
 80026c6:	2a78      	cmp	r2, #120	; 0x78
 80026c8:	d1dc      	bne.n	8002684 <_printf_i+0x30>
 80026ca:	2278      	movs	r2, #120	; 0x78
 80026cc:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80026d0:	496e      	ldr	r1, [pc, #440]	; (800288c <_printf_i+0x238>)
 80026d2:	e064      	b.n	800279e <_printf_i+0x14a>
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80026da:	1d11      	adds	r1, r2, #4
 80026dc:	6019      	str	r1, [r3, #0]
 80026de:	6813      	ldr	r3, [r2, #0]
 80026e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80026e4:	2301      	movs	r3, #1
 80026e6:	e0a3      	b.n	8002830 <_printf_i+0x1dc>
 80026e8:	f011 0f40 	tst.w	r1, #64	; 0x40
 80026ec:	f102 0104 	add.w	r1, r2, #4
 80026f0:	6019      	str	r1, [r3, #0]
 80026f2:	d0d7      	beq.n	80026a4 <_printf_i+0x50>
 80026f4:	f9b2 3000 	ldrsh.w	r3, [r2]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	da03      	bge.n	8002704 <_printf_i+0xb0>
 80026fc:	222d      	movs	r2, #45	; 0x2d
 80026fe:	425b      	negs	r3, r3
 8002700:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002704:	4962      	ldr	r1, [pc, #392]	; (8002890 <_printf_i+0x23c>)
 8002706:	220a      	movs	r2, #10
 8002708:	e017      	b.n	800273a <_printf_i+0xe6>
 800270a:	6820      	ldr	r0, [r4, #0]
 800270c:	6819      	ldr	r1, [r3, #0]
 800270e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002712:	d003      	beq.n	800271c <_printf_i+0xc8>
 8002714:	1d08      	adds	r0, r1, #4
 8002716:	6018      	str	r0, [r3, #0]
 8002718:	680b      	ldr	r3, [r1, #0]
 800271a:	e006      	b.n	800272a <_printf_i+0xd6>
 800271c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002720:	f101 0004 	add.w	r0, r1, #4
 8002724:	6018      	str	r0, [r3, #0]
 8002726:	d0f7      	beq.n	8002718 <_printf_i+0xc4>
 8002728:	880b      	ldrh	r3, [r1, #0]
 800272a:	4959      	ldr	r1, [pc, #356]	; (8002890 <_printf_i+0x23c>)
 800272c:	2a6f      	cmp	r2, #111	; 0x6f
 800272e:	bf14      	ite	ne
 8002730:	220a      	movne	r2, #10
 8002732:	2208      	moveq	r2, #8
 8002734:	2000      	movs	r0, #0
 8002736:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800273a:	6865      	ldr	r5, [r4, #4]
 800273c:	60a5      	str	r5, [r4, #8]
 800273e:	2d00      	cmp	r5, #0
 8002740:	f2c0 809c 	blt.w	800287c <_printf_i+0x228>
 8002744:	6820      	ldr	r0, [r4, #0]
 8002746:	f020 0004 	bic.w	r0, r0, #4
 800274a:	6020      	str	r0, [r4, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d13f      	bne.n	80027d0 <_printf_i+0x17c>
 8002750:	2d00      	cmp	r5, #0
 8002752:	f040 8095 	bne.w	8002880 <_printf_i+0x22c>
 8002756:	4675      	mov	r5, lr
 8002758:	2a08      	cmp	r2, #8
 800275a:	d10b      	bne.n	8002774 <_printf_i+0x120>
 800275c:	6823      	ldr	r3, [r4, #0]
 800275e:	07da      	lsls	r2, r3, #31
 8002760:	d508      	bpl.n	8002774 <_printf_i+0x120>
 8002762:	6923      	ldr	r3, [r4, #16]
 8002764:	6862      	ldr	r2, [r4, #4]
 8002766:	429a      	cmp	r2, r3
 8002768:	bfde      	ittt	le
 800276a:	2330      	movle	r3, #48	; 0x30
 800276c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002770:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002774:	ebae 0305 	sub.w	r3, lr, r5
 8002778:	6123      	str	r3, [r4, #16]
 800277a:	f8cd 8000 	str.w	r8, [sp]
 800277e:	463b      	mov	r3, r7
 8002780:	aa03      	add	r2, sp, #12
 8002782:	4621      	mov	r1, r4
 8002784:	4630      	mov	r0, r6
 8002786:	f7ff feef 	bl	8002568 <_printf_common>
 800278a:	3001      	adds	r0, #1
 800278c:	d155      	bne.n	800283a <_printf_i+0x1e6>
 800278e:	f04f 30ff 	mov.w	r0, #4294967295
 8002792:	b005      	add	sp, #20
 8002794:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002798:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800279c:	493c      	ldr	r1, [pc, #240]	; (8002890 <_printf_i+0x23c>)
 800279e:	6822      	ldr	r2, [r4, #0]
 80027a0:	6818      	ldr	r0, [r3, #0]
 80027a2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80027a6:	f100 0504 	add.w	r5, r0, #4
 80027aa:	601d      	str	r5, [r3, #0]
 80027ac:	d001      	beq.n	80027b2 <_printf_i+0x15e>
 80027ae:	6803      	ldr	r3, [r0, #0]
 80027b0:	e002      	b.n	80027b8 <_printf_i+0x164>
 80027b2:	0655      	lsls	r5, r2, #25
 80027b4:	d5fb      	bpl.n	80027ae <_printf_i+0x15a>
 80027b6:	8803      	ldrh	r3, [r0, #0]
 80027b8:	07d0      	lsls	r0, r2, #31
 80027ba:	bf44      	itt	mi
 80027bc:	f042 0220 	orrmi.w	r2, r2, #32
 80027c0:	6022      	strmi	r2, [r4, #0]
 80027c2:	b91b      	cbnz	r3, 80027cc <_printf_i+0x178>
 80027c4:	6822      	ldr	r2, [r4, #0]
 80027c6:	f022 0220 	bic.w	r2, r2, #32
 80027ca:	6022      	str	r2, [r4, #0]
 80027cc:	2210      	movs	r2, #16
 80027ce:	e7b1      	b.n	8002734 <_printf_i+0xe0>
 80027d0:	4675      	mov	r5, lr
 80027d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80027d6:	fb02 3310 	mls	r3, r2, r0, r3
 80027da:	5ccb      	ldrb	r3, [r1, r3]
 80027dc:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80027e0:	4603      	mov	r3, r0
 80027e2:	2800      	cmp	r0, #0
 80027e4:	d1f5      	bne.n	80027d2 <_printf_i+0x17e>
 80027e6:	e7b7      	b.n	8002758 <_printf_i+0x104>
 80027e8:	6808      	ldr	r0, [r1, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	6949      	ldr	r1, [r1, #20]
 80027ee:	f010 0f80 	tst.w	r0, #128	; 0x80
 80027f2:	d004      	beq.n	80027fe <_printf_i+0x1aa>
 80027f4:	1d10      	adds	r0, r2, #4
 80027f6:	6018      	str	r0, [r3, #0]
 80027f8:	6813      	ldr	r3, [r2, #0]
 80027fa:	6019      	str	r1, [r3, #0]
 80027fc:	e007      	b.n	800280e <_printf_i+0x1ba>
 80027fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002802:	f102 0004 	add.w	r0, r2, #4
 8002806:	6018      	str	r0, [r3, #0]
 8002808:	6813      	ldr	r3, [r2, #0]
 800280a:	d0f6      	beq.n	80027fa <_printf_i+0x1a6>
 800280c:	8019      	strh	r1, [r3, #0]
 800280e:	2300      	movs	r3, #0
 8002810:	6123      	str	r3, [r4, #16]
 8002812:	4675      	mov	r5, lr
 8002814:	e7b1      	b.n	800277a <_printf_i+0x126>
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	1d11      	adds	r1, r2, #4
 800281a:	6019      	str	r1, [r3, #0]
 800281c:	6815      	ldr	r5, [r2, #0]
 800281e:	6862      	ldr	r2, [r4, #4]
 8002820:	2100      	movs	r1, #0
 8002822:	4628      	mov	r0, r5
 8002824:	f7fd fcdc 	bl	80001e0 <memchr>
 8002828:	b108      	cbz	r0, 800282e <_printf_i+0x1da>
 800282a:	1b40      	subs	r0, r0, r5
 800282c:	6060      	str	r0, [r4, #4]
 800282e:	6863      	ldr	r3, [r4, #4]
 8002830:	6123      	str	r3, [r4, #16]
 8002832:	2300      	movs	r3, #0
 8002834:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002838:	e79f      	b.n	800277a <_printf_i+0x126>
 800283a:	6923      	ldr	r3, [r4, #16]
 800283c:	462a      	mov	r2, r5
 800283e:	4639      	mov	r1, r7
 8002840:	4630      	mov	r0, r6
 8002842:	47c0      	blx	r8
 8002844:	3001      	adds	r0, #1
 8002846:	d0a2      	beq.n	800278e <_printf_i+0x13a>
 8002848:	6823      	ldr	r3, [r4, #0]
 800284a:	079b      	lsls	r3, r3, #30
 800284c:	d507      	bpl.n	800285e <_printf_i+0x20a>
 800284e:	2500      	movs	r5, #0
 8002850:	f104 0919 	add.w	r9, r4, #25
 8002854:	68e3      	ldr	r3, [r4, #12]
 8002856:	9a03      	ldr	r2, [sp, #12]
 8002858:	1a9b      	subs	r3, r3, r2
 800285a:	429d      	cmp	r5, r3
 800285c:	db05      	blt.n	800286a <_printf_i+0x216>
 800285e:	68e0      	ldr	r0, [r4, #12]
 8002860:	9b03      	ldr	r3, [sp, #12]
 8002862:	4298      	cmp	r0, r3
 8002864:	bfb8      	it	lt
 8002866:	4618      	movlt	r0, r3
 8002868:	e793      	b.n	8002792 <_printf_i+0x13e>
 800286a:	2301      	movs	r3, #1
 800286c:	464a      	mov	r2, r9
 800286e:	4639      	mov	r1, r7
 8002870:	4630      	mov	r0, r6
 8002872:	47c0      	blx	r8
 8002874:	3001      	adds	r0, #1
 8002876:	d08a      	beq.n	800278e <_printf_i+0x13a>
 8002878:	3501      	adds	r5, #1
 800287a:	e7eb      	b.n	8002854 <_printf_i+0x200>
 800287c:	2b00      	cmp	r3, #0
 800287e:	d1a7      	bne.n	80027d0 <_printf_i+0x17c>
 8002880:	780b      	ldrb	r3, [r1, #0]
 8002882:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002886:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800288a:	e765      	b.n	8002758 <_printf_i+0x104>
 800288c:	08003c54 	.word	0x08003c54
 8002890:	08003c43 	.word	0x08003c43

08002894 <memcpy>:
 8002894:	b510      	push	{r4, lr}
 8002896:	1e43      	subs	r3, r0, #1
 8002898:	440a      	add	r2, r1
 800289a:	4291      	cmp	r1, r2
 800289c:	d100      	bne.n	80028a0 <memcpy+0xc>
 800289e:	bd10      	pop	{r4, pc}
 80028a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80028a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80028a8:	e7f7      	b.n	800289a <memcpy+0x6>

080028aa <memmove>:
 80028aa:	4288      	cmp	r0, r1
 80028ac:	b510      	push	{r4, lr}
 80028ae:	eb01 0302 	add.w	r3, r1, r2
 80028b2:	d803      	bhi.n	80028bc <memmove+0x12>
 80028b4:	1e42      	subs	r2, r0, #1
 80028b6:	4299      	cmp	r1, r3
 80028b8:	d10c      	bne.n	80028d4 <memmove+0x2a>
 80028ba:	bd10      	pop	{r4, pc}
 80028bc:	4298      	cmp	r0, r3
 80028be:	d2f9      	bcs.n	80028b4 <memmove+0xa>
 80028c0:	1881      	adds	r1, r0, r2
 80028c2:	1ad2      	subs	r2, r2, r3
 80028c4:	42d3      	cmn	r3, r2
 80028c6:	d100      	bne.n	80028ca <memmove+0x20>
 80028c8:	bd10      	pop	{r4, pc}
 80028ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80028ce:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80028d2:	e7f7      	b.n	80028c4 <memmove+0x1a>
 80028d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80028d8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80028dc:	e7eb      	b.n	80028b6 <memmove+0xc>
	...

080028e0 <_free_r>:
 80028e0:	b538      	push	{r3, r4, r5, lr}
 80028e2:	4605      	mov	r5, r0
 80028e4:	2900      	cmp	r1, #0
 80028e6:	d045      	beq.n	8002974 <_free_r+0x94>
 80028e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80028ec:	1f0c      	subs	r4, r1, #4
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	bfb8      	it	lt
 80028f2:	18e4      	addlt	r4, r4, r3
 80028f4:	f000 f8d6 	bl	8002aa4 <__malloc_lock>
 80028f8:	4a1f      	ldr	r2, [pc, #124]	; (8002978 <_free_r+0x98>)
 80028fa:	6813      	ldr	r3, [r2, #0]
 80028fc:	4610      	mov	r0, r2
 80028fe:	b933      	cbnz	r3, 800290e <_free_r+0x2e>
 8002900:	6063      	str	r3, [r4, #4]
 8002902:	6014      	str	r4, [r2, #0]
 8002904:	4628      	mov	r0, r5
 8002906:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800290a:	f000 b8cc 	b.w	8002aa6 <__malloc_unlock>
 800290e:	42a3      	cmp	r3, r4
 8002910:	d90c      	bls.n	800292c <_free_r+0x4c>
 8002912:	6821      	ldr	r1, [r4, #0]
 8002914:	1862      	adds	r2, r4, r1
 8002916:	4293      	cmp	r3, r2
 8002918:	bf04      	itt	eq
 800291a:	681a      	ldreq	r2, [r3, #0]
 800291c:	685b      	ldreq	r3, [r3, #4]
 800291e:	6063      	str	r3, [r4, #4]
 8002920:	bf04      	itt	eq
 8002922:	1852      	addeq	r2, r2, r1
 8002924:	6022      	streq	r2, [r4, #0]
 8002926:	6004      	str	r4, [r0, #0]
 8002928:	e7ec      	b.n	8002904 <_free_r+0x24>
 800292a:	4613      	mov	r3, r2
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	b10a      	cbz	r2, 8002934 <_free_r+0x54>
 8002930:	42a2      	cmp	r2, r4
 8002932:	d9fa      	bls.n	800292a <_free_r+0x4a>
 8002934:	6819      	ldr	r1, [r3, #0]
 8002936:	1858      	adds	r0, r3, r1
 8002938:	42a0      	cmp	r0, r4
 800293a:	d10b      	bne.n	8002954 <_free_r+0x74>
 800293c:	6820      	ldr	r0, [r4, #0]
 800293e:	4401      	add	r1, r0
 8002940:	1858      	adds	r0, r3, r1
 8002942:	4282      	cmp	r2, r0
 8002944:	6019      	str	r1, [r3, #0]
 8002946:	d1dd      	bne.n	8002904 <_free_r+0x24>
 8002948:	6810      	ldr	r0, [r2, #0]
 800294a:	6852      	ldr	r2, [r2, #4]
 800294c:	605a      	str	r2, [r3, #4]
 800294e:	4401      	add	r1, r0
 8002950:	6019      	str	r1, [r3, #0]
 8002952:	e7d7      	b.n	8002904 <_free_r+0x24>
 8002954:	d902      	bls.n	800295c <_free_r+0x7c>
 8002956:	230c      	movs	r3, #12
 8002958:	602b      	str	r3, [r5, #0]
 800295a:	e7d3      	b.n	8002904 <_free_r+0x24>
 800295c:	6820      	ldr	r0, [r4, #0]
 800295e:	1821      	adds	r1, r4, r0
 8002960:	428a      	cmp	r2, r1
 8002962:	bf04      	itt	eq
 8002964:	6811      	ldreq	r1, [r2, #0]
 8002966:	6852      	ldreq	r2, [r2, #4]
 8002968:	6062      	str	r2, [r4, #4]
 800296a:	bf04      	itt	eq
 800296c:	1809      	addeq	r1, r1, r0
 800296e:	6021      	streq	r1, [r4, #0]
 8002970:	605c      	str	r4, [r3, #4]
 8002972:	e7c7      	b.n	8002904 <_free_r+0x24>
 8002974:	bd38      	pop	{r3, r4, r5, pc}
 8002976:	bf00      	nop
 8002978:	20000098 	.word	0x20000098

0800297c <_malloc_r>:
 800297c:	b570      	push	{r4, r5, r6, lr}
 800297e:	1ccd      	adds	r5, r1, #3
 8002980:	f025 0503 	bic.w	r5, r5, #3
 8002984:	3508      	adds	r5, #8
 8002986:	2d0c      	cmp	r5, #12
 8002988:	bf38      	it	cc
 800298a:	250c      	movcc	r5, #12
 800298c:	2d00      	cmp	r5, #0
 800298e:	4606      	mov	r6, r0
 8002990:	db01      	blt.n	8002996 <_malloc_r+0x1a>
 8002992:	42a9      	cmp	r1, r5
 8002994:	d903      	bls.n	800299e <_malloc_r+0x22>
 8002996:	230c      	movs	r3, #12
 8002998:	6033      	str	r3, [r6, #0]
 800299a:	2000      	movs	r0, #0
 800299c:	bd70      	pop	{r4, r5, r6, pc}
 800299e:	f000 f881 	bl	8002aa4 <__malloc_lock>
 80029a2:	4a23      	ldr	r2, [pc, #140]	; (8002a30 <_malloc_r+0xb4>)
 80029a4:	6814      	ldr	r4, [r2, #0]
 80029a6:	4621      	mov	r1, r4
 80029a8:	b991      	cbnz	r1, 80029d0 <_malloc_r+0x54>
 80029aa:	4c22      	ldr	r4, [pc, #136]	; (8002a34 <_malloc_r+0xb8>)
 80029ac:	6823      	ldr	r3, [r4, #0]
 80029ae:	b91b      	cbnz	r3, 80029b8 <_malloc_r+0x3c>
 80029b0:	4630      	mov	r0, r6
 80029b2:	f000 f867 	bl	8002a84 <_sbrk_r>
 80029b6:	6020      	str	r0, [r4, #0]
 80029b8:	4629      	mov	r1, r5
 80029ba:	4630      	mov	r0, r6
 80029bc:	f000 f862 	bl	8002a84 <_sbrk_r>
 80029c0:	1c43      	adds	r3, r0, #1
 80029c2:	d126      	bne.n	8002a12 <_malloc_r+0x96>
 80029c4:	230c      	movs	r3, #12
 80029c6:	6033      	str	r3, [r6, #0]
 80029c8:	4630      	mov	r0, r6
 80029ca:	f000 f86c 	bl	8002aa6 <__malloc_unlock>
 80029ce:	e7e4      	b.n	800299a <_malloc_r+0x1e>
 80029d0:	680b      	ldr	r3, [r1, #0]
 80029d2:	1b5b      	subs	r3, r3, r5
 80029d4:	d41a      	bmi.n	8002a0c <_malloc_r+0x90>
 80029d6:	2b0b      	cmp	r3, #11
 80029d8:	d90f      	bls.n	80029fa <_malloc_r+0x7e>
 80029da:	600b      	str	r3, [r1, #0]
 80029dc:	50cd      	str	r5, [r1, r3]
 80029de:	18cc      	adds	r4, r1, r3
 80029e0:	4630      	mov	r0, r6
 80029e2:	f000 f860 	bl	8002aa6 <__malloc_unlock>
 80029e6:	f104 000b 	add.w	r0, r4, #11
 80029ea:	1d23      	adds	r3, r4, #4
 80029ec:	f020 0007 	bic.w	r0, r0, #7
 80029f0:	1ac3      	subs	r3, r0, r3
 80029f2:	d01b      	beq.n	8002a2c <_malloc_r+0xb0>
 80029f4:	425a      	negs	r2, r3
 80029f6:	50e2      	str	r2, [r4, r3]
 80029f8:	bd70      	pop	{r4, r5, r6, pc}
 80029fa:	428c      	cmp	r4, r1
 80029fc:	bf0d      	iteet	eq
 80029fe:	6863      	ldreq	r3, [r4, #4]
 8002a00:	684b      	ldrne	r3, [r1, #4]
 8002a02:	6063      	strne	r3, [r4, #4]
 8002a04:	6013      	streq	r3, [r2, #0]
 8002a06:	bf18      	it	ne
 8002a08:	460c      	movne	r4, r1
 8002a0a:	e7e9      	b.n	80029e0 <_malloc_r+0x64>
 8002a0c:	460c      	mov	r4, r1
 8002a0e:	6849      	ldr	r1, [r1, #4]
 8002a10:	e7ca      	b.n	80029a8 <_malloc_r+0x2c>
 8002a12:	1cc4      	adds	r4, r0, #3
 8002a14:	f024 0403 	bic.w	r4, r4, #3
 8002a18:	42a0      	cmp	r0, r4
 8002a1a:	d005      	beq.n	8002a28 <_malloc_r+0xac>
 8002a1c:	1a21      	subs	r1, r4, r0
 8002a1e:	4630      	mov	r0, r6
 8002a20:	f000 f830 	bl	8002a84 <_sbrk_r>
 8002a24:	3001      	adds	r0, #1
 8002a26:	d0cd      	beq.n	80029c4 <_malloc_r+0x48>
 8002a28:	6025      	str	r5, [r4, #0]
 8002a2a:	e7d9      	b.n	80029e0 <_malloc_r+0x64>
 8002a2c:	bd70      	pop	{r4, r5, r6, pc}
 8002a2e:	bf00      	nop
 8002a30:	20000098 	.word	0x20000098
 8002a34:	2000009c 	.word	0x2000009c

08002a38 <_realloc_r>:
 8002a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a3a:	4607      	mov	r7, r0
 8002a3c:	4614      	mov	r4, r2
 8002a3e:	460e      	mov	r6, r1
 8002a40:	b921      	cbnz	r1, 8002a4c <_realloc_r+0x14>
 8002a42:	4611      	mov	r1, r2
 8002a44:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002a48:	f7ff bf98 	b.w	800297c <_malloc_r>
 8002a4c:	b922      	cbnz	r2, 8002a58 <_realloc_r+0x20>
 8002a4e:	f7ff ff47 	bl	80028e0 <_free_r>
 8002a52:	4625      	mov	r5, r4
 8002a54:	4628      	mov	r0, r5
 8002a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a58:	f000 f826 	bl	8002aa8 <_malloc_usable_size_r>
 8002a5c:	4284      	cmp	r4, r0
 8002a5e:	d90f      	bls.n	8002a80 <_realloc_r+0x48>
 8002a60:	4621      	mov	r1, r4
 8002a62:	4638      	mov	r0, r7
 8002a64:	f7ff ff8a 	bl	800297c <_malloc_r>
 8002a68:	4605      	mov	r5, r0
 8002a6a:	2800      	cmp	r0, #0
 8002a6c:	d0f2      	beq.n	8002a54 <_realloc_r+0x1c>
 8002a6e:	4631      	mov	r1, r6
 8002a70:	4622      	mov	r2, r4
 8002a72:	f7ff ff0f 	bl	8002894 <memcpy>
 8002a76:	4631      	mov	r1, r6
 8002a78:	4638      	mov	r0, r7
 8002a7a:	f7ff ff31 	bl	80028e0 <_free_r>
 8002a7e:	e7e9      	b.n	8002a54 <_realloc_r+0x1c>
 8002a80:	4635      	mov	r5, r6
 8002a82:	e7e7      	b.n	8002a54 <_realloc_r+0x1c>

08002a84 <_sbrk_r>:
 8002a84:	b538      	push	{r3, r4, r5, lr}
 8002a86:	4c06      	ldr	r4, [pc, #24]	; (8002aa0 <_sbrk_r+0x1c>)
 8002a88:	2300      	movs	r3, #0
 8002a8a:	4605      	mov	r5, r0
 8002a8c:	4608      	mov	r0, r1
 8002a8e:	6023      	str	r3, [r4, #0]
 8002a90:	f001 f89e 	bl	8003bd0 <_sbrk>
 8002a94:	1c43      	adds	r3, r0, #1
 8002a96:	d102      	bne.n	8002a9e <_sbrk_r+0x1a>
 8002a98:	6823      	ldr	r3, [r4, #0]
 8002a9a:	b103      	cbz	r3, 8002a9e <_sbrk_r+0x1a>
 8002a9c:	602b      	str	r3, [r5, #0]
 8002a9e:	bd38      	pop	{r3, r4, r5, pc}
 8002aa0:	20000168 	.word	0x20000168

08002aa4 <__malloc_lock>:
 8002aa4:	4770      	bx	lr

08002aa6 <__malloc_unlock>:
 8002aa6:	4770      	bx	lr

08002aa8 <_malloc_usable_size_r>:
 8002aa8:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8002aac:	2800      	cmp	r0, #0
 8002aae:	f1a0 0004 	sub.w	r0, r0, #4
 8002ab2:	bfbc      	itt	lt
 8002ab4:	580b      	ldrlt	r3, [r1, r0]
 8002ab6:	18c0      	addlt	r0, r0, r3
 8002ab8:	4770      	bx	lr
 8002aba:	0000      	movs	r0, r0
 8002abc:	0000      	movs	r0, r0
	...

08002ac0 <cos>:
 8002ac0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002ac2:	ec51 0b10 	vmov	r0, r1, d0
 8002ac6:	4a1e      	ldr	r2, [pc, #120]	; (8002b40 <cos+0x80>)
 8002ac8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002acc:	4293      	cmp	r3, r2
 8002ace:	dc06      	bgt.n	8002ade <cos+0x1e>
 8002ad0:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8002b38 <cos+0x78>
 8002ad4:	f000 fa74 	bl	8002fc0 <__kernel_cos>
 8002ad8:	ec51 0b10 	vmov	r0, r1, d0
 8002adc:	e007      	b.n	8002aee <cos+0x2e>
 8002ade:	4a19      	ldr	r2, [pc, #100]	; (8002b44 <cos+0x84>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	dd09      	ble.n	8002af8 <cos+0x38>
 8002ae4:	ee10 2a10 	vmov	r2, s0
 8002ae8:	460b      	mov	r3, r1
 8002aea:	f7fd fbcd 	bl	8000288 <__aeabi_dsub>
 8002aee:	ec41 0b10 	vmov	d0, r0, r1
 8002af2:	b005      	add	sp, #20
 8002af4:	f85d fb04 	ldr.w	pc, [sp], #4
 8002af8:	4668      	mov	r0, sp
 8002afa:	f000 f86d 	bl	8002bd8 <__ieee754_rem_pio2>
 8002afe:	f000 0003 	and.w	r0, r0, #3
 8002b02:	2801      	cmp	r0, #1
 8002b04:	ed9d 1b02 	vldr	d1, [sp, #8]
 8002b08:	ed9d 0b00 	vldr	d0, [sp]
 8002b0c:	d007      	beq.n	8002b1e <cos+0x5e>
 8002b0e:	2802      	cmp	r0, #2
 8002b10:	d00e      	beq.n	8002b30 <cos+0x70>
 8002b12:	2800      	cmp	r0, #0
 8002b14:	d0de      	beq.n	8002ad4 <cos+0x14>
 8002b16:	2001      	movs	r0, #1
 8002b18:	f000 fe8a 	bl	8003830 <__kernel_sin>
 8002b1c:	e7dc      	b.n	8002ad8 <cos+0x18>
 8002b1e:	f000 fe87 	bl	8003830 <__kernel_sin>
 8002b22:	ec53 2b10 	vmov	r2, r3, d0
 8002b26:	ee10 0a10 	vmov	r0, s0
 8002b2a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8002b2e:	e7de      	b.n	8002aee <cos+0x2e>
 8002b30:	f000 fa46 	bl	8002fc0 <__kernel_cos>
 8002b34:	e7f5      	b.n	8002b22 <cos+0x62>
 8002b36:	bf00      	nop
	...
 8002b40:	3fe921fb 	.word	0x3fe921fb
 8002b44:	7fefffff 	.word	0x7fefffff

08002b48 <sin>:
 8002b48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002b4a:	ec51 0b10 	vmov	r0, r1, d0
 8002b4e:	4a20      	ldr	r2, [pc, #128]	; (8002bd0 <sin+0x88>)
 8002b50:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002b54:	4293      	cmp	r3, r2
 8002b56:	dc07      	bgt.n	8002b68 <sin+0x20>
 8002b58:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8002bc8 <sin+0x80>
 8002b5c:	2000      	movs	r0, #0
 8002b5e:	f000 fe67 	bl	8003830 <__kernel_sin>
 8002b62:	ec51 0b10 	vmov	r0, r1, d0
 8002b66:	e007      	b.n	8002b78 <sin+0x30>
 8002b68:	4a1a      	ldr	r2, [pc, #104]	; (8002bd4 <sin+0x8c>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	dd09      	ble.n	8002b82 <sin+0x3a>
 8002b6e:	ee10 2a10 	vmov	r2, s0
 8002b72:	460b      	mov	r3, r1
 8002b74:	f7fd fb88 	bl	8000288 <__aeabi_dsub>
 8002b78:	ec41 0b10 	vmov	d0, r0, r1
 8002b7c:	b005      	add	sp, #20
 8002b7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002b82:	4668      	mov	r0, sp
 8002b84:	f000 f828 	bl	8002bd8 <__ieee754_rem_pio2>
 8002b88:	f000 0003 	and.w	r0, r0, #3
 8002b8c:	2801      	cmp	r0, #1
 8002b8e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8002b92:	ed9d 0b00 	vldr	d0, [sp]
 8002b96:	d004      	beq.n	8002ba2 <sin+0x5a>
 8002b98:	2802      	cmp	r0, #2
 8002b9a:	d005      	beq.n	8002ba8 <sin+0x60>
 8002b9c:	b970      	cbnz	r0, 8002bbc <sin+0x74>
 8002b9e:	2001      	movs	r0, #1
 8002ba0:	e7dd      	b.n	8002b5e <sin+0x16>
 8002ba2:	f000 fa0d 	bl	8002fc0 <__kernel_cos>
 8002ba6:	e7dc      	b.n	8002b62 <sin+0x1a>
 8002ba8:	2001      	movs	r0, #1
 8002baa:	f000 fe41 	bl	8003830 <__kernel_sin>
 8002bae:	ec53 2b10 	vmov	r2, r3, d0
 8002bb2:	ee10 0a10 	vmov	r0, s0
 8002bb6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8002bba:	e7dd      	b.n	8002b78 <sin+0x30>
 8002bbc:	f000 fa00 	bl	8002fc0 <__kernel_cos>
 8002bc0:	e7f5      	b.n	8002bae <sin+0x66>
 8002bc2:	bf00      	nop
 8002bc4:	f3af 8000 	nop.w
	...
 8002bd0:	3fe921fb 	.word	0x3fe921fb
 8002bd4:	7fefffff 	.word	0x7fefffff

08002bd8 <__ieee754_rem_pio2>:
 8002bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bdc:	ec57 6b10 	vmov	r6, r7, d0
 8002be0:	4bc3      	ldr	r3, [pc, #780]	; (8002ef0 <__ieee754_rem_pio2+0x318>)
 8002be2:	b08d      	sub	sp, #52	; 0x34
 8002be4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8002be8:	4598      	cmp	r8, r3
 8002bea:	4604      	mov	r4, r0
 8002bec:	9704      	str	r7, [sp, #16]
 8002bee:	dc07      	bgt.n	8002c00 <__ieee754_rem_pio2+0x28>
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	ed84 0b00 	vstr	d0, [r4]
 8002bf8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8002bfc:	2500      	movs	r5, #0
 8002bfe:	e027      	b.n	8002c50 <__ieee754_rem_pio2+0x78>
 8002c00:	4bbc      	ldr	r3, [pc, #752]	; (8002ef4 <__ieee754_rem_pio2+0x31c>)
 8002c02:	4598      	cmp	r8, r3
 8002c04:	dc75      	bgt.n	8002cf2 <__ieee754_rem_pio2+0x11a>
 8002c06:	9b04      	ldr	r3, [sp, #16]
 8002c08:	4dbb      	ldr	r5, [pc, #748]	; (8002ef8 <__ieee754_rem_pio2+0x320>)
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	ee10 0a10 	vmov	r0, s0
 8002c10:	a3a9      	add	r3, pc, #676	; (adr r3, 8002eb8 <__ieee754_rem_pio2+0x2e0>)
 8002c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c16:	4639      	mov	r1, r7
 8002c18:	dd36      	ble.n	8002c88 <__ieee754_rem_pio2+0xb0>
 8002c1a:	f7fd fb35 	bl	8000288 <__aeabi_dsub>
 8002c1e:	45a8      	cmp	r8, r5
 8002c20:	4606      	mov	r6, r0
 8002c22:	460f      	mov	r7, r1
 8002c24:	d018      	beq.n	8002c58 <__ieee754_rem_pio2+0x80>
 8002c26:	a3a6      	add	r3, pc, #664	; (adr r3, 8002ec0 <__ieee754_rem_pio2+0x2e8>)
 8002c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c2c:	f7fd fb2c 	bl	8000288 <__aeabi_dsub>
 8002c30:	4602      	mov	r2, r0
 8002c32:	460b      	mov	r3, r1
 8002c34:	e9c4 2300 	strd	r2, r3, [r4]
 8002c38:	4630      	mov	r0, r6
 8002c3a:	4639      	mov	r1, r7
 8002c3c:	f7fd fb24 	bl	8000288 <__aeabi_dsub>
 8002c40:	a39f      	add	r3, pc, #636	; (adr r3, 8002ec0 <__ieee754_rem_pio2+0x2e8>)
 8002c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c46:	f7fd fb1f 	bl	8000288 <__aeabi_dsub>
 8002c4a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8002c4e:	2501      	movs	r5, #1
 8002c50:	4628      	mov	r0, r5
 8002c52:	b00d      	add	sp, #52	; 0x34
 8002c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c58:	a39b      	add	r3, pc, #620	; (adr r3, 8002ec8 <__ieee754_rem_pio2+0x2f0>)
 8002c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c5e:	f7fd fb13 	bl	8000288 <__aeabi_dsub>
 8002c62:	a39b      	add	r3, pc, #620	; (adr r3, 8002ed0 <__ieee754_rem_pio2+0x2f8>)
 8002c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c68:	4606      	mov	r6, r0
 8002c6a:	460f      	mov	r7, r1
 8002c6c:	f7fd fb0c 	bl	8000288 <__aeabi_dsub>
 8002c70:	4602      	mov	r2, r0
 8002c72:	460b      	mov	r3, r1
 8002c74:	e9c4 2300 	strd	r2, r3, [r4]
 8002c78:	4630      	mov	r0, r6
 8002c7a:	4639      	mov	r1, r7
 8002c7c:	f7fd fb04 	bl	8000288 <__aeabi_dsub>
 8002c80:	a393      	add	r3, pc, #588	; (adr r3, 8002ed0 <__ieee754_rem_pio2+0x2f8>)
 8002c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c86:	e7de      	b.n	8002c46 <__ieee754_rem_pio2+0x6e>
 8002c88:	f7fd fb00 	bl	800028c <__adddf3>
 8002c8c:	45a8      	cmp	r8, r5
 8002c8e:	4606      	mov	r6, r0
 8002c90:	460f      	mov	r7, r1
 8002c92:	d016      	beq.n	8002cc2 <__ieee754_rem_pio2+0xea>
 8002c94:	a38a      	add	r3, pc, #552	; (adr r3, 8002ec0 <__ieee754_rem_pio2+0x2e8>)
 8002c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c9a:	f7fd faf7 	bl	800028c <__adddf3>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	e9c4 2300 	strd	r2, r3, [r4]
 8002ca6:	4630      	mov	r0, r6
 8002ca8:	4639      	mov	r1, r7
 8002caa:	f7fd faed 	bl	8000288 <__aeabi_dsub>
 8002cae:	a384      	add	r3, pc, #528	; (adr r3, 8002ec0 <__ieee754_rem_pio2+0x2e8>)
 8002cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb4:	f7fd faea 	bl	800028c <__adddf3>
 8002cb8:	f04f 35ff 	mov.w	r5, #4294967295
 8002cbc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8002cc0:	e7c6      	b.n	8002c50 <__ieee754_rem_pio2+0x78>
 8002cc2:	a381      	add	r3, pc, #516	; (adr r3, 8002ec8 <__ieee754_rem_pio2+0x2f0>)
 8002cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc8:	f7fd fae0 	bl	800028c <__adddf3>
 8002ccc:	a380      	add	r3, pc, #512	; (adr r3, 8002ed0 <__ieee754_rem_pio2+0x2f8>)
 8002cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd2:	4606      	mov	r6, r0
 8002cd4:	460f      	mov	r7, r1
 8002cd6:	f7fd fad9 	bl	800028c <__adddf3>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	460b      	mov	r3, r1
 8002cde:	e9c4 2300 	strd	r2, r3, [r4]
 8002ce2:	4630      	mov	r0, r6
 8002ce4:	4639      	mov	r1, r7
 8002ce6:	f7fd facf 	bl	8000288 <__aeabi_dsub>
 8002cea:	a379      	add	r3, pc, #484	; (adr r3, 8002ed0 <__ieee754_rem_pio2+0x2f8>)
 8002cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf0:	e7e0      	b.n	8002cb4 <__ieee754_rem_pio2+0xdc>
 8002cf2:	4b82      	ldr	r3, [pc, #520]	; (8002efc <__ieee754_rem_pio2+0x324>)
 8002cf4:	4598      	cmp	r8, r3
 8002cf6:	f300 80d0 	bgt.w	8002e9a <__ieee754_rem_pio2+0x2c2>
 8002cfa:	f000 fe53 	bl	80039a4 <fabs>
 8002cfe:	ec57 6b10 	vmov	r6, r7, d0
 8002d02:	ee10 0a10 	vmov	r0, s0
 8002d06:	a374      	add	r3, pc, #464	; (adr r3, 8002ed8 <__ieee754_rem_pio2+0x300>)
 8002d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d0c:	4639      	mov	r1, r7
 8002d0e:	f7fd fc6f 	bl	80005f0 <__aeabi_dmul>
 8002d12:	2200      	movs	r2, #0
 8002d14:	4b7a      	ldr	r3, [pc, #488]	; (8002f00 <__ieee754_rem_pio2+0x328>)
 8002d16:	f7fd fab9 	bl	800028c <__adddf3>
 8002d1a:	f7fd ff03 	bl	8000b24 <__aeabi_d2iz>
 8002d1e:	4605      	mov	r5, r0
 8002d20:	f7fd fc00 	bl	8000524 <__aeabi_i2d>
 8002d24:	a364      	add	r3, pc, #400	; (adr r3, 8002eb8 <__ieee754_rem_pio2+0x2e0>)
 8002d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002d2e:	f7fd fc5f 	bl	80005f0 <__aeabi_dmul>
 8002d32:	4602      	mov	r2, r0
 8002d34:	460b      	mov	r3, r1
 8002d36:	4630      	mov	r0, r6
 8002d38:	4639      	mov	r1, r7
 8002d3a:	f7fd faa5 	bl	8000288 <__aeabi_dsub>
 8002d3e:	a360      	add	r3, pc, #384	; (adr r3, 8002ec0 <__ieee754_rem_pio2+0x2e8>)
 8002d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d44:	4682      	mov	sl, r0
 8002d46:	468b      	mov	fp, r1
 8002d48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002d4c:	f7fd fc50 	bl	80005f0 <__aeabi_dmul>
 8002d50:	2d1f      	cmp	r5, #31
 8002d52:	4606      	mov	r6, r0
 8002d54:	460f      	mov	r7, r1
 8002d56:	dc2a      	bgt.n	8002dae <__ieee754_rem_pio2+0x1d6>
 8002d58:	1e6a      	subs	r2, r5, #1
 8002d5a:	4b6a      	ldr	r3, [pc, #424]	; (8002f04 <__ieee754_rem_pio2+0x32c>)
 8002d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d60:	4598      	cmp	r8, r3
 8002d62:	d024      	beq.n	8002dae <__ieee754_rem_pio2+0x1d6>
 8002d64:	4632      	mov	r2, r6
 8002d66:	463b      	mov	r3, r7
 8002d68:	4650      	mov	r0, sl
 8002d6a:	4659      	mov	r1, fp
 8002d6c:	f7fd fa8c 	bl	8000288 <__aeabi_dsub>
 8002d70:	e9c4 0100 	strd	r0, r1, [r4]
 8002d74:	e9d4 8900 	ldrd	r8, r9, [r4]
 8002d78:	4650      	mov	r0, sl
 8002d7a:	4642      	mov	r2, r8
 8002d7c:	464b      	mov	r3, r9
 8002d7e:	4659      	mov	r1, fp
 8002d80:	f7fd fa82 	bl	8000288 <__aeabi_dsub>
 8002d84:	463b      	mov	r3, r7
 8002d86:	4632      	mov	r2, r6
 8002d88:	f7fd fa7e 	bl	8000288 <__aeabi_dsub>
 8002d8c:	9b04      	ldr	r3, [sp, #16]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8002d94:	f6bf af5c 	bge.w	8002c50 <__ieee754_rem_pio2+0x78>
 8002d98:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8002d9c:	6063      	str	r3, [r4, #4]
 8002d9e:	f8c4 8000 	str.w	r8, [r4]
 8002da2:	60a0      	str	r0, [r4, #8]
 8002da4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002da8:	60e3      	str	r3, [r4, #12]
 8002daa:	426d      	negs	r5, r5
 8002dac:	e750      	b.n	8002c50 <__ieee754_rem_pio2+0x78>
 8002dae:	4632      	mov	r2, r6
 8002db0:	463b      	mov	r3, r7
 8002db2:	4650      	mov	r0, sl
 8002db4:	4659      	mov	r1, fp
 8002db6:	f7fd fa67 	bl	8000288 <__aeabi_dsub>
 8002dba:	ea4f 5228 	mov.w	r2, r8, asr #20
 8002dbe:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b10      	cmp	r3, #16
 8002dc6:	e9c4 0100 	strd	r0, r1, [r4]
 8002dca:	9205      	str	r2, [sp, #20]
 8002dcc:	ddd2      	ble.n	8002d74 <__ieee754_rem_pio2+0x19c>
 8002dce:	a33e      	add	r3, pc, #248	; (adr r3, 8002ec8 <__ieee754_rem_pio2+0x2f0>)
 8002dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002dd8:	f7fd fc0a 	bl	80005f0 <__aeabi_dmul>
 8002ddc:	4606      	mov	r6, r0
 8002dde:	460f      	mov	r7, r1
 8002de0:	4602      	mov	r2, r0
 8002de2:	460b      	mov	r3, r1
 8002de4:	4650      	mov	r0, sl
 8002de6:	4659      	mov	r1, fp
 8002de8:	f7fd fa4e 	bl	8000288 <__aeabi_dsub>
 8002dec:	4602      	mov	r2, r0
 8002dee:	460b      	mov	r3, r1
 8002df0:	4680      	mov	r8, r0
 8002df2:	4689      	mov	r9, r1
 8002df4:	4650      	mov	r0, sl
 8002df6:	4659      	mov	r1, fp
 8002df8:	f7fd fa46 	bl	8000288 <__aeabi_dsub>
 8002dfc:	4632      	mov	r2, r6
 8002dfe:	463b      	mov	r3, r7
 8002e00:	f7fd fa42 	bl	8000288 <__aeabi_dsub>
 8002e04:	a332      	add	r3, pc, #200	; (adr r3, 8002ed0 <__ieee754_rem_pio2+0x2f8>)
 8002e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e0a:	4606      	mov	r6, r0
 8002e0c:	460f      	mov	r7, r1
 8002e0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002e12:	f7fd fbed 	bl	80005f0 <__aeabi_dmul>
 8002e16:	4632      	mov	r2, r6
 8002e18:	463b      	mov	r3, r7
 8002e1a:	f7fd fa35 	bl	8000288 <__aeabi_dsub>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	460b      	mov	r3, r1
 8002e22:	4606      	mov	r6, r0
 8002e24:	460f      	mov	r7, r1
 8002e26:	4640      	mov	r0, r8
 8002e28:	4649      	mov	r1, r9
 8002e2a:	f7fd fa2d 	bl	8000288 <__aeabi_dsub>
 8002e2e:	9a05      	ldr	r2, [sp, #20]
 8002e30:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b31      	cmp	r3, #49	; 0x31
 8002e38:	e9c4 0100 	strd	r0, r1, [r4]
 8002e3c:	dd2a      	ble.n	8002e94 <__ieee754_rem_pio2+0x2bc>
 8002e3e:	a328      	add	r3, pc, #160	; (adr r3, 8002ee0 <__ieee754_rem_pio2+0x308>)
 8002e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002e48:	f7fd fbd2 	bl	80005f0 <__aeabi_dmul>
 8002e4c:	4606      	mov	r6, r0
 8002e4e:	460f      	mov	r7, r1
 8002e50:	4602      	mov	r2, r0
 8002e52:	460b      	mov	r3, r1
 8002e54:	4640      	mov	r0, r8
 8002e56:	4649      	mov	r1, r9
 8002e58:	f7fd fa16 	bl	8000288 <__aeabi_dsub>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	460b      	mov	r3, r1
 8002e60:	4682      	mov	sl, r0
 8002e62:	468b      	mov	fp, r1
 8002e64:	4640      	mov	r0, r8
 8002e66:	4649      	mov	r1, r9
 8002e68:	f7fd fa0e 	bl	8000288 <__aeabi_dsub>
 8002e6c:	4632      	mov	r2, r6
 8002e6e:	463b      	mov	r3, r7
 8002e70:	f7fd fa0a 	bl	8000288 <__aeabi_dsub>
 8002e74:	a31c      	add	r3, pc, #112	; (adr r3, 8002ee8 <__ieee754_rem_pio2+0x310>)
 8002e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e7a:	4606      	mov	r6, r0
 8002e7c:	460f      	mov	r7, r1
 8002e7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002e82:	f7fd fbb5 	bl	80005f0 <__aeabi_dmul>
 8002e86:	4632      	mov	r2, r6
 8002e88:	463b      	mov	r3, r7
 8002e8a:	f7fd f9fd 	bl	8000288 <__aeabi_dsub>
 8002e8e:	4606      	mov	r6, r0
 8002e90:	460f      	mov	r7, r1
 8002e92:	e767      	b.n	8002d64 <__ieee754_rem_pio2+0x18c>
 8002e94:	46c2      	mov	sl, r8
 8002e96:	46cb      	mov	fp, r9
 8002e98:	e76c      	b.n	8002d74 <__ieee754_rem_pio2+0x19c>
 8002e9a:	4b1b      	ldr	r3, [pc, #108]	; (8002f08 <__ieee754_rem_pio2+0x330>)
 8002e9c:	4598      	cmp	r8, r3
 8002e9e:	dd35      	ble.n	8002f0c <__ieee754_rem_pio2+0x334>
 8002ea0:	ee10 2a10 	vmov	r2, s0
 8002ea4:	463b      	mov	r3, r7
 8002ea6:	4630      	mov	r0, r6
 8002ea8:	4639      	mov	r1, r7
 8002eaa:	f7fd f9ed 	bl	8000288 <__aeabi_dsub>
 8002eae:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8002eb2:	e9c4 0100 	strd	r0, r1, [r4]
 8002eb6:	e6a1      	b.n	8002bfc <__ieee754_rem_pio2+0x24>
 8002eb8:	54400000 	.word	0x54400000
 8002ebc:	3ff921fb 	.word	0x3ff921fb
 8002ec0:	1a626331 	.word	0x1a626331
 8002ec4:	3dd0b461 	.word	0x3dd0b461
 8002ec8:	1a600000 	.word	0x1a600000
 8002ecc:	3dd0b461 	.word	0x3dd0b461
 8002ed0:	2e037073 	.word	0x2e037073
 8002ed4:	3ba3198a 	.word	0x3ba3198a
 8002ed8:	6dc9c883 	.word	0x6dc9c883
 8002edc:	3fe45f30 	.word	0x3fe45f30
 8002ee0:	2e000000 	.word	0x2e000000
 8002ee4:	3ba3198a 	.word	0x3ba3198a
 8002ee8:	252049c1 	.word	0x252049c1
 8002eec:	397b839a 	.word	0x397b839a
 8002ef0:	3fe921fb 	.word	0x3fe921fb
 8002ef4:	4002d97b 	.word	0x4002d97b
 8002ef8:	3ff921fb 	.word	0x3ff921fb
 8002efc:	413921fb 	.word	0x413921fb
 8002f00:	3fe00000 	.word	0x3fe00000
 8002f04:	08003c68 	.word	0x08003c68
 8002f08:	7fefffff 	.word	0x7fefffff
 8002f0c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8002f10:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8002f14:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8002f18:	4630      	mov	r0, r6
 8002f1a:	460f      	mov	r7, r1
 8002f1c:	f7fd fe02 	bl	8000b24 <__aeabi_d2iz>
 8002f20:	f7fd fb00 	bl	8000524 <__aeabi_i2d>
 8002f24:	4602      	mov	r2, r0
 8002f26:	460b      	mov	r3, r1
 8002f28:	4630      	mov	r0, r6
 8002f2a:	4639      	mov	r1, r7
 8002f2c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002f30:	f7fd f9aa 	bl	8000288 <__aeabi_dsub>
 8002f34:	2200      	movs	r2, #0
 8002f36:	4b1f      	ldr	r3, [pc, #124]	; (8002fb4 <__ieee754_rem_pio2+0x3dc>)
 8002f38:	f7fd fb5a 	bl	80005f0 <__aeabi_dmul>
 8002f3c:	460f      	mov	r7, r1
 8002f3e:	4606      	mov	r6, r0
 8002f40:	f7fd fdf0 	bl	8000b24 <__aeabi_d2iz>
 8002f44:	f7fd faee 	bl	8000524 <__aeabi_i2d>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	4630      	mov	r0, r6
 8002f4e:	4639      	mov	r1, r7
 8002f50:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002f54:	f7fd f998 	bl	8000288 <__aeabi_dsub>
 8002f58:	2200      	movs	r2, #0
 8002f5a:	4b16      	ldr	r3, [pc, #88]	; (8002fb4 <__ieee754_rem_pio2+0x3dc>)
 8002f5c:	f7fd fb48 	bl	80005f0 <__aeabi_dmul>
 8002f60:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002f64:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8002f68:	f04f 0803 	mov.w	r8, #3
 8002f6c:	2600      	movs	r6, #0
 8002f6e:	2700      	movs	r7, #0
 8002f70:	4632      	mov	r2, r6
 8002f72:	463b      	mov	r3, r7
 8002f74:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8002f78:	f108 3aff 	add.w	sl, r8, #4294967295
 8002f7c:	f7fd fda0 	bl	8000ac0 <__aeabi_dcmpeq>
 8002f80:	b9b0      	cbnz	r0, 8002fb0 <__ieee754_rem_pio2+0x3d8>
 8002f82:	4b0d      	ldr	r3, [pc, #52]	; (8002fb8 <__ieee754_rem_pio2+0x3e0>)
 8002f84:	9301      	str	r3, [sp, #4]
 8002f86:	2302      	movs	r3, #2
 8002f88:	9300      	str	r3, [sp, #0]
 8002f8a:	462a      	mov	r2, r5
 8002f8c:	4643      	mov	r3, r8
 8002f8e:	4621      	mov	r1, r4
 8002f90:	a806      	add	r0, sp, #24
 8002f92:	f000 f8fd 	bl	8003190 <__kernel_rem_pio2>
 8002f96:	9b04      	ldr	r3, [sp, #16]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	4605      	mov	r5, r0
 8002f9c:	f6bf ae58 	bge.w	8002c50 <__ieee754_rem_pio2+0x78>
 8002fa0:	6863      	ldr	r3, [r4, #4]
 8002fa2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002fa6:	6063      	str	r3, [r4, #4]
 8002fa8:	68e3      	ldr	r3, [r4, #12]
 8002faa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002fae:	e6fb      	b.n	8002da8 <__ieee754_rem_pio2+0x1d0>
 8002fb0:	46d0      	mov	r8, sl
 8002fb2:	e7dd      	b.n	8002f70 <__ieee754_rem_pio2+0x398>
 8002fb4:	41700000 	.word	0x41700000
 8002fb8:	08003ce8 	.word	0x08003ce8
 8002fbc:	00000000 	.word	0x00000000

08002fc0 <__kernel_cos>:
 8002fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fc4:	ec59 8b10 	vmov	r8, r9, d0
 8002fc8:	f029 4700 	bic.w	r7, r9, #2147483648	; 0x80000000
 8002fcc:	b085      	sub	sp, #20
 8002fce:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 8002fd2:	ed8d 1b00 	vstr	d1, [sp]
 8002fd6:	da07      	bge.n	8002fe8 <__kernel_cos+0x28>
 8002fd8:	ee10 0a10 	vmov	r0, s0
 8002fdc:	4649      	mov	r1, r9
 8002fde:	f7fd fda1 	bl	8000b24 <__aeabi_d2iz>
 8002fe2:	2800      	cmp	r0, #0
 8002fe4:	f000 80aa 	beq.w	800313c <__kernel_cos+0x17c>
 8002fe8:	4642      	mov	r2, r8
 8002fea:	464b      	mov	r3, r9
 8002fec:	4640      	mov	r0, r8
 8002fee:	4649      	mov	r1, r9
 8002ff0:	f7fd fafe 	bl	80005f0 <__aeabi_dmul>
 8002ff4:	a359      	add	r3, pc, #356	; (adr r3, 800315c <__kernel_cos+0x19c>)
 8002ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ffa:	4604      	mov	r4, r0
 8002ffc:	460d      	mov	r5, r1
 8002ffe:	f7fd faf7 	bl	80005f0 <__aeabi_dmul>
 8003002:	a358      	add	r3, pc, #352	; (adr r3, 8003164 <__kernel_cos+0x1a4>)
 8003004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003008:	f7fd f940 	bl	800028c <__adddf3>
 800300c:	4622      	mov	r2, r4
 800300e:	462b      	mov	r3, r5
 8003010:	f7fd faee 	bl	80005f0 <__aeabi_dmul>
 8003014:	a355      	add	r3, pc, #340	; (adr r3, 800316c <__kernel_cos+0x1ac>)
 8003016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800301a:	f7fd f935 	bl	8000288 <__aeabi_dsub>
 800301e:	4622      	mov	r2, r4
 8003020:	462b      	mov	r3, r5
 8003022:	f7fd fae5 	bl	80005f0 <__aeabi_dmul>
 8003026:	a353      	add	r3, pc, #332	; (adr r3, 8003174 <__kernel_cos+0x1b4>)
 8003028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800302c:	f7fd f92e 	bl	800028c <__adddf3>
 8003030:	4622      	mov	r2, r4
 8003032:	462b      	mov	r3, r5
 8003034:	f7fd fadc 	bl	80005f0 <__aeabi_dmul>
 8003038:	a350      	add	r3, pc, #320	; (adr r3, 800317c <__kernel_cos+0x1bc>)
 800303a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800303e:	f7fd f923 	bl	8000288 <__aeabi_dsub>
 8003042:	4622      	mov	r2, r4
 8003044:	462b      	mov	r3, r5
 8003046:	f7fd fad3 	bl	80005f0 <__aeabi_dmul>
 800304a:	a34e      	add	r3, pc, #312	; (adr r3, 8003184 <__kernel_cos+0x1c4>)
 800304c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003050:	f7fd f91c 	bl	800028c <__adddf3>
 8003054:	462b      	mov	r3, r5
 8003056:	4622      	mov	r2, r4
 8003058:	f7fd faca 	bl	80005f0 <__aeabi_dmul>
 800305c:	4b3a      	ldr	r3, [pc, #232]	; (8003148 <__kernel_cos+0x188>)
 800305e:	429f      	cmp	r7, r3
 8003060:	4682      	mov	sl, r0
 8003062:	468b      	mov	fp, r1
 8003064:	dc2c      	bgt.n	80030c0 <__kernel_cos+0x100>
 8003066:	2200      	movs	r2, #0
 8003068:	4b38      	ldr	r3, [pc, #224]	; (800314c <__kernel_cos+0x18c>)
 800306a:	4620      	mov	r0, r4
 800306c:	4629      	mov	r1, r5
 800306e:	f7fd fabf 	bl	80005f0 <__aeabi_dmul>
 8003072:	4652      	mov	r2, sl
 8003074:	4606      	mov	r6, r0
 8003076:	460f      	mov	r7, r1
 8003078:	465b      	mov	r3, fp
 800307a:	4620      	mov	r0, r4
 800307c:	4629      	mov	r1, r5
 800307e:	f7fd fab7 	bl	80005f0 <__aeabi_dmul>
 8003082:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003086:	4604      	mov	r4, r0
 8003088:	460d      	mov	r5, r1
 800308a:	4640      	mov	r0, r8
 800308c:	4649      	mov	r1, r9
 800308e:	f7fd faaf 	bl	80005f0 <__aeabi_dmul>
 8003092:	4602      	mov	r2, r0
 8003094:	460b      	mov	r3, r1
 8003096:	4620      	mov	r0, r4
 8003098:	4629      	mov	r1, r5
 800309a:	f7fd f8f5 	bl	8000288 <__aeabi_dsub>
 800309e:	4602      	mov	r2, r0
 80030a0:	460b      	mov	r3, r1
 80030a2:	4630      	mov	r0, r6
 80030a4:	4639      	mov	r1, r7
 80030a6:	f7fd f8ef 	bl	8000288 <__aeabi_dsub>
 80030aa:	460b      	mov	r3, r1
 80030ac:	4928      	ldr	r1, [pc, #160]	; (8003150 <__kernel_cos+0x190>)
 80030ae:	4602      	mov	r2, r0
 80030b0:	2000      	movs	r0, #0
 80030b2:	f7fd f8e9 	bl	8000288 <__aeabi_dsub>
 80030b6:	ec41 0b10 	vmov	d0, r0, r1
 80030ba:	b005      	add	sp, #20
 80030bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030c0:	4b24      	ldr	r3, [pc, #144]	; (8003154 <__kernel_cos+0x194>)
 80030c2:	4923      	ldr	r1, [pc, #140]	; (8003150 <__kernel_cos+0x190>)
 80030c4:	429f      	cmp	r7, r3
 80030c6:	bfd7      	itett	le
 80030c8:	f5a7 1300 	suble.w	r3, r7, #2097152	; 0x200000
 80030cc:	4f22      	ldrgt	r7, [pc, #136]	; (8003158 <__kernel_cos+0x198>)
 80030ce:	2200      	movle	r2, #0
 80030d0:	4616      	movle	r6, r2
 80030d2:	bfd4      	ite	le
 80030d4:	461f      	movle	r7, r3
 80030d6:	2600      	movgt	r6, #0
 80030d8:	4632      	mov	r2, r6
 80030da:	463b      	mov	r3, r7
 80030dc:	2000      	movs	r0, #0
 80030de:	f7fd f8d3 	bl	8000288 <__aeabi_dsub>
 80030e2:	2200      	movs	r2, #0
 80030e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80030e8:	4b18      	ldr	r3, [pc, #96]	; (800314c <__kernel_cos+0x18c>)
 80030ea:	4620      	mov	r0, r4
 80030ec:	4629      	mov	r1, r5
 80030ee:	f7fd fa7f 	bl	80005f0 <__aeabi_dmul>
 80030f2:	4632      	mov	r2, r6
 80030f4:	463b      	mov	r3, r7
 80030f6:	f7fd f8c7 	bl	8000288 <__aeabi_dsub>
 80030fa:	4652      	mov	r2, sl
 80030fc:	4606      	mov	r6, r0
 80030fe:	460f      	mov	r7, r1
 8003100:	465b      	mov	r3, fp
 8003102:	4620      	mov	r0, r4
 8003104:	4629      	mov	r1, r5
 8003106:	f7fd fa73 	bl	80005f0 <__aeabi_dmul>
 800310a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800310e:	4604      	mov	r4, r0
 8003110:	460d      	mov	r5, r1
 8003112:	4640      	mov	r0, r8
 8003114:	4649      	mov	r1, r9
 8003116:	f7fd fa6b 	bl	80005f0 <__aeabi_dmul>
 800311a:	4602      	mov	r2, r0
 800311c:	460b      	mov	r3, r1
 800311e:	4620      	mov	r0, r4
 8003120:	4629      	mov	r1, r5
 8003122:	f7fd f8b1 	bl	8000288 <__aeabi_dsub>
 8003126:	4602      	mov	r2, r0
 8003128:	460b      	mov	r3, r1
 800312a:	4630      	mov	r0, r6
 800312c:	4639      	mov	r1, r7
 800312e:	f7fd f8ab 	bl	8000288 <__aeabi_dsub>
 8003132:	4602      	mov	r2, r0
 8003134:	460b      	mov	r3, r1
 8003136:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800313a:	e7ba      	b.n	80030b2 <__kernel_cos+0xf2>
 800313c:	2000      	movs	r0, #0
 800313e:	4904      	ldr	r1, [pc, #16]	; (8003150 <__kernel_cos+0x190>)
 8003140:	e7b9      	b.n	80030b6 <__kernel_cos+0xf6>
 8003142:	bf00      	nop
 8003144:	f3af 8000 	nop.w
 8003148:	3fd33332 	.word	0x3fd33332
 800314c:	3fe00000 	.word	0x3fe00000
 8003150:	3ff00000 	.word	0x3ff00000
 8003154:	3fe90000 	.word	0x3fe90000
 8003158:	3fd20000 	.word	0x3fd20000
 800315c:	be8838d4 	.word	0xbe8838d4
 8003160:	bda8fae9 	.word	0xbda8fae9
 8003164:	bdb4b1c4 	.word	0xbdb4b1c4
 8003168:	3e21ee9e 	.word	0x3e21ee9e
 800316c:	809c52ad 	.word	0x809c52ad
 8003170:	3e927e4f 	.word	0x3e927e4f
 8003174:	19cb1590 	.word	0x19cb1590
 8003178:	3efa01a0 	.word	0x3efa01a0
 800317c:	16c15177 	.word	0x16c15177
 8003180:	3f56c16c 	.word	0x3f56c16c
 8003184:	5555554c 	.word	0x5555554c
 8003188:	3fa55555 	.word	0x3fa55555
 800318c:	00000000 	.word	0x00000000

08003190 <__kernel_rem_pio2>:
 8003190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003194:	ed2d 8b02 	vpush	{d8}
 8003198:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800319c:	1ed4      	subs	r4, r2, #3
 800319e:	9306      	str	r3, [sp, #24]
 80031a0:	9102      	str	r1, [sp, #8]
 80031a2:	4bc3      	ldr	r3, [pc, #780]	; (80034b0 <__kernel_rem_pio2+0x320>)
 80031a4:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80031a6:	9009      	str	r0, [sp, #36]	; 0x24
 80031a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80031ac:	9300      	str	r3, [sp, #0]
 80031ae:	9b06      	ldr	r3, [sp, #24]
 80031b0:	3b01      	subs	r3, #1
 80031b2:	9304      	str	r3, [sp, #16]
 80031b4:	2318      	movs	r3, #24
 80031b6:	fb94 f4f3 	sdiv	r4, r4, r3
 80031ba:	f06f 0317 	mvn.w	r3, #23
 80031be:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80031c2:	fb04 3303 	mla	r3, r4, r3, r3
 80031c6:	eb03 0a02 	add.w	sl, r3, r2
 80031ca:	9b00      	ldr	r3, [sp, #0]
 80031cc:	9a04      	ldr	r2, [sp, #16]
 80031ce:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 80034a0 <__kernel_rem_pio2+0x310>
 80031d2:	eb03 0802 	add.w	r8, r3, r2
 80031d6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80031d8:	1aa7      	subs	r7, r4, r2
 80031da:	ae20      	add	r6, sp, #128	; 0x80
 80031dc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80031e0:	2500      	movs	r5, #0
 80031e2:	4545      	cmp	r5, r8
 80031e4:	dd13      	ble.n	800320e <__kernel_rem_pio2+0x7e>
 80031e6:	ed9f 8bae 	vldr	d8, [pc, #696]	; 80034a0 <__kernel_rem_pio2+0x310>
 80031ea:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80031ee:	2600      	movs	r6, #0
 80031f0:	9b00      	ldr	r3, [sp, #0]
 80031f2:	429e      	cmp	r6, r3
 80031f4:	dc32      	bgt.n	800325c <__kernel_rem_pio2+0xcc>
 80031f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80031f8:	9303      	str	r3, [sp, #12]
 80031fa:	9b06      	ldr	r3, [sp, #24]
 80031fc:	199d      	adds	r5, r3, r6
 80031fe:	ab20      	add	r3, sp, #128	; 0x80
 8003200:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8003204:	9308      	str	r3, [sp, #32]
 8003206:	ec59 8b18 	vmov	r8, r9, d8
 800320a:	2700      	movs	r7, #0
 800320c:	e01f      	b.n	800324e <__kernel_rem_pio2+0xbe>
 800320e:	42ef      	cmn	r7, r5
 8003210:	d407      	bmi.n	8003222 <__kernel_rem_pio2+0x92>
 8003212:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8003216:	f7fd f985 	bl	8000524 <__aeabi_i2d>
 800321a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800321e:	3501      	adds	r5, #1
 8003220:	e7df      	b.n	80031e2 <__kernel_rem_pio2+0x52>
 8003222:	ec51 0b18 	vmov	r0, r1, d8
 8003226:	e7f8      	b.n	800321a <__kernel_rem_pio2+0x8a>
 8003228:	9908      	ldr	r1, [sp, #32]
 800322a:	9d03      	ldr	r5, [sp, #12]
 800322c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8003230:	9108      	str	r1, [sp, #32]
 8003232:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8003236:	9503      	str	r5, [sp, #12]
 8003238:	f7fd f9da 	bl	80005f0 <__aeabi_dmul>
 800323c:	4602      	mov	r2, r0
 800323e:	460b      	mov	r3, r1
 8003240:	4640      	mov	r0, r8
 8003242:	4649      	mov	r1, r9
 8003244:	f7fd f822 	bl	800028c <__adddf3>
 8003248:	3701      	adds	r7, #1
 800324a:	4680      	mov	r8, r0
 800324c:	4689      	mov	r9, r1
 800324e:	9b04      	ldr	r3, [sp, #16]
 8003250:	429f      	cmp	r7, r3
 8003252:	dde9      	ble.n	8003228 <__kernel_rem_pio2+0x98>
 8003254:	e8eb 8902 	strd	r8, r9, [fp], #8
 8003258:	3601      	adds	r6, #1
 800325a:	e7c9      	b.n	80031f0 <__kernel_rem_pio2+0x60>
 800325c:	9b00      	ldr	r3, [sp, #0]
 800325e:	9f00      	ldr	r7, [sp, #0]
 8003260:	aa0c      	add	r2, sp, #48	; 0x30
 8003262:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003266:	930b      	str	r3, [sp, #44]	; 0x2c
 8003268:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800326a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800326e:	930a      	str	r3, [sp, #40]	; 0x28
 8003270:	ab98      	add	r3, sp, #608	; 0x260
 8003272:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 8003276:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800327a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800327e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8003282:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003286:	9308      	str	r3, [sp, #32]
 8003288:	9a08      	ldr	r2, [sp, #32]
 800328a:	ab98      	add	r3, sp, #608	; 0x260
 800328c:	4413      	add	r3, r2
 800328e:	f1a3 0b98 	sub.w	fp, r3, #152	; 0x98
 8003292:	2600      	movs	r6, #0
 8003294:	1bbb      	subs	r3, r7, r6
 8003296:	2b00      	cmp	r3, #0
 8003298:	dc77      	bgt.n	800338a <__kernel_rem_pio2+0x1fa>
 800329a:	ec49 8b10 	vmov	d0, r8, r9
 800329e:	4650      	mov	r0, sl
 80032a0:	f000 fc0e 	bl	8003ac0 <scalbn>
 80032a4:	ec55 4b10 	vmov	r4, r5, d0
 80032a8:	2200      	movs	r2, #0
 80032aa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80032ae:	ee10 0a10 	vmov	r0, s0
 80032b2:	4629      	mov	r1, r5
 80032b4:	f7fd f99c 	bl	80005f0 <__aeabi_dmul>
 80032b8:	ec41 0b10 	vmov	d0, r0, r1
 80032bc:	f000 fb7c 	bl	80039b8 <floor>
 80032c0:	2200      	movs	r2, #0
 80032c2:	ec51 0b10 	vmov	r0, r1, d0
 80032c6:	4b7b      	ldr	r3, [pc, #492]	; (80034b4 <__kernel_rem_pio2+0x324>)
 80032c8:	f7fd f992 	bl	80005f0 <__aeabi_dmul>
 80032cc:	4602      	mov	r2, r0
 80032ce:	460b      	mov	r3, r1
 80032d0:	4620      	mov	r0, r4
 80032d2:	4629      	mov	r1, r5
 80032d4:	f7fc ffd8 	bl	8000288 <__aeabi_dsub>
 80032d8:	460d      	mov	r5, r1
 80032da:	4604      	mov	r4, r0
 80032dc:	f7fd fc22 	bl	8000b24 <__aeabi_d2iz>
 80032e0:	9003      	str	r0, [sp, #12]
 80032e2:	f7fd f91f 	bl	8000524 <__aeabi_i2d>
 80032e6:	4602      	mov	r2, r0
 80032e8:	460b      	mov	r3, r1
 80032ea:	4620      	mov	r0, r4
 80032ec:	4629      	mov	r1, r5
 80032ee:	f7fc ffcb 	bl	8000288 <__aeabi_dsub>
 80032f2:	f1ba 0f00 	cmp.w	sl, #0
 80032f6:	4680      	mov	r8, r0
 80032f8:	4689      	mov	r9, r1
 80032fa:	dd6b      	ble.n	80033d4 <__kernel_rem_pio2+0x244>
 80032fc:	1e7a      	subs	r2, r7, #1
 80032fe:	ab0c      	add	r3, sp, #48	; 0x30
 8003300:	f1ca 0118 	rsb	r1, sl, #24
 8003304:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003308:	9c03      	ldr	r4, [sp, #12]
 800330a:	fa40 f301 	asr.w	r3, r0, r1
 800330e:	441c      	add	r4, r3
 8003310:	408b      	lsls	r3, r1
 8003312:	1ac0      	subs	r0, r0, r3
 8003314:	ab0c      	add	r3, sp, #48	; 0x30
 8003316:	9403      	str	r4, [sp, #12]
 8003318:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800331c:	f1ca 0317 	rsb	r3, sl, #23
 8003320:	fa40 fb03 	asr.w	fp, r0, r3
 8003324:	f1bb 0f00 	cmp.w	fp, #0
 8003328:	dd62      	ble.n	80033f0 <__kernel_rem_pio2+0x260>
 800332a:	9b03      	ldr	r3, [sp, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	3301      	adds	r3, #1
 8003330:	9303      	str	r3, [sp, #12]
 8003332:	4614      	mov	r4, r2
 8003334:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8003338:	4297      	cmp	r7, r2
 800333a:	f300 8089 	bgt.w	8003450 <__kernel_rem_pio2+0x2c0>
 800333e:	f1ba 0f00 	cmp.w	sl, #0
 8003342:	dd07      	ble.n	8003354 <__kernel_rem_pio2+0x1c4>
 8003344:	f1ba 0f01 	cmp.w	sl, #1
 8003348:	f000 8096 	beq.w	8003478 <__kernel_rem_pio2+0x2e8>
 800334c:	f1ba 0f02 	cmp.w	sl, #2
 8003350:	f000 809c 	beq.w	800348c <__kernel_rem_pio2+0x2fc>
 8003354:	f1bb 0f02 	cmp.w	fp, #2
 8003358:	d14a      	bne.n	80033f0 <__kernel_rem_pio2+0x260>
 800335a:	4642      	mov	r2, r8
 800335c:	464b      	mov	r3, r9
 800335e:	2000      	movs	r0, #0
 8003360:	4955      	ldr	r1, [pc, #340]	; (80034b8 <__kernel_rem_pio2+0x328>)
 8003362:	f7fc ff91 	bl	8000288 <__aeabi_dsub>
 8003366:	4680      	mov	r8, r0
 8003368:	4689      	mov	r9, r1
 800336a:	2c00      	cmp	r4, #0
 800336c:	d040      	beq.n	80033f0 <__kernel_rem_pio2+0x260>
 800336e:	4650      	mov	r0, sl
 8003370:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 80034a8 <__kernel_rem_pio2+0x318>
 8003374:	f000 fba4 	bl	8003ac0 <scalbn>
 8003378:	4640      	mov	r0, r8
 800337a:	4649      	mov	r1, r9
 800337c:	ec53 2b10 	vmov	r2, r3, d0
 8003380:	f7fc ff82 	bl	8000288 <__aeabi_dsub>
 8003384:	4680      	mov	r8, r0
 8003386:	4689      	mov	r9, r1
 8003388:	e032      	b.n	80033f0 <__kernel_rem_pio2+0x260>
 800338a:	2200      	movs	r2, #0
 800338c:	4b4b      	ldr	r3, [pc, #300]	; (80034bc <__kernel_rem_pio2+0x32c>)
 800338e:	4640      	mov	r0, r8
 8003390:	4649      	mov	r1, r9
 8003392:	f7fd f92d 	bl	80005f0 <__aeabi_dmul>
 8003396:	f7fd fbc5 	bl	8000b24 <__aeabi_d2iz>
 800339a:	f7fd f8c3 	bl	8000524 <__aeabi_i2d>
 800339e:	2200      	movs	r2, #0
 80033a0:	4b47      	ldr	r3, [pc, #284]	; (80034c0 <__kernel_rem_pio2+0x330>)
 80033a2:	4604      	mov	r4, r0
 80033a4:	460d      	mov	r5, r1
 80033a6:	f7fd f923 	bl	80005f0 <__aeabi_dmul>
 80033aa:	4602      	mov	r2, r0
 80033ac:	460b      	mov	r3, r1
 80033ae:	4640      	mov	r0, r8
 80033b0:	4649      	mov	r1, r9
 80033b2:	f7fc ff69 	bl	8000288 <__aeabi_dsub>
 80033b6:	f7fd fbb5 	bl	8000b24 <__aeabi_d2iz>
 80033ba:	ab0c      	add	r3, sp, #48	; 0x30
 80033bc:	4629      	mov	r1, r5
 80033be:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 80033c2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80033c6:	4620      	mov	r0, r4
 80033c8:	f7fc ff60 	bl	800028c <__adddf3>
 80033cc:	3601      	adds	r6, #1
 80033ce:	4680      	mov	r8, r0
 80033d0:	4689      	mov	r9, r1
 80033d2:	e75f      	b.n	8003294 <__kernel_rem_pio2+0x104>
 80033d4:	d106      	bne.n	80033e4 <__kernel_rem_pio2+0x254>
 80033d6:	1e7b      	subs	r3, r7, #1
 80033d8:	aa0c      	add	r2, sp, #48	; 0x30
 80033da:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80033de:	ea4f 5be0 	mov.w	fp, r0, asr #23
 80033e2:	e79f      	b.n	8003324 <__kernel_rem_pio2+0x194>
 80033e4:	2200      	movs	r2, #0
 80033e6:	4b37      	ldr	r3, [pc, #220]	; (80034c4 <__kernel_rem_pio2+0x334>)
 80033e8:	f7fd fb88 	bl	8000afc <__aeabi_dcmpge>
 80033ec:	bb68      	cbnz	r0, 800344a <__kernel_rem_pio2+0x2ba>
 80033ee:	4683      	mov	fp, r0
 80033f0:	2200      	movs	r2, #0
 80033f2:	2300      	movs	r3, #0
 80033f4:	4640      	mov	r0, r8
 80033f6:	4649      	mov	r1, r9
 80033f8:	f7fd fb62 	bl	8000ac0 <__aeabi_dcmpeq>
 80033fc:	2800      	cmp	r0, #0
 80033fe:	f000 80c1 	beq.w	8003584 <__kernel_rem_pio2+0x3f4>
 8003402:	1e7c      	subs	r4, r7, #1
 8003404:	4623      	mov	r3, r4
 8003406:	2200      	movs	r2, #0
 8003408:	9900      	ldr	r1, [sp, #0]
 800340a:	428b      	cmp	r3, r1
 800340c:	da5c      	bge.n	80034c8 <__kernel_rem_pio2+0x338>
 800340e:	2a00      	cmp	r2, #0
 8003410:	f040 808b 	bne.w	800352a <__kernel_rem_pio2+0x39a>
 8003414:	2401      	movs	r4, #1
 8003416:	f06f 0203 	mvn.w	r2, #3
 800341a:	fb02 f304 	mul.w	r3, r2, r4
 800341e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003420:	58cb      	ldr	r3, [r1, r3]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d056      	beq.n	80034d4 <__kernel_rem_pio2+0x344>
 8003426:	9b08      	ldr	r3, [sp, #32]
 8003428:	aa98      	add	r2, sp, #608	; 0x260
 800342a:	4413      	add	r3, r2
 800342c:	f1a3 0b90 	sub.w	fp, r3, #144	; 0x90
 8003430:	9b06      	ldr	r3, [sp, #24]
 8003432:	19dd      	adds	r5, r3, r7
 8003434:	ab20      	add	r3, sp, #128	; 0x80
 8003436:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800343a:	19e3      	adds	r3, r4, r7
 800343c:	1c7e      	adds	r6, r7, #1
 800343e:	9303      	str	r3, [sp, #12]
 8003440:	9b03      	ldr	r3, [sp, #12]
 8003442:	429e      	cmp	r6, r3
 8003444:	dd48      	ble.n	80034d8 <__kernel_rem_pio2+0x348>
 8003446:	461f      	mov	r7, r3
 8003448:	e712      	b.n	8003270 <__kernel_rem_pio2+0xe0>
 800344a:	f04f 0b02 	mov.w	fp, #2
 800344e:	e76c      	b.n	800332a <__kernel_rem_pio2+0x19a>
 8003450:	ab0c      	add	r3, sp, #48	; 0x30
 8003452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003456:	b94c      	cbnz	r4, 800346c <__kernel_rem_pio2+0x2dc>
 8003458:	b12b      	cbz	r3, 8003466 <__kernel_rem_pio2+0x2d6>
 800345a:	a80c      	add	r0, sp, #48	; 0x30
 800345c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8003460:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8003464:	2301      	movs	r3, #1
 8003466:	3201      	adds	r2, #1
 8003468:	461c      	mov	r4, r3
 800346a:	e765      	b.n	8003338 <__kernel_rem_pio2+0x1a8>
 800346c:	a80c      	add	r0, sp, #48	; 0x30
 800346e:	1acb      	subs	r3, r1, r3
 8003470:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8003474:	4623      	mov	r3, r4
 8003476:	e7f6      	b.n	8003466 <__kernel_rem_pio2+0x2d6>
 8003478:	1e7a      	subs	r2, r7, #1
 800347a:	ab0c      	add	r3, sp, #48	; 0x30
 800347c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003480:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8003484:	a90c      	add	r1, sp, #48	; 0x30
 8003486:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800348a:	e763      	b.n	8003354 <__kernel_rem_pio2+0x1c4>
 800348c:	1e7a      	subs	r2, r7, #1
 800348e:	ab0c      	add	r3, sp, #48	; 0x30
 8003490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003494:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8003498:	e7f4      	b.n	8003484 <__kernel_rem_pio2+0x2f4>
 800349a:	bf00      	nop
 800349c:	f3af 8000 	nop.w
	...
 80034ac:	3ff00000 	.word	0x3ff00000
 80034b0:	08003e30 	.word	0x08003e30
 80034b4:	40200000 	.word	0x40200000
 80034b8:	3ff00000 	.word	0x3ff00000
 80034bc:	3e700000 	.word	0x3e700000
 80034c0:	41700000 	.word	0x41700000
 80034c4:	3fe00000 	.word	0x3fe00000
 80034c8:	a90c      	add	r1, sp, #48	; 0x30
 80034ca:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80034ce:	3b01      	subs	r3, #1
 80034d0:	430a      	orrs	r2, r1
 80034d2:	e799      	b.n	8003408 <__kernel_rem_pio2+0x278>
 80034d4:	3401      	adds	r4, #1
 80034d6:	e7a0      	b.n	800341a <__kernel_rem_pio2+0x28a>
 80034d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80034da:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80034de:	f7fd f821 	bl	8000524 <__aeabi_i2d>
 80034e2:	e8e5 0102 	strd	r0, r1, [r5], #8
 80034e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034e8:	9508      	str	r5, [sp, #32]
 80034ea:	461c      	mov	r4, r3
 80034ec:	2700      	movs	r7, #0
 80034ee:	f04f 0800 	mov.w	r8, #0
 80034f2:	f04f 0900 	mov.w	r9, #0
 80034f6:	9b04      	ldr	r3, [sp, #16]
 80034f8:	429f      	cmp	r7, r3
 80034fa:	dd03      	ble.n	8003504 <__kernel_rem_pio2+0x374>
 80034fc:	e8eb 8902 	strd	r8, r9, [fp], #8
 8003500:	3601      	adds	r6, #1
 8003502:	e79d      	b.n	8003440 <__kernel_rem_pio2+0x2b0>
 8003504:	9908      	ldr	r1, [sp, #32]
 8003506:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800350a:	9108      	str	r1, [sp, #32]
 800350c:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8003510:	f7fd f86e 	bl	80005f0 <__aeabi_dmul>
 8003514:	4602      	mov	r2, r0
 8003516:	460b      	mov	r3, r1
 8003518:	4640      	mov	r0, r8
 800351a:	4649      	mov	r1, r9
 800351c:	f7fc feb6 	bl	800028c <__adddf3>
 8003520:	3701      	adds	r7, #1
 8003522:	4680      	mov	r8, r0
 8003524:	4689      	mov	r9, r1
 8003526:	e7e6      	b.n	80034f6 <__kernel_rem_pio2+0x366>
 8003528:	3c01      	subs	r4, #1
 800352a:	ab0c      	add	r3, sp, #48	; 0x30
 800352c:	f1aa 0a18 	sub.w	sl, sl, #24
 8003530:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d0f7      	beq.n	8003528 <__kernel_rem_pio2+0x398>
 8003538:	4650      	mov	r0, sl
 800353a:	ed9f 0bb5 	vldr	d0, [pc, #724]	; 8003810 <__kernel_rem_pio2+0x680>
 800353e:	f000 fabf 	bl	8003ac0 <scalbn>
 8003542:	00e5      	lsls	r5, r4, #3
 8003544:	ab98      	add	r3, sp, #608	; 0x260
 8003546:	eb03 0905 	add.w	r9, r3, r5
 800354a:	ec57 6b10 	vmov	r6, r7, d0
 800354e:	f1a9 0998 	sub.w	r9, r9, #152	; 0x98
 8003552:	46a0      	mov	r8, r4
 8003554:	f1b8 0f00 	cmp.w	r8, #0
 8003558:	da4d      	bge.n	80035f6 <__kernel_rem_pio2+0x466>
 800355a:	ed9f 8baf 	vldr	d8, [pc, #700]	; 8003818 <__kernel_rem_pio2+0x688>
 800355e:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
 8003562:	2300      	movs	r3, #0
 8003564:	9304      	str	r3, [sp, #16]
 8003566:	4657      	mov	r7, sl
 8003568:	9b04      	ldr	r3, [sp, #16]
 800356a:	ebb4 0903 	subs.w	r9, r4, r3
 800356e:	d476      	bmi.n	800365e <__kernel_rem_pio2+0x4ce>
 8003570:	4bab      	ldr	r3, [pc, #684]	; (8003820 <__kernel_rem_pio2+0x690>)
 8003572:	461e      	mov	r6, r3
 8003574:	ab70      	add	r3, sp, #448	; 0x1c0
 8003576:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800357a:	ed8d 8b06 	vstr	d8, [sp, #24]
 800357e:	f04f 0800 	mov.w	r8, #0
 8003582:	e05e      	b.n	8003642 <__kernel_rem_pio2+0x4b2>
 8003584:	f1ca 0000 	rsb	r0, sl, #0
 8003588:	ec49 8b10 	vmov	d0, r8, r9
 800358c:	f000 fa98 	bl	8003ac0 <scalbn>
 8003590:	ec55 4b10 	vmov	r4, r5, d0
 8003594:	2200      	movs	r2, #0
 8003596:	4ba3      	ldr	r3, [pc, #652]	; (8003824 <__kernel_rem_pio2+0x694>)
 8003598:	ee10 0a10 	vmov	r0, s0
 800359c:	4629      	mov	r1, r5
 800359e:	f7fd faad 	bl	8000afc <__aeabi_dcmpge>
 80035a2:	b1f8      	cbz	r0, 80035e4 <__kernel_rem_pio2+0x454>
 80035a4:	2200      	movs	r2, #0
 80035a6:	4ba0      	ldr	r3, [pc, #640]	; (8003828 <__kernel_rem_pio2+0x698>)
 80035a8:	4620      	mov	r0, r4
 80035aa:	4629      	mov	r1, r5
 80035ac:	f7fd f820 	bl	80005f0 <__aeabi_dmul>
 80035b0:	f7fd fab8 	bl	8000b24 <__aeabi_d2iz>
 80035b4:	4606      	mov	r6, r0
 80035b6:	f7fc ffb5 	bl	8000524 <__aeabi_i2d>
 80035ba:	2200      	movs	r2, #0
 80035bc:	4b99      	ldr	r3, [pc, #612]	; (8003824 <__kernel_rem_pio2+0x694>)
 80035be:	f7fd f817 	bl	80005f0 <__aeabi_dmul>
 80035c2:	460b      	mov	r3, r1
 80035c4:	4602      	mov	r2, r0
 80035c6:	4629      	mov	r1, r5
 80035c8:	4620      	mov	r0, r4
 80035ca:	f7fc fe5d 	bl	8000288 <__aeabi_dsub>
 80035ce:	f7fd faa9 	bl	8000b24 <__aeabi_d2iz>
 80035d2:	1c7c      	adds	r4, r7, #1
 80035d4:	ab0c      	add	r3, sp, #48	; 0x30
 80035d6:	f10a 0a18 	add.w	sl, sl, #24
 80035da:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80035de:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 80035e2:	e7a9      	b.n	8003538 <__kernel_rem_pio2+0x3a8>
 80035e4:	4620      	mov	r0, r4
 80035e6:	4629      	mov	r1, r5
 80035e8:	f7fd fa9c 	bl	8000b24 <__aeabi_d2iz>
 80035ec:	ab0c      	add	r3, sp, #48	; 0x30
 80035ee:	463c      	mov	r4, r7
 80035f0:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80035f4:	e7a0      	b.n	8003538 <__kernel_rem_pio2+0x3a8>
 80035f6:	ab0c      	add	r3, sp, #48	; 0x30
 80035f8:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80035fc:	f7fc ff92 	bl	8000524 <__aeabi_i2d>
 8003600:	4632      	mov	r2, r6
 8003602:	463b      	mov	r3, r7
 8003604:	f7fc fff4 	bl	80005f0 <__aeabi_dmul>
 8003608:	2200      	movs	r2, #0
 800360a:	e969 0102 	strd	r0, r1, [r9, #-8]!
 800360e:	4b86      	ldr	r3, [pc, #536]	; (8003828 <__kernel_rem_pio2+0x698>)
 8003610:	4630      	mov	r0, r6
 8003612:	4639      	mov	r1, r7
 8003614:	f7fc ffec 	bl	80005f0 <__aeabi_dmul>
 8003618:	f108 38ff 	add.w	r8, r8, #4294967295
 800361c:	4606      	mov	r6, r0
 800361e:	460f      	mov	r7, r1
 8003620:	e798      	b.n	8003554 <__kernel_rem_pio2+0x3c4>
 8003622:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8003626:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800362a:	f7fc ffe1 	bl	80005f0 <__aeabi_dmul>
 800362e:	4602      	mov	r2, r0
 8003630:	460b      	mov	r3, r1
 8003632:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003636:	f7fc fe29 	bl	800028c <__adddf3>
 800363a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800363e:	f108 0801 	add.w	r8, r8, #1
 8003642:	9b00      	ldr	r3, [sp, #0]
 8003644:	4598      	cmp	r8, r3
 8003646:	dc02      	bgt.n	800364e <__kernel_rem_pio2+0x4be>
 8003648:	9b04      	ldr	r3, [sp, #16]
 800364a:	4598      	cmp	r8, r3
 800364c:	dde9      	ble.n	8003622 <__kernel_rem_pio2+0x492>
 800364e:	9b04      	ldr	r3, [sp, #16]
 8003650:	ed9d 7b06 	vldr	d7, [sp, #24]
 8003654:	3301      	adds	r3, #1
 8003656:	ecaa 7b02 	vstmia	sl!, {d7}
 800365a:	9304      	str	r3, [sp, #16]
 800365c:	e784      	b.n	8003568 <__kernel_rem_pio2+0x3d8>
 800365e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8003660:	2b03      	cmp	r3, #3
 8003662:	d85d      	bhi.n	8003720 <__kernel_rem_pio2+0x590>
 8003664:	e8df f003 	tbb	[pc, r3]
 8003668:	0226264b 	.word	0x0226264b
 800366c:	ab98      	add	r3, sp, #608	; 0x260
 800366e:	441d      	add	r5, r3
 8003670:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 8003674:	462e      	mov	r6, r5
 8003676:	46a2      	mov	sl, r4
 8003678:	f1ba 0f00 	cmp.w	sl, #0
 800367c:	dc6e      	bgt.n	800375c <__kernel_rem_pio2+0x5cc>
 800367e:	462e      	mov	r6, r5
 8003680:	46a2      	mov	sl, r4
 8003682:	f1ba 0f01 	cmp.w	sl, #1
 8003686:	f300 808a 	bgt.w	800379e <__kernel_rem_pio2+0x60e>
 800368a:	2000      	movs	r0, #0
 800368c:	2100      	movs	r1, #0
 800368e:	2c01      	cmp	r4, #1
 8003690:	f300 80a6 	bgt.w	80037e0 <__kernel_rem_pio2+0x650>
 8003694:	f1bb 0f00 	cmp.w	fp, #0
 8003698:	f040 80a8 	bne.w	80037ec <__kernel_rem_pio2+0x65c>
 800369c:	e9dd 2348 	ldrd	r2, r3, [sp, #288]	; 0x120
 80036a0:	9c02      	ldr	r4, [sp, #8]
 80036a2:	e9c4 2300 	strd	r2, r3, [r4]
 80036a6:	e9dd 234a 	ldrd	r2, r3, [sp, #296]	; 0x128
 80036aa:	e9c4 0104 	strd	r0, r1, [r4, #16]
 80036ae:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80036b2:	e035      	b.n	8003720 <__kernel_rem_pio2+0x590>
 80036b4:	3508      	adds	r5, #8
 80036b6:	ab48      	add	r3, sp, #288	; 0x120
 80036b8:	441d      	add	r5, r3
 80036ba:	4626      	mov	r6, r4
 80036bc:	2000      	movs	r0, #0
 80036be:	2100      	movs	r1, #0
 80036c0:	2e00      	cmp	r6, #0
 80036c2:	da3c      	bge.n	800373e <__kernel_rem_pio2+0x5ae>
 80036c4:	f1bb 0f00 	cmp.w	fp, #0
 80036c8:	d03f      	beq.n	800374a <__kernel_rem_pio2+0x5ba>
 80036ca:	4602      	mov	r2, r0
 80036cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80036d0:	9d02      	ldr	r5, [sp, #8]
 80036d2:	e9c5 2300 	strd	r2, r3, [r5]
 80036d6:	4602      	mov	r2, r0
 80036d8:	460b      	mov	r3, r1
 80036da:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80036de:	f7fc fdd3 	bl	8000288 <__aeabi_dsub>
 80036e2:	ae4a      	add	r6, sp, #296	; 0x128
 80036e4:	2501      	movs	r5, #1
 80036e6:	42ac      	cmp	r4, r5
 80036e8:	da32      	bge.n	8003750 <__kernel_rem_pio2+0x5c0>
 80036ea:	f1bb 0f00 	cmp.w	fp, #0
 80036ee:	d002      	beq.n	80036f6 <__kernel_rem_pio2+0x566>
 80036f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80036f4:	4619      	mov	r1, r3
 80036f6:	9b02      	ldr	r3, [sp, #8]
 80036f8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80036fc:	e010      	b.n	8003720 <__kernel_rem_pio2+0x590>
 80036fe:	ab98      	add	r3, sp, #608	; 0x260
 8003700:	441d      	add	r5, r3
 8003702:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 8003706:	2000      	movs	r0, #0
 8003708:	2100      	movs	r1, #0
 800370a:	2c00      	cmp	r4, #0
 800370c:	da11      	bge.n	8003732 <__kernel_rem_pio2+0x5a2>
 800370e:	f1bb 0f00 	cmp.w	fp, #0
 8003712:	d002      	beq.n	800371a <__kernel_rem_pio2+0x58a>
 8003714:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003718:	4619      	mov	r1, r3
 800371a:	9b02      	ldr	r3, [sp, #8]
 800371c:	e9c3 0100 	strd	r0, r1, [r3]
 8003720:	9b03      	ldr	r3, [sp, #12]
 8003722:	f003 0007 	and.w	r0, r3, #7
 8003726:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800372a:	ecbd 8b02 	vpop	{d8}
 800372e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003732:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8003736:	f7fc fda9 	bl	800028c <__adddf3>
 800373a:	3c01      	subs	r4, #1
 800373c:	e7e5      	b.n	800370a <__kernel_rem_pio2+0x57a>
 800373e:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8003742:	f7fc fda3 	bl	800028c <__adddf3>
 8003746:	3e01      	subs	r6, #1
 8003748:	e7ba      	b.n	80036c0 <__kernel_rem_pio2+0x530>
 800374a:	4602      	mov	r2, r0
 800374c:	460b      	mov	r3, r1
 800374e:	e7bf      	b.n	80036d0 <__kernel_rem_pio2+0x540>
 8003750:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8003754:	f7fc fd9a 	bl	800028c <__adddf3>
 8003758:	3501      	adds	r5, #1
 800375a:	e7c4      	b.n	80036e6 <__kernel_rem_pio2+0x556>
 800375c:	ed16 7b02 	vldr	d7, [r6, #-8]
 8003760:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 8003764:	ec53 2b17 	vmov	r2, r3, d7
 8003768:	4640      	mov	r0, r8
 800376a:	4649      	mov	r1, r9
 800376c:	ed8d 7b00 	vstr	d7, [sp]
 8003770:	f7fc fd8c 	bl	800028c <__adddf3>
 8003774:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003778:	4602      	mov	r2, r0
 800377a:	460b      	mov	r3, r1
 800377c:	4640      	mov	r0, r8
 800377e:	4649      	mov	r1, r9
 8003780:	f7fc fd82 	bl	8000288 <__aeabi_dsub>
 8003784:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003788:	f7fc fd80 	bl	800028c <__adddf3>
 800378c:	ed9d 7b04 	vldr	d7, [sp, #16]
 8003790:	e966 0102 	strd	r0, r1, [r6, #-8]!
 8003794:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003798:	ed06 7b02 	vstr	d7, [r6, #-8]
 800379c:	e76c      	b.n	8003678 <__kernel_rem_pio2+0x4e8>
 800379e:	ed16 7b02 	vldr	d7, [r6, #-8]
 80037a2:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 80037a6:	ec53 2b17 	vmov	r2, r3, d7
 80037aa:	4640      	mov	r0, r8
 80037ac:	4649      	mov	r1, r9
 80037ae:	ed8d 7b00 	vstr	d7, [sp]
 80037b2:	f7fc fd6b 	bl	800028c <__adddf3>
 80037b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80037ba:	4602      	mov	r2, r0
 80037bc:	460b      	mov	r3, r1
 80037be:	4640      	mov	r0, r8
 80037c0:	4649      	mov	r1, r9
 80037c2:	f7fc fd61 	bl	8000288 <__aeabi_dsub>
 80037c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80037ca:	f7fc fd5f 	bl	800028c <__adddf3>
 80037ce:	ed9d 7b04 	vldr	d7, [sp, #16]
 80037d2:	e966 0102 	strd	r0, r1, [r6, #-8]!
 80037d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80037da:	ed06 7b02 	vstr	d7, [r6, #-8]
 80037de:	e750      	b.n	8003682 <__kernel_rem_pio2+0x4f2>
 80037e0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80037e4:	f7fc fd52 	bl	800028c <__adddf3>
 80037e8:	3c01      	subs	r4, #1
 80037ea:	e750      	b.n	800368e <__kernel_rem_pio2+0x4fe>
 80037ec:	9a02      	ldr	r2, [sp, #8]
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	6013      	str	r3, [r2, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6110      	str	r0, [r2, #16]
 80037f6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80037fa:	6053      	str	r3, [r2, #4]
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	6093      	str	r3, [r2, #8]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003806:	60d3      	str	r3, [r2, #12]
 8003808:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800380c:	6153      	str	r3, [r2, #20]
 800380e:	e787      	b.n	8003720 <__kernel_rem_pio2+0x590>
 8003810:	00000000 	.word	0x00000000
 8003814:	3ff00000 	.word	0x3ff00000
	...
 8003820:	08003df0 	.word	0x08003df0
 8003824:	41700000 	.word	0x41700000
 8003828:	3e700000 	.word	0x3e700000
 800382c:	00000000 	.word	0x00000000

08003830 <__kernel_sin>:
 8003830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003834:	ec55 4b10 	vmov	r4, r5, d0
 8003838:	b085      	sub	sp, #20
 800383a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800383e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8003842:	ed8d 1b00 	vstr	d1, [sp]
 8003846:	9002      	str	r0, [sp, #8]
 8003848:	da06      	bge.n	8003858 <__kernel_sin+0x28>
 800384a:	ee10 0a10 	vmov	r0, s0
 800384e:	4629      	mov	r1, r5
 8003850:	f7fd f968 	bl	8000b24 <__aeabi_d2iz>
 8003854:	2800      	cmp	r0, #0
 8003856:	d051      	beq.n	80038fc <__kernel_sin+0xcc>
 8003858:	4622      	mov	r2, r4
 800385a:	462b      	mov	r3, r5
 800385c:	4620      	mov	r0, r4
 800385e:	4629      	mov	r1, r5
 8003860:	f7fc fec6 	bl	80005f0 <__aeabi_dmul>
 8003864:	4682      	mov	sl, r0
 8003866:	468b      	mov	fp, r1
 8003868:	4602      	mov	r2, r0
 800386a:	460b      	mov	r3, r1
 800386c:	4620      	mov	r0, r4
 800386e:	4629      	mov	r1, r5
 8003870:	f7fc febe 	bl	80005f0 <__aeabi_dmul>
 8003874:	a341      	add	r3, pc, #260	; (adr r3, 800397c <__kernel_sin+0x14c>)
 8003876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800387a:	4680      	mov	r8, r0
 800387c:	4689      	mov	r9, r1
 800387e:	4650      	mov	r0, sl
 8003880:	4659      	mov	r1, fp
 8003882:	f7fc feb5 	bl	80005f0 <__aeabi_dmul>
 8003886:	a33f      	add	r3, pc, #252	; (adr r3, 8003984 <__kernel_sin+0x154>)
 8003888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800388c:	f7fc fcfc 	bl	8000288 <__aeabi_dsub>
 8003890:	4652      	mov	r2, sl
 8003892:	465b      	mov	r3, fp
 8003894:	f7fc feac 	bl	80005f0 <__aeabi_dmul>
 8003898:	a33c      	add	r3, pc, #240	; (adr r3, 800398c <__kernel_sin+0x15c>)
 800389a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800389e:	f7fc fcf5 	bl	800028c <__adddf3>
 80038a2:	4652      	mov	r2, sl
 80038a4:	465b      	mov	r3, fp
 80038a6:	f7fc fea3 	bl	80005f0 <__aeabi_dmul>
 80038aa:	a33a      	add	r3, pc, #232	; (adr r3, 8003994 <__kernel_sin+0x164>)
 80038ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b0:	f7fc fcea 	bl	8000288 <__aeabi_dsub>
 80038b4:	4652      	mov	r2, sl
 80038b6:	465b      	mov	r3, fp
 80038b8:	f7fc fe9a 	bl	80005f0 <__aeabi_dmul>
 80038bc:	a337      	add	r3, pc, #220	; (adr r3, 800399c <__kernel_sin+0x16c>)
 80038be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c2:	f7fc fce3 	bl	800028c <__adddf3>
 80038c6:	9b02      	ldr	r3, [sp, #8]
 80038c8:	4606      	mov	r6, r0
 80038ca:	460f      	mov	r7, r1
 80038cc:	b9db      	cbnz	r3, 8003906 <__kernel_sin+0xd6>
 80038ce:	4602      	mov	r2, r0
 80038d0:	460b      	mov	r3, r1
 80038d2:	4650      	mov	r0, sl
 80038d4:	4659      	mov	r1, fp
 80038d6:	f7fc fe8b 	bl	80005f0 <__aeabi_dmul>
 80038da:	a325      	add	r3, pc, #148	; (adr r3, 8003970 <__kernel_sin+0x140>)
 80038dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e0:	f7fc fcd2 	bl	8000288 <__aeabi_dsub>
 80038e4:	4642      	mov	r2, r8
 80038e6:	464b      	mov	r3, r9
 80038e8:	f7fc fe82 	bl	80005f0 <__aeabi_dmul>
 80038ec:	4602      	mov	r2, r0
 80038ee:	460b      	mov	r3, r1
 80038f0:	4620      	mov	r0, r4
 80038f2:	4629      	mov	r1, r5
 80038f4:	f7fc fcca 	bl	800028c <__adddf3>
 80038f8:	4604      	mov	r4, r0
 80038fa:	460d      	mov	r5, r1
 80038fc:	ec45 4b10 	vmov	d0, r4, r5
 8003900:	b005      	add	sp, #20
 8003902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003906:	2200      	movs	r2, #0
 8003908:	4b1b      	ldr	r3, [pc, #108]	; (8003978 <__kernel_sin+0x148>)
 800390a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800390e:	f7fc fe6f 	bl	80005f0 <__aeabi_dmul>
 8003912:	4632      	mov	r2, r6
 8003914:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003918:	463b      	mov	r3, r7
 800391a:	4640      	mov	r0, r8
 800391c:	4649      	mov	r1, r9
 800391e:	f7fc fe67 	bl	80005f0 <__aeabi_dmul>
 8003922:	4602      	mov	r2, r0
 8003924:	460b      	mov	r3, r1
 8003926:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800392a:	f7fc fcad 	bl	8000288 <__aeabi_dsub>
 800392e:	4652      	mov	r2, sl
 8003930:	465b      	mov	r3, fp
 8003932:	f7fc fe5d 	bl	80005f0 <__aeabi_dmul>
 8003936:	e9dd 2300 	ldrd	r2, r3, [sp]
 800393a:	f7fc fca5 	bl	8000288 <__aeabi_dsub>
 800393e:	a30c      	add	r3, pc, #48	; (adr r3, 8003970 <__kernel_sin+0x140>)
 8003940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003944:	4606      	mov	r6, r0
 8003946:	460f      	mov	r7, r1
 8003948:	4640      	mov	r0, r8
 800394a:	4649      	mov	r1, r9
 800394c:	f7fc fe50 	bl	80005f0 <__aeabi_dmul>
 8003950:	4602      	mov	r2, r0
 8003952:	460b      	mov	r3, r1
 8003954:	4630      	mov	r0, r6
 8003956:	4639      	mov	r1, r7
 8003958:	f7fc fc98 	bl	800028c <__adddf3>
 800395c:	4602      	mov	r2, r0
 800395e:	460b      	mov	r3, r1
 8003960:	4620      	mov	r0, r4
 8003962:	4629      	mov	r1, r5
 8003964:	f7fc fc90 	bl	8000288 <__aeabi_dsub>
 8003968:	e7c6      	b.n	80038f8 <__kernel_sin+0xc8>
 800396a:	bf00      	nop
 800396c:	f3af 8000 	nop.w
 8003970:	55555549 	.word	0x55555549
 8003974:	3fc55555 	.word	0x3fc55555
 8003978:	3fe00000 	.word	0x3fe00000
 800397c:	5acfd57c 	.word	0x5acfd57c
 8003980:	3de5d93a 	.word	0x3de5d93a
 8003984:	8a2b9ceb 	.word	0x8a2b9ceb
 8003988:	3e5ae5e6 	.word	0x3e5ae5e6
 800398c:	57b1fe7d 	.word	0x57b1fe7d
 8003990:	3ec71de3 	.word	0x3ec71de3
 8003994:	19c161d5 	.word	0x19c161d5
 8003998:	3f2a01a0 	.word	0x3f2a01a0
 800399c:	1110f8a6 	.word	0x1110f8a6
 80039a0:	3f811111 	.word	0x3f811111

080039a4 <fabs>:
 80039a4:	ec53 2b10 	vmov	r2, r3, d0
 80039a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80039ac:	ec43 2b10 	vmov	d0, r2, r3
 80039b0:	4770      	bx	lr
 80039b2:	0000      	movs	r0, r0
 80039b4:	0000      	movs	r0, r0
	...

080039b8 <floor>:
 80039b8:	ec51 0b10 	vmov	r0, r1, d0
 80039bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039c0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80039c4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80039c8:	2e13      	cmp	r6, #19
 80039ca:	ee10 8a10 	vmov	r8, s0
 80039ce:	460c      	mov	r4, r1
 80039d0:	ee10 5a10 	vmov	r5, s0
 80039d4:	dc35      	bgt.n	8003a42 <floor+0x8a>
 80039d6:	2e00      	cmp	r6, #0
 80039d8:	da17      	bge.n	8003a0a <floor+0x52>
 80039da:	a335      	add	r3, pc, #212	; (adr r3, 8003ab0 <floor+0xf8>)
 80039dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e0:	f7fc fc54 	bl	800028c <__adddf3>
 80039e4:	2200      	movs	r2, #0
 80039e6:	2300      	movs	r3, #0
 80039e8:	f7fd f892 	bl	8000b10 <__aeabi_dcmpgt>
 80039ec:	b150      	cbz	r0, 8003a04 <floor+0x4c>
 80039ee:	2c00      	cmp	r4, #0
 80039f0:	da5a      	bge.n	8003aa8 <floor+0xf0>
 80039f2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80039f6:	ea53 0308 	orrs.w	r3, r3, r8
 80039fa:	4b2f      	ldr	r3, [pc, #188]	; (8003ab8 <floor+0x100>)
 80039fc:	f04f 0500 	mov.w	r5, #0
 8003a00:	bf18      	it	ne
 8003a02:	461c      	movne	r4, r3
 8003a04:	4621      	mov	r1, r4
 8003a06:	4628      	mov	r0, r5
 8003a08:	e025      	b.n	8003a56 <floor+0x9e>
 8003a0a:	4f2c      	ldr	r7, [pc, #176]	; (8003abc <floor+0x104>)
 8003a0c:	4137      	asrs	r7, r6
 8003a0e:	ea01 0307 	and.w	r3, r1, r7
 8003a12:	4303      	orrs	r3, r0
 8003a14:	d01f      	beq.n	8003a56 <floor+0x9e>
 8003a16:	a326      	add	r3, pc, #152	; (adr r3, 8003ab0 <floor+0xf8>)
 8003a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1c:	f7fc fc36 	bl	800028c <__adddf3>
 8003a20:	2200      	movs	r2, #0
 8003a22:	2300      	movs	r3, #0
 8003a24:	f7fd f874 	bl	8000b10 <__aeabi_dcmpgt>
 8003a28:	2800      	cmp	r0, #0
 8003a2a:	d0eb      	beq.n	8003a04 <floor+0x4c>
 8003a2c:	2c00      	cmp	r4, #0
 8003a2e:	bfbe      	ittt	lt
 8003a30:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8003a34:	fa43 f606 	asrlt.w	r6, r3, r6
 8003a38:	19a4      	addlt	r4, r4, r6
 8003a3a:	ea24 0407 	bic.w	r4, r4, r7
 8003a3e:	2500      	movs	r5, #0
 8003a40:	e7e0      	b.n	8003a04 <floor+0x4c>
 8003a42:	2e33      	cmp	r6, #51	; 0x33
 8003a44:	dd0b      	ble.n	8003a5e <floor+0xa6>
 8003a46:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8003a4a:	d104      	bne.n	8003a56 <floor+0x9e>
 8003a4c:	ee10 2a10 	vmov	r2, s0
 8003a50:	460b      	mov	r3, r1
 8003a52:	f7fc fc1b 	bl	800028c <__adddf3>
 8003a56:	ec41 0b10 	vmov	d0, r0, r1
 8003a5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a5e:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8003a62:	f04f 33ff 	mov.w	r3, #4294967295
 8003a66:	fa23 f707 	lsr.w	r7, r3, r7
 8003a6a:	4238      	tst	r0, r7
 8003a6c:	d0f3      	beq.n	8003a56 <floor+0x9e>
 8003a6e:	a310      	add	r3, pc, #64	; (adr r3, 8003ab0 <floor+0xf8>)
 8003a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a74:	f7fc fc0a 	bl	800028c <__adddf3>
 8003a78:	2200      	movs	r2, #0
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	f7fd f848 	bl	8000b10 <__aeabi_dcmpgt>
 8003a80:	2800      	cmp	r0, #0
 8003a82:	d0bf      	beq.n	8003a04 <floor+0x4c>
 8003a84:	2c00      	cmp	r4, #0
 8003a86:	da02      	bge.n	8003a8e <floor+0xd6>
 8003a88:	2e14      	cmp	r6, #20
 8003a8a:	d103      	bne.n	8003a94 <floor+0xdc>
 8003a8c:	3401      	adds	r4, #1
 8003a8e:	ea25 0507 	bic.w	r5, r5, r7
 8003a92:	e7b7      	b.n	8003a04 <floor+0x4c>
 8003a94:	2301      	movs	r3, #1
 8003a96:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8003a9a:	fa03 f606 	lsl.w	r6, r3, r6
 8003a9e:	4435      	add	r5, r6
 8003aa0:	45a8      	cmp	r8, r5
 8003aa2:	bf88      	it	hi
 8003aa4:	18e4      	addhi	r4, r4, r3
 8003aa6:	e7f2      	b.n	8003a8e <floor+0xd6>
 8003aa8:	2500      	movs	r5, #0
 8003aaa:	462c      	mov	r4, r5
 8003aac:	e7aa      	b.n	8003a04 <floor+0x4c>
 8003aae:	bf00      	nop
 8003ab0:	8800759c 	.word	0x8800759c
 8003ab4:	7e37e43c 	.word	0x7e37e43c
 8003ab8:	bff00000 	.word	0xbff00000
 8003abc:	000fffff 	.word	0x000fffff

08003ac0 <scalbn>:
 8003ac0:	b570      	push	{r4, r5, r6, lr}
 8003ac2:	ec55 4b10 	vmov	r4, r5, d0
 8003ac6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8003aca:	4606      	mov	r6, r0
 8003acc:	462b      	mov	r3, r5
 8003ace:	b9b2      	cbnz	r2, 8003afe <scalbn+0x3e>
 8003ad0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8003ad4:	4323      	orrs	r3, r4
 8003ad6:	d03c      	beq.n	8003b52 <scalbn+0x92>
 8003ad8:	2200      	movs	r2, #0
 8003ada:	4b33      	ldr	r3, [pc, #204]	; (8003ba8 <scalbn+0xe8>)
 8003adc:	4629      	mov	r1, r5
 8003ade:	ee10 0a10 	vmov	r0, s0
 8003ae2:	f7fc fd85 	bl	80005f0 <__aeabi_dmul>
 8003ae6:	4a31      	ldr	r2, [pc, #196]	; (8003bac <scalbn+0xec>)
 8003ae8:	4296      	cmp	r6, r2
 8003aea:	4604      	mov	r4, r0
 8003aec:	460d      	mov	r5, r1
 8003aee:	460b      	mov	r3, r1
 8003af0:	da13      	bge.n	8003b1a <scalbn+0x5a>
 8003af2:	a329      	add	r3, pc, #164	; (adr r3, 8003b98 <scalbn+0xd8>)
 8003af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af8:	f7fc fd7a 	bl	80005f0 <__aeabi_dmul>
 8003afc:	e00a      	b.n	8003b14 <scalbn+0x54>
 8003afe:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8003b02:	428a      	cmp	r2, r1
 8003b04:	d10c      	bne.n	8003b20 <scalbn+0x60>
 8003b06:	ee10 2a10 	vmov	r2, s0
 8003b0a:	462b      	mov	r3, r5
 8003b0c:	4620      	mov	r0, r4
 8003b0e:	4629      	mov	r1, r5
 8003b10:	f7fc fbbc 	bl	800028c <__adddf3>
 8003b14:	4604      	mov	r4, r0
 8003b16:	460d      	mov	r5, r1
 8003b18:	e01b      	b.n	8003b52 <scalbn+0x92>
 8003b1a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8003b1e:	3a36      	subs	r2, #54	; 0x36
 8003b20:	4432      	add	r2, r6
 8003b22:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8003b26:	428a      	cmp	r2, r1
 8003b28:	dd0b      	ble.n	8003b42 <scalbn+0x82>
 8003b2a:	ec45 4b11 	vmov	d1, r4, r5
 8003b2e:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8003ba0 <scalbn+0xe0>
 8003b32:	f000 f83f 	bl	8003bb4 <copysign>
 8003b36:	a31a      	add	r3, pc, #104	; (adr r3, 8003ba0 <scalbn+0xe0>)
 8003b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3c:	ec51 0b10 	vmov	r0, r1, d0
 8003b40:	e7da      	b.n	8003af8 <scalbn+0x38>
 8003b42:	2a00      	cmp	r2, #0
 8003b44:	dd08      	ble.n	8003b58 <scalbn+0x98>
 8003b46:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003b4a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003b4e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003b52:	ec45 4b10 	vmov	d0, r4, r5
 8003b56:	bd70      	pop	{r4, r5, r6, pc}
 8003b58:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8003b5c:	da0d      	bge.n	8003b7a <scalbn+0xba>
 8003b5e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8003b62:	429e      	cmp	r6, r3
 8003b64:	ec45 4b11 	vmov	d1, r4, r5
 8003b68:	dce1      	bgt.n	8003b2e <scalbn+0x6e>
 8003b6a:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8003b98 <scalbn+0xd8>
 8003b6e:	f000 f821 	bl	8003bb4 <copysign>
 8003b72:	a309      	add	r3, pc, #36	; (adr r3, 8003b98 <scalbn+0xd8>)
 8003b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b78:	e7e0      	b.n	8003b3c <scalbn+0x7c>
 8003b7a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003b7e:	3236      	adds	r2, #54	; 0x36
 8003b80:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003b84:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003b88:	4620      	mov	r0, r4
 8003b8a:	4629      	mov	r1, r5
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	4b08      	ldr	r3, [pc, #32]	; (8003bb0 <scalbn+0xf0>)
 8003b90:	e7b2      	b.n	8003af8 <scalbn+0x38>
 8003b92:	bf00      	nop
 8003b94:	f3af 8000 	nop.w
 8003b98:	c2f8f359 	.word	0xc2f8f359
 8003b9c:	01a56e1f 	.word	0x01a56e1f
 8003ba0:	8800759c 	.word	0x8800759c
 8003ba4:	7e37e43c 	.word	0x7e37e43c
 8003ba8:	43500000 	.word	0x43500000
 8003bac:	ffff3cb0 	.word	0xffff3cb0
 8003bb0:	3c900000 	.word	0x3c900000

08003bb4 <copysign>:
 8003bb4:	ec53 2b10 	vmov	r2, r3, d0
 8003bb8:	ee11 0a90 	vmov	r0, s3
 8003bbc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003bc0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8003bc4:	ea41 0300 	orr.w	r3, r1, r0
 8003bc8:	ec43 2b10 	vmov	d0, r2, r3
 8003bcc:	4770      	bx	lr
	...

08003bd0 <_sbrk>:
 8003bd0:	4b04      	ldr	r3, [pc, #16]	; (8003be4 <_sbrk+0x14>)
 8003bd2:	6819      	ldr	r1, [r3, #0]
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	b909      	cbnz	r1, 8003bdc <_sbrk+0xc>
 8003bd8:	4903      	ldr	r1, [pc, #12]	; (8003be8 <_sbrk+0x18>)
 8003bda:	6019      	str	r1, [r3, #0]
 8003bdc:	6818      	ldr	r0, [r3, #0]
 8003bde:	4402      	add	r2, r0
 8003be0:	601a      	str	r2, [r3, #0]
 8003be2:	4770      	bx	lr
 8003be4:	200000a0 	.word	0x200000a0
 8003be8:	2000016c 	.word	0x2000016c

08003bec <_init>:
 8003bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bee:	bf00      	nop
 8003bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bf2:	bc08      	pop	{r3}
 8003bf4:	469e      	mov	lr, r3
 8003bf6:	4770      	bx	lr

08003bf8 <_fini>:
 8003bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bfa:	bf00      	nop
 8003bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bfe:	bc08      	pop	{r3}
 8003c00:	469e      	mov	lr, r3
 8003c02:	4770      	bx	lr
